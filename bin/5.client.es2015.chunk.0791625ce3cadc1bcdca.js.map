{"version":3,"sources":["webpack:///./app/services/api/content/content.service.ts","webpack:///./app/pages/+content/content/content.resolver.ts","webpack:///./app/modules/renderMarkdown/directives/renderMarkdown/renderMarkdown.directive.ts","webpack:///./app/pages/+content/content/content.component.html","webpack:///./app/pages/+content/content/content.component.ts","webpack:///./app/pages/+content/content.routes.ts","webpack:///./app/modules/renderMarkdown/modules/renderMarkdown.module.ts","webpack:///./app/pages/+content/content.module.ts"],"names":["_path","Text","Observable","ContentMenuResolver","_contentSvc","_route","_state","this","getMenu","toPromise","html","replace","Promise","resolve","selector","_router","menu","snapshot","data","_routeChangeSubscription","url","subscribe","length","navigate","relativeTo","unsubscribe","path","templateUrl","styleUrls","changeDetection","OnPush","contentComponents","RenderMarkdownModule","declarations","exports","ContentModule","provide","useClass","useExisting","imports","providers"],"mappings":"ivBAYa,EAAc,cAAS,IASzB,IAAkBA,GAErB,OAAO,KAQJ,UAEH,OAAO,O,+BArBF,I,mBAAA,EAAc,QAAd,EAAc,OASvB,GAHC,cACA,YAAS,IAAaC,MACtB,YAAI,aACO,gBAAK,S,gFAAwBC,EAAA,I,wBAUzC,GAFC,cACA,YAAI,a,0EACaA,EAAA,I,4BAnBT,EAAc,GAD1B,YAAQ,aACI,G,YAAA,G,IAAA,EAAc,E,KAF1B,M,qCCUM,MAAMC,EAGT,YAAoBC,GAAA,KAAAA,cAWb,QAAQC,EAAgCC,GAE3C,OAAOC,KAAKH,YAAYI,UAAUC,a,iCAhB7BN,GAAmB,S,mBAAnBA,EAAmB,QAAnBA,EAAmB,O,IAAnBA,EAAmB,E,KAD/B,O,kNCTM,MAAM,UAAgC,IAQlC,WAAWO,GAId,OAFAA,EAAOA,EAAKC,QAAQ,0BAA2B,IAExCC,QAAQC,QAAQH,I,+BAZlB,I,iBAAA,EAAuB,gD,YAAvB,G,IAAA,EAAuB,E,KAJnC,I,MACD,CACII,SAAU,iB,ydCNN,O,sBAQgB,O,mEAAA,+B,mDAAc,0BAAkE,8D,0BAJxF,YACI,aAA+B,OAAe,MAE9C,8BAGJ,O,yBALO,+CAA4B,iCAElB,uE,0BAJrB,YACI,qBAOJ,O,yBAPQ,yB,ICcP,GAAgB,MAiBzB,YAAoBT,EACAU,GADA,KAAAV,SACA,KAAAU,UAJb,KAAAC,KAAsB,GAatB,WAEHT,KAAKS,KAAQT,KAAKF,OAAOY,SAASC,KAAqBF,KAEvDT,KAAKY,yBAA2BZ,KAAKF,OAAOe,IAAIC,UAAUD,I,OAE/C,QAAJ,EAACA,SAAG,eAAEE,SAELf,KAAKQ,QAAQQ,SAAS,CAAC,KAAkB,CAACC,WAAYjB,KAAKF,WAUhE,c,MAE0B,QAA7B,EAAAE,KAAKY,gCAAwB,SAAEM,cAC/BlB,KAAKY,yBAA2B,O,kCAhD3B,IAAgB,oB,kBAAhB,GAAgB,mb,GAAA,MDpB7B,eACI,qBACI,8BAEA,uCAWJ,MAEA,eACJ,O,6BAhBsB,iCAAwD,4CAeI,iD,iWCGrE,GAAgB,GAD5B,YAAe,CAACO,KAAM,KAAMb,QAAS,CAACG,KAAMb,K,uBAkBb,IACC,OAlBpB,I,IAAA,GAAgB,E,KAR5B,I,MACD,CACIW,SAAU,eACVa,YAAa,yBACbC,UAAW,CAAC,0BACZC,gBAAiB,IAAwBC,Y,iDCftC,IAAIC,GACX,CACI,ICcG,MAAMC,I,kBAAAA,K,+CAAAA,Q,+CAAAA,GAAoB,eAPzB,GAAuB,SAIvB,K,IAGKA,GAAoB,E,KAXhC,I,MACD,CACIC,aACA,CACI,GAEJC,QACA,CACI,O,8ZCuBKC,GAAa,Q,kBAAbA,K,+CAAAA,KAAa,UAftB,CAEI,CACIC,QAAS,IACTC,SAAU,GAGd,CACID,QAAS,EACTE,YAAa,KAEjBnC,GACH,SAlBD,CACI6B,GACA,IACA,QAkBKG,GAAa,IADzB,YAAaJ,KACDI,K,+CAAAA,GAAa,4BApBlBH,GACA,IACA,O,IAkBKG,GAAa,E,KAzBzB,I,MACD,CACIF,aAAc,IAAIF,IAClBQ,QACA,CACIP,GACA,IACA,KAEJQ,UACA,CAEI,CACIJ,QAAS,IACTC,SAAU,GAGd,CACID,QAAS,EACTE,YAAa,KAEjBnC,O","file":"5.client.es2015.chunk.0791625ce3cadc1bcdca.js","sourcesContent":["import {Injectable} from \"@angular/core\";\r\nimport {BaseUrl, Produces, ResponseType, GET, Path, Cache, RESTClient} from \"@anglr/rest\";\r\nimport {HelpService as HelpServiceBase} from '@anglr/md-help/web';\r\nimport {Observable} from \"rxjs\";\r\n\r\nimport {ContentMenu} from \"./content.interface\";\r\n\r\n/**\r\n * Service used to obtain content files\r\n */\r\n@Injectable()\r\n@BaseUrl('content/')\r\nexport class ContentService extends RESTClient implements HelpServiceBase\r\n{\r\n    /**\r\n     * Gets content file from path\r\n     * @param _path Path to content file\r\n     */\r\n    @Cache()\r\n    @Produces(ResponseType.Text)\r\n    @GET('{path}.md')\r\n    public get(@Path('path') _path: string): Observable<string>\r\n    {\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets content menu\r\n     */\r\n    @Cache()\r\n    @GET('menu.json')\r\n    public getMenu(): Observable<ContentMenu[]>\r\n    {\r\n        return null;\r\n    }\r\n}","import {Injectable} from \"@angular/core\";\r\nimport {Resolve, ActivatedRouteSnapshot, RouterStateSnapshot} from \"@angular/router\";\r\n\r\nimport {ContentMenu, ContentService} from \"../../../services/api/content\";\r\n\r\n/**\r\n * Data for content component route\r\n */\r\nexport interface ContentData\r\n{\r\n    /**\r\n     * Menu to be rendered\r\n     */\r\n    menu: ContentMenu[];\r\n}\r\n\r\n/**\r\n * Resolver that resolves data for content menu\r\n */\r\n@Injectable()\r\nexport class ContentMenuResolver implements Resolve<ContentMenu[]>\r\n{\r\n    //######################### constructor #########################\r\n    constructor(private _contentSvc: ContentService)\r\n    {\r\n    }\r\n\r\n    //######################### implementation of Resolve<PrehladHospCookieData> #########################\r\n\r\n    /**\r\n     * Resolves data for 'poistenec' for 'history' detail\r\n     * @param {ActivatedRouteSnapshot} _route Next route that will be resolved\r\n     * @param {RouterStateSnapshot} _state Current state of router\r\n     */\r\n    public resolve(_route: ActivatedRouteSnapshot, _state: RouterStateSnapshot): Promise<ContentMenu[]>\r\n    {\r\n        return this._contentSvc.getMenu().toPromise();\r\n    }\r\n}","import {Directive} from '@angular/core';\r\nimport {RenderMarkdownDirective as RenderMdDirective} from '@anglr/md-help/web';\r\n\r\n/**\r\n * Directive used for custom rendering of markdown\r\n */\r\n@Directive(\r\n{\r\n    selector: \"[renderMd]\"\r\n})\r\nexport class RenderMarkdownDirective extends RenderMdDirective\r\n{\r\n    //######################### public methods #########################\r\n\r\n    /**\r\n     * Filters out parts of html that should not be rendered\r\n     * @param html Html to be filtered\r\n     */\r\n    public filterHtml(html: string): Promise<string>\r\n    {\r\n        html = html.replace(/content\\/SAMPLES_URL\\//g, \"\");\r\n\r\n        return Promise.resolve(html);\r\n    }\r\n}","<div class=\"flex-row flex-1\">\r\n    <md-menu #mdMenu baseUrl=\"/content\" activeCssClass=\"active\" class=\"thin-scrollbar overflow-vertical-auto\">\r\n        <ng-container *ngTemplateOutlet=\"menuTmpl; context: {$implicit: menu}\"></ng-container>\r\n\r\n        <ng-template #menuTmpl let-children>\r\n            <ul>\r\n                <li *ngFor=\"let item of children\">\r\n                    <a [mdMenuItem]=\"item?.mdPath\">{{item?.title}}</a>\r\n\r\n                    <ng-template [ngIf]=\"!!item?.children?.length\">\r\n                        <ng-container *ngTemplateOutlet=\"menuTmpl; context: {$implicit: item?.children}\"></ng-container>\r\n                    </ng-template>\r\n                </li>\r\n            </ul>\r\n        </ng-template>\r\n    </md-menu>\r\n\r\n    <div class=\"flex-1 md-content thin-scrollbar overflow-vertical-auto\" renderMd [source]=\"mdMenu?.activePath\" baseUrl=\"content\"></div>\r\n</div>","import {Component, ChangeDetectionStrategy, OnInit, OnDestroy} from \"@angular/core\";\r\nimport {ActivatedRoute, Router} from \"@angular/router\";\r\nimport {ComponentRoute} from \"@anglr/common/router\";\r\nimport {Subscription} from \"rxjs\";\r\n\r\nimport {DEFAULT_CONTENT} from \"../../../misc/constants\";\r\nimport {ContentMenuResolver, ContentData} from \"./content.resolver\";\r\nimport {ContentMenu} from \"../../../services/api/content\";\r\n\r\n/**\r\n * Content component used for displaying markdowns\r\n */\r\n@Component(\r\n{\r\n    selector: 'content-view',\r\n    templateUrl: 'content.component.html',\r\n    styleUrls: ['content.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\n@ComponentRoute({path: '**', resolve: {menu: ContentMenuResolver}})\r\nexport class ContentComponent implements OnInit, OnDestroy\r\n{\r\n    //######################### private fields #########################\r\n\r\n    /**\r\n     * Subscription for changes in route\r\n     */\r\n    private _routeChangeSubscription: Subscription;\r\n\r\n    //######################### public properties - template bindings #########################\r\n\r\n    /**\r\n     * Content menu array\r\n     */\r\n    public menu: ContentMenu[] = [];\r\n\r\n    //######################### constructor #########################\r\n    constructor(private _route: ActivatedRoute,\r\n                private _router: Router)\r\n    {\r\n    }\r\n\r\n    //######################### public methods - implementation of OnInit #########################\r\n    \r\n    /**\r\n     * Initialize component\r\n     */\r\n    public ngOnInit()\r\n    {\r\n        this.menu = (this._route.snapshot.data as ContentData).menu;\r\n\r\n        this._routeChangeSubscription = this._route.url.subscribe(url =>\r\n        {\r\n            if(!url?.length)\r\n            {\r\n                this._router.navigate([DEFAULT_CONTENT], {relativeTo: this._route});\r\n            }\r\n        });\r\n    }\r\n\r\n    //######################### public methods - implementation of OnDestroy #########################\r\n    \r\n    /**\r\n     * Called when component is destroyed\r\n     */\r\n    public ngOnDestroy()\r\n    {\r\n        this._routeChangeSubscription?.unsubscribe();\r\n        this._routeChangeSubscription = null;\r\n    }\r\n}","import {ContentComponent} from \"./content/content.component\";\r\n\r\nexport var contentComponents = \r\n[\r\n    ContentComponent\r\n];","import {NgModule} from \"@angular/core\";\r\n\r\nimport {RenderMarkdownDirective} from \"../directives\";\r\n\r\n/**\r\n * Module containing custom render markdown directive\r\n */\r\n@NgModule(\r\n{\r\n    declarations:\r\n    [\r\n        RenderMarkdownDirective\r\n    ],\r\n    exports:\r\n    [\r\n        RenderMarkdownDirective\r\n    ]\r\n})\r\nexport class RenderMarkdownModule\r\n{\r\n}","import {NgModule, ClassProvider, ExistingProvider} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ModuleRoutes} from '@anglr/common/router';\nimport {HelpService, MarkdownModule} from '@anglr/md-help/web';\n\nimport {contentComponents} from './content.routes';\nimport {ContentService} from '../../services/api/content';\nimport {ContentMenuResolver} from './content/content.resolver';\nimport {RenderMarkdownModule} from '../../modules';\n\n/**\n * Content module for displaying content pages\n */\n@NgModule(\n{\n    declarations: [...contentComponents],\n    imports:\n    [\n        RenderMarkdownModule,\n        CommonModule,\n        MarkdownModule\n    ],\n    providers:\n    [\n        <ClassProvider>\n        {\n            provide: HelpService,\n            useClass: ContentService\n        },\n        <ExistingProvider>\n        {\n            provide: ContentService,\n            useExisting: HelpService\n        },\n        ContentMenuResolver\n    ]\n})\n@ModuleRoutes(contentComponents)\nexport class ContentModule\n{\n}"],"sourceRoot":""}