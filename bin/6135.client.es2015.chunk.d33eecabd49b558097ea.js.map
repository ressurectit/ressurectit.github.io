{"version":3,"sources":["webpack://ressurectit.github.io/./node_modules/@anglr/select/dist/es2015/src/misc/optionsGatherer/dynamicOptionsGatherer.js","webpack://ressurectit.github.io/./node_modules/@anglr/select/dist/es2015/src/plugins/valueHandler/dynamic/dynamicValueHandler.component.js"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","DynamicOptionsGatherer","constructor","_options","this","_minLength","_initialized","options","optionsChange","Error","isPresent","minLength","initializeGatherer","liveSearch","ngSelectPlugins","_liveSearch","_searchValueChangeSubscription","unsubscribe","popup","_popup","_visibilitySubscription","_valueHandler","visibilityChange","subscribe","_processOptionsChange","searchValueChange","delay","pipe","destroyGatherer","_a","_b","searchValue","pluginBus","selectOptions","multiple","Array","isArray","selectedOptions","text","length","emit","dynamicOptionsCallback","defaultOptions","textExtractor","DynamicValueHandlerComponent","pluginElement","super","_setValue","option","find","selOpt","valueComparer","index","indexOf","splice","push","_clearSelected","_markValueAsSelected","_normalState","invalidateVisuals","valueChange","extend","setValue","_useOptionsAsValue","initOptions","_loadOptions","isBlank","items","itm","_loadText","item","opts","opt","selected","active","t","type","selectors","features","decls","vars","template","rf","ctx","encapsulation","changeDetection","ctorParameters","undefined","decorators","args"],"mappings":"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","file":"6135.client.es2015.chunk.d33eecabd49b558097ea.js","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: src/misc/optionsGatherer/dynamicOptionsGatherer.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nimport { EventEmitter } from \"@angular/core\";\r\nimport { isPresent } from \"@jscrpt/common\";\r\nimport { debounceTime } from \"rxjs/operators\";\r\nimport { LIVE_SEARCH } from \"../../plugins/liveSearch/types\";\r\nimport { POPUP } from '../../plugins/popup/types';\r\nimport { VALUE_HANDLER } from '../../plugins/valueHandler/types';\r\n/**\r\n * Class that is used as for options gathering in dynamic way, for example from external source when writing\r\n * @template TValue\r\n */\r\nexport class DynamicOptionsGatherer {\r\n    //######################### constructor #########################\r\n    /**\r\n     * @param {?} _options\r\n     */\r\n    constructor(_options) {\r\n        this._options = _options;\r\n        /**\r\n         * Minimal number of characters required for searching\r\n         */\r\n        this._minLength = 1;\r\n        /**\r\n         * Indication that first initial call was performed\r\n         */\r\n        this._initialized = false;\r\n        //######################### public properties - implementation of OptionsGatherer #########################\r\n        /**\r\n         * Array of provided options for select\r\n         */\r\n        this.options = [];\r\n        /**\r\n         * Occurs when array of provided options has changed\r\n         */\r\n        this.optionsChange = new EventEmitter();\r\n        if (!this._options) {\r\n            throw new Error(\"Options can not be null!\");\r\n        }\r\n        if (this._options && isPresent(this._options.minLength)) {\r\n            this._minLength = this._options.minLength;\r\n        }\r\n    }\r\n    /**\r\n     * Array of visible, displayed options for select\r\n     * @return {?}\r\n     */\r\n    get availableOptions() {\r\n        return this.options;\r\n    }\r\n    /**\r\n     * Occurs when array of visible, displayed options has changed\r\n     * @return {?}\r\n     */\r\n    get availableOptionsChange() {\r\n        return this.optionsChange;\r\n    }\r\n    //######################### public methods - implementation of OptionsGatherer #########################\r\n    /**\r\n     * Initialize gatherer during initialization phase\r\n     * @return {?}\r\n     */\r\n    initializeGatherer() {\r\n        /** @type {?} */\r\n        let liveSearch = (/** @type {?} */ (this.ngSelectPlugins[LIVE_SEARCH]));\r\n        if (this._liveSearch && this._liveSearch != liveSearch) {\r\n            this._searchValueChangeSubscription.unsubscribe();\r\n            this._searchValueChangeSubscription = null;\r\n            this._liveSearch = null;\r\n        }\r\n        /** @type {?} */\r\n        let popup = (/** @type {?} */ (this.ngSelectPlugins[POPUP]));\r\n        if (this._popup && this._popup != popup) {\r\n            this._visibilitySubscription.unsubscribe();\r\n            this._visibilitySubscription = null;\r\n            this._popup = null;\r\n        }\r\n        this._valueHandler = (/** @type {?} */ (this.ngSelectPlugins[VALUE_HANDLER]));\r\n        if (!this._popup) {\r\n            this._popup = popup;\r\n            this._visibilitySubscription = this._popup.visibilityChange.subscribe((/**\r\n             * @return {?}\r\n             */\r\n            () => __awaiter(this, void 0, void 0, function* () {\r\n                if (this._initialized) {\r\n                    return;\r\n                }\r\n                yield this._processOptionsChange();\r\n            })));\r\n        }\r\n        if (!this._liveSearch) {\r\n            this._liveSearch = liveSearch;\r\n            /** @type {?} */\r\n            let searchValueChange = this._liveSearch.searchValueChange;\r\n            if (this._options.delay) {\r\n                searchValueChange = searchValueChange.pipe(debounceTime(this._options.delay));\r\n            }\r\n            this._searchValueChangeSubscription = searchValueChange.subscribe((/**\r\n             * @return {?}\r\n             */\r\n            () => __awaiter(this, void 0, void 0, function* () { return yield this._processOptionsChange(); })));\r\n        }\r\n    }\r\n    /**\r\n     * Called when gatherer needs to be destroyed\r\n     * @return {?}\r\n     */\r\n    destroyGatherer() {\r\n        var _a, _b;\r\n        (_a = this._searchValueChangeSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();\r\n        this._searchValueChangeSubscription = null;\r\n        (_b = this._visibilitySubscription) === null || _b === void 0 ? void 0 : _b.unsubscribe();\r\n        this._visibilitySubscription = null;\r\n    }\r\n    //######################### protected methods #########################\r\n    /**\r\n     * Process options change request\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    _processOptionsChange() {\r\n        var _a, _b;\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            /** @type {?} */\r\n            let searchValue = this._liveSearch.searchValue;\r\n            //use value as search value if not initialized\r\n            if (!this._initialized && !this.pluginBus.selectOptions.multiple && !Array.isArray(this._valueHandler.selectedOptions) && isPresent(this._valueHandler.selectedOptions)) {\r\n                searchValue = (_a = this._liveSearch.searchValue) !== null && _a !== void 0 ? _a : this._valueHandler.selectedOptions.text;\r\n            }\r\n            this._initialized = true;\r\n            if (((_b = searchValue === null || searchValue === void 0 ? void 0 : searchValue.length) !== null && _b !== void 0 ? _b : 0) < this._minLength) {\r\n                //remove available options if multiple or empty string\r\n                if (isPresent(searchValue) || this.pluginBus.selectOptions.multiple) {\r\n                    this.options = [];\r\n                    this.optionsChange.emit();\r\n                }\r\n                return;\r\n            }\r\n            this.options = yield this._options.dynamicOptionsCallback(searchValue !== null && searchValue !== void 0 ? searchValue : '');\r\n            this.optionsChange.emit();\r\n        });\r\n    }\r\n}\r\nif (false) {\r\n    /**\r\n     * Live search plugin currently used in NgSelect\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    DynamicOptionsGatherer.prototype._liveSearch;\r\n    /**\r\n     * Subscription for changes of live search value\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    DynamicOptionsGatherer.prototype._searchValueChangeSubscription;\r\n    /**\r\n     * Subscription for visibility change of popup\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    DynamicOptionsGatherer.prototype._visibilitySubscription;\r\n    /**\r\n     * Minimal number of characters required for searching\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    DynamicOptionsGatherer.prototype._minLength;\r\n    /**\r\n     * Popup that is displayed\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    DynamicOptionsGatherer.prototype._popup;\r\n    /**\r\n     * Indication that first initial call was performed\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    DynamicOptionsGatherer.prototype._initialized;\r\n    /**\r\n     * Currently used value handler plugin\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    DynamicOptionsGatherer.prototype._valueHandler;\r\n    /**\r\n     * Array of provided options for select\r\n     * @type {?}\r\n     */\r\n    DynamicOptionsGatherer.prototype.options;\r\n    /**\r\n     * Occurs when array of provided options has changed\r\n     * @type {?}\r\n     */\r\n    DynamicOptionsGatherer.prototype.optionsChange;\r\n    /**\r\n     * NgSelect plugin instances available for gatherer\r\n     * @type {?}\r\n     */\r\n    DynamicOptionsGatherer.prototype.ngSelectPlugins;\r\n    /**\r\n     * Plugin bus used for inter plugin shared events\r\n     * @type {?}\r\n     */\r\n    DynamicOptionsGatherer.prototype.pluginBus;\r\n    /**\r\n     * Select element that implements default gatherers\r\n     * @type {?}\r\n     */\r\n    DynamicOptionsGatherer.prototype.select;\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    DynamicOptionsGatherer.prototype._options;\r\n}\r\n//# sourceMappingURL=data:application/json;base64,","import * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '../../../misc/pluginBus/pluginBus';\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: src/plugins/valueHandler/dynamic/dynamicValueHandler.component.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nimport { Component, ChangeDetectionStrategy, Inject, Optional, ElementRef } from '@angular/core';\r\nimport { extend, isBlank } from '@jscrpt/common';\r\nimport { NG_SELECT_PLUGIN_INSTANCES } from '../../../components/select/types';\r\nimport { VALUE_HANDLER_OPTIONS } from '../types';\r\nimport { ValueHandlerBase } from '../valueHandlerBase';\r\nimport { PluginBus } from '../../../misc/pluginBus/pluginBus';\r\nconst ɵ0 = /**\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nvalue => value;\r\n/**\r\n * Default options for value handler\r\n * \\@internal\r\n * @type {?}\r\n */\r\nconst defaultOptions = {\r\n    textExtractor: (ɵ0)\r\n};\r\n/**\r\n * Component used for handling current value of NgSelect, allows values which are not present in options\r\n * @template TValue\r\n */\r\nexport class DynamicValueHandlerComponent extends ValueHandlerBase {\r\n    //######################### constructor #########################\r\n    /**\r\n     * @param {?} ngSelectPlugins\r\n     * @param {?} pluginBus\r\n     * @param {?} pluginElement\r\n     * @param {?=} options\r\n     */\r\n    constructor(ngSelectPlugins, pluginBus, pluginElement, options) {\r\n        super(ngSelectPlugins, pluginElement, pluginBus);\r\n        //######################### protected methods #########################\r\n        /**\r\n         * Sets value\r\n         */\r\n        this._setValue = (/**\r\n         * @param {?} option\r\n         * @return {?}\r\n         */\r\n        (option) => {\r\n            //multiple values are allowed\r\n            if (this.pluginBus.selectOptions.multiple) {\r\n                if (!Array.isArray(this.selectedOptions)) {\r\n                    this.selectedOptions = [];\r\n                }\r\n                if (Array.isArray(this.selectedOptions)) {\r\n                    //value exists, removing from list\r\n                    if (this.selectedOptions.find((/**\r\n                     * @param {?} selOpt\r\n                     * @return {?}\r\n                     */\r\n                    selOpt => this.valueComparer(selOpt.value, option.value)))) {\r\n                        /** @type {?} */\r\n                        let index = this.selectedOptions.indexOf(option);\r\n                        this.selectedOptions.splice(index, 1);\r\n                    }\r\n                    //adding value\r\n                    else {\r\n                        this.selectedOptions.push(option);\r\n                    }\r\n                    this.selectedOptions = [...this.selectedOptions];\r\n                }\r\n            }\r\n            else \r\n            //only signle value allowed\r\n            {\r\n                this.selectedOptions = option;\r\n            }\r\n            this._clearSelected();\r\n            this._markValueAsSelected();\r\n            this._normalState.invalidateVisuals();\r\n            this.valueChange.emit();\r\n        });\r\n        this._options = extend(true, {}, defaultOptions, options);\r\n    }\r\n    //######################### public properties - implementation of DynamicValueHandler #########################\r\n    /**\r\n     * Options for NgSelect plugin\r\n     * @return {?}\r\n     */\r\n    get options() {\r\n        return this._options;\r\n    }\r\n    /**\r\n     * @param {?} options\r\n     * @return {?}\r\n     */\r\n    set options(options) {\r\n        this._options = extend(true, this._options, options);\r\n    }\r\n    //######################### public methods - implementation of DynamicValueHandler #########################\r\n    /**\r\n     * Sets value for NgSelect\r\n     * @param {?} value - Value to be set\r\n     * @return {?}\r\n     */\r\n    setValue(value) {\r\n        this._useOptionsAsValue(value);\r\n    }\r\n    /**\r\n     * Initialize plugin options, all operations required to be done with plugin options are handled here\r\n     * @return {?}\r\n     */\r\n    initOptions() {\r\n    }\r\n    /**\r\n     * Explicitly runs invalidation of content (change detection)\r\n     * @return {?}\r\n     */\r\n    invalidateVisuals() {\r\n    }\r\n    /**\r\n     * Loads options\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    _loadOptions() {\r\n    }\r\n    /**\r\n     * Converts value to options\r\n     * @protected\r\n     * @param {?} value - Value to be changed to options\r\n     * @return {?}\r\n     */\r\n    _useOptionsAsValue(value) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            //set empty value\r\n            if (isBlank(value) || (Array.isArray(value) && !value.length)) {\r\n                this.selectedOptions = value;\r\n                this._clearSelected();\r\n                this._normalState.invalidateVisuals();\r\n                this.valueChange.emit();\r\n                return;\r\n            }\r\n            if (this.pluginBus.selectOptions.multiple) {\r\n                if (Array.isArray(value)) {\r\n                    /** @type {?} */\r\n                    let items = value;\r\n                    /** @type {?} */\r\n                    let options = [];\r\n                    for (let itm of items) {\r\n                        options.push(yield this._loadText(itm));\r\n                    }\r\n                    this.selectedOptions = options;\r\n                }\r\n                else {\r\n                    throw new Error('Don`t you have redundant \"multiple\"?');\r\n                }\r\n            }\r\n            else {\r\n                if (Array.isArray(value)) {\r\n                    throw new Error('Are you missing attribute \"multiple\"?');\r\n                }\r\n                else {\r\n                    /** @type {?} */\r\n                    let item = value;\r\n                    this.selectedOptions = yield this._loadText(item);\r\n                }\r\n            }\r\n            this._clearSelected();\r\n            this._markValueAsSelected();\r\n            this._normalState.invalidateVisuals();\r\n            this.valueChange.emit();\r\n        });\r\n    }\r\n    /**\r\n     * Loads text for specified value\r\n     * @protected\r\n     * @param {?} value - Value that is going to be used for obtaining option\r\n     * @return {?}\r\n     */\r\n    _loadText(value) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            //load option dynamically\r\n            if (this.options.dynamicOptionsCallback) {\r\n                /** @type {?} */\r\n                let opts = yield this.options.dynamicOptionsCallback(value);\r\n                if (opts && opts.length) {\r\n                    /** @type {?} */\r\n                    let opt = opts[0];\r\n                    opt.value = value;\r\n                    opt.selected = true;\r\n                    return opt;\r\n                }\r\n            }\r\n            //load option from value\r\n            return (/** @type {?} */ ({\r\n                selected: true,\r\n                active: false,\r\n                value: value,\r\n                text: this.options.textExtractor(value)\r\n            }));\r\n        });\r\n    }\r\n}\nDynamicValueHandlerComponent.ɵfac = function DynamicValueHandlerComponent_Factory(t) { return new (t || DynamicValueHandlerComponent)(ɵngcc0.ɵɵdirectiveInject(NG_SELECT_PLUGIN_INSTANCES, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.PluginBus, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(VALUE_HANDLER_OPTIONS, 8)); };\nDynamicValueHandlerComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DynamicValueHandlerComponent, selectors: [[\"ng-dynamic-value-handler\"]], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DynamicValueHandlerComponent_Template(rf, ctx) { }, encapsulation: 2, changeDetection: 0 });\r\n/** @nocollapse */\r\nDynamicValueHandlerComponent.ctorParameters = () => [\r\n    { type: undefined, decorators: [{ type: Inject, args: [NG_SELECT_PLUGIN_INSTANCES,] }, { type: Optional }] },\r\n    { type: PluginBus, decorators: [{ type: Optional }] },\r\n    { type: ElementRef },\r\n    { type: undefined, decorators: [{ type: Inject, args: [VALUE_HANDLER_OPTIONS,] }, { type: Optional }] }\r\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DynamicValueHandlerComponent, [{\n        type: Component,\n        args: [{\n                selector: \"ng-dynamic-value-handler\",\n                template: '',\n                changeDetection: ChangeDetectionStrategy.OnPush\n            }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [NG_SELECT_PLUGIN_INSTANCES]\n            }, {\n                type: Optional\n            }] }, { type: ɵngcc1.PluginBus, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [VALUE_HANDLER_OPTIONS]\n            }, {\n                type: Optional\n            }] }]; }, null); })();\r\nif (false) {\r\n    /**\r\n     * Sets value\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    DynamicValueHandlerComponent.prototype._setValue;\r\n}\r\nexport { ɵ0 };\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,"],"sourceRoot":""}