{"version":3,"sources":["webpack://ressurectit.github.io/./content/l10n|lazy|/^/.*/.json$/|groupOptions: {}|namespace object","webpack://ressurectit.github.io/./app/hacks.ts","webpack://ressurectit.github.io/./app/boot/app.component.animations.ts","webpack://ressurectit.github.io/./app/boot/app.component.html","webpack://ressurectit.github.io/./app/boot/app.component.ts","webpack://ressurectit.github.io/./app/pages/notFound/notFound.component.ts","webpack://ressurectit.github.io/./app/pages/notFound/notFound.component.html","webpack://ressurectit.github.io/./app/boot/app.component.routes.ts","webpack://ressurectit.github.io/./app/services/api/account/account.service.ts","webpack://ressurectit.github.io/./app/services/globalization/globalization.service.ts","webpack://ressurectit.github.io/./app/boot/grid.global.conf.ts","webpack://ressurectit.github.io/./app/boot/select.global.conf.ts","webpack://ressurectit.github.io/./app/services/api/restLogger/restLogger.service.ts","webpack://ressurectit.github.io/./app/boot/app.config.ts","webpack://ressurectit.github.io/./app/services/webpackTranslateLoader/webpackTranslateLoader.service.ts","webpack://ressurectit.github.io/./app/main.browser.bootstrap.ts","webpack://ressurectit.github.io/./app/boot/app.module.ts","webpack://ressurectit.github.io/./app/boot/browser-app.module.ts","webpack://ressurectit.github.io/./app/misc/constants.ts","webpack://ressurectit.github.io/./app/misc/tokens.ts","webpack://ressurectit.github.io/./app/modules/asSource/modules/asSource.module.ts","webpack://ressurectit.github.io/./app/modules/debuggingFeature.module.ts","webpack://ressurectit.github.io/./app/modules/displayingFeature.module.ts","webpack://ressurectit.github.io/./app/modules/formsFeature.module.ts","webpack://ressurectit.github.io/./app/modules/gridFeature.module.ts","webpack://ressurectit.github.io/./app/modules/renderMarkdown/modules/renderMarkdown.module.ts","webpack://ressurectit.github.io/./app/modules/wikiFeature.module.ts","webpack://ressurectit.github.io/./app/modules/samplesFeature.module.ts","webpack://ressurectit.github.io/./app/modules/userSettings/modules/userSettings.module.ts","webpack://ressurectit.github.io/./app/modules/userSettings/components/userSettings/userSettings.component.ts","webpack://ressurectit.github.io/./app/modules/userSettings/components/userSettings/userSettings.component.html","webpack://ressurectit.github.io/./app/modules/vyberStlpcovBtn/modules/vyberStlpcovBtn.module.ts","webpack://ressurectit.github.io/./app/modules/sourceCode/modules/sourceCode.module.ts","webpack://ressurectit.github.io/./app/services/settings/settings.service.ts","webpack://ressurectit.github.io/./app/services/settings/localSettingsStorage.ts"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","t","keys","Object","module","exports","global","Konami","observableSubscribe","Observable","next","error","complete","isBlank","isFunction","err","config","console","log","call","this","routeAnimationTrigger","optional","position","top","left","width","loaderTrigger","transform","opacity","AppComponent","constructor","translate","router","settings","document","logger","_changeDetector","_dialog","consoleVisible","routeComponentState","initialized","verbose","body","classList","add","theme","_theme","_settingsChangeSubscription","settingsChange","subscribe","itm","nameof","remove","use","language","detectChanges","_settingsDebuggingChangeSubscription","settingsDebuggingChange","_toggleConsoleHotkey","setDefaultLang","location","pathname","url","navigateByUrl","parseUrl","href","replace","settingsDebugging","consoleEnabled","ngAfterViewInit","_routerOutletActivatedSubscription","routerOutlet","activateEvents","activatedRouteData","activatedRoute","component","name","ngOnDestroy","unsubscribe","showUserSettings","open","title","NotFoundComponent","statusCodeService","setStatusCode","path","components","routesOptions","rootModule","rootModuleConfig","enableTracing","useHash","anchorScrolling","scrollPositionRestoration","onSameUrlNavigation","staticRoutesBefore","redirectTo","pathMatch","loadChildren","ContentModule","SampleRestModule","AccountService","http","injector","_location","baseUrl","middlewaresOrder","methodMiddlewares","super","_permissions","_computePermissionsForRoles","login","accessToken","append","userName","password","rememberMe","toString","_login","isAuthPage","indexOf","logout","getUserIdentity","showAuthPage","get","navigate","queryParams","returnUrl","showAccessDenied","_body","getUserIdentityResponseTransform","response","pipe","catchError","status","observer","isAuthenticated","permissions","firstName","surname","alert","throwError","data","privileges","_roles2privileges","roles","concat","perms","forEach","role","permission","Array","isArray","push","N","GlobalizationService","empty","globalGridConfig","provide","useValue","texts","noData","loading","notLoaded","P","itemsPerPageValues","initialItemsPerPage","globalSelectConfig","nothingSelected","RestLoggerService","_logs","providers","useFactory","useClass","authService","deps","multi","settingsSvc","settingsLogging","consoleLogLevel","debugDataEnabled","setEnabled","debugData","locale","sk","WebpackTranslateLoaderService","getTranslation","lang","result","default","platform","AppModule","appId","loader","BrowserAppModule","bootstrapModule","moduleRef","clearAndDeactivate","APP_TRANSFER_ID","NOTHING_SELECTED","DEFAULT_CONTENT","SETTINGS_STORAGE","AsSourceModule","DebuggingFeatureModule","DisplayingFeatureModule","FormsFeatureModule","GridFeatureModule","RenderMarkdownModule","WikiFeatureModule","SamplesFeatureModule","A","UserSettingsModule","UserSettingsSections","UserSettingsComponent","formBuilder","consoleConfig","themes","languages","logLevels","activeSection","General","debuggingSettings","loggingSettings","_getLogLevels","generalSettingsForm","group","debuggingSettingsForm","loggingSettingsForm","fileLogLevel","valueChanges","generalSettings","setSettings","debugSettings","setDebuggingSettings","restrictToLevel","setLoggingSettings","val","isNaN","value","VyberStlpcovBtnModule","SourceCodeModule","SettingsService","keyValueDiffers","_storage","_settings","_settingsDebugging","getDebugging","_settingsLogging","getLogging","_settingsChangeSubject","Subject","_settingsDebuggingChangeSubject","_settingsValueDiff","find","create","diff","_settingsDebuggingValueDiff","asObservable","extend","set","forEachChangedItem","key","setDebugging","setLogging","GENERAL_SETTINGS_STORAGE","DEBUGGING_SETTINGS_STORAGE","LOGGING_SETTINGS_STORAGE","LocalSettingsStorage"],"mappings":"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","file":"4805.client.es2015.chunk.a9e42bae7c6bb471f51e.js","sourcesContent":["var map = {\n\t\"./en.json\": [\n\t\t41626,\n\t\t1626\n\t],\n\t\"./sk.json\": [\n\t\t65241,\n\t\t5241\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(() => {\n\t\treturn __webpack_require__.t(id, 3);\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = 25048;\nmodule.exports = webpackAsyncContext;","import {updateHttpRequestClone} from '@anglr/common';\nimport {isFunction, isBlank, initializeJsDevMode, globalDefine} from '@jscrpt/common';\nimport {Observable} from 'rxjs';\n\nimport {config} from './config';\n\ninitializeJsDevMode();\nupdateHttpRequestClone();\n\nglobalDefine(global =>\n{\n    if(!global.Konami)\n    {\n        global.Konami = function(){};\n    }\n});\n\n//HACK - prevents application crash if no error handler provided\nconst observableSubscribe = Observable.prototype.subscribe;\n\nObservable.prototype.subscribe = <any>function(next, error, complete)\n{\n    if(isBlank(error) || !isFunction(error))\n    {\n        error = (err) => \n        {\n            if(config.configuration.debug)\n            {\n                console.log(err);\n            }\n        };\n    }\n\n    return observableSubscribe.call(this, next, error, complete);\n};","import {trigger, transition, query, animate, style, animateChild, group} from \"@angular/animations\";\n\n/**\n * Animations run when changing route\n */\nexport const routeAnimationTrigger = trigger('routeAnimations',\n[\n    transition('void <=> *, none <=> *',\n    [\n        query(':enter', animateChild(), {optional: true})\n    ]),\n    transition('* => *', \n    [\n        query('.main-content',\n        [\n            style({ position: 'relative' }),\n            query(':enter, :leave', \n            [\n                style(\n                {\n                    position: 'absolute',\n                    top: 0,\n                    left: 0,\n                    width: '100%'\n                })\n            ]),\n            query(':enter', \n            [\n                style({ left: '-100%'})\n            ]),\n            query(':leave', animateChild()),\n            group(\n            [\n                query(':leave', \n                [\n                    animate('300ms ease-out', style({ left: '100%'}))\n                ]),\n                query(':enter', \n                [\n                    animate('300ms ease-out', style({ left: '0%'}))\n                ])\n            ]),\n            query(':enter', animateChild())\n        ])\n    ])\n]);\n\nexport const loaderTrigger = trigger('loaderAnimation',\n[\n    transition(':leave',\n    [\n        group(\n        [\n            query('.start-title', \n            [\n                animate('350ms', style(\n                {\n                    transform: 'scale(2)'\n                }))\n            ]),\n            animate('350ms', style(\n            {\n                opacity: 0\n            }))\n        ])\n    ])\n]);","<div class=\"flex-row page-title\">\r\n    <div class=\"title-text flex-1\">Ressurect IT</div>\r\n\r\n    <div>\r\n        <a class=\"btn-icon margin-right-small\" (click)=\"showUserSettings()\">\r\n            <span class=\"fas fa-cog\"></span>\r\n        </a>\r\n\r\n        <a class=\"margin-right-small\" href=\"https://github.com/ressurectit/ressurectit.github.io\">\r\n            <span class=\"fab fa-github\"></span>\r\n        </a>\r\n    </div>\r\n</div>\r\n\r\n<div class=\"container main relative\">\r\n    <progress-indicator></progress-indicator>\r\n    <internal-server-error></internal-server-error>\r\n    <global-notifications></global-notifications>\r\n\r\n    <div class=\"content relative\" [@routeAnimations]=\"routeComponentState\">\r\n        <div class=\"main-content\">\r\n            <router-outlet #outlet=\"outlet\"></router-outlet>\r\n        </div>\r\n    </div>\r\n    <console *ngIf=\"consoleVisible\" @consoleAnimation></console>\r\n</div>\r\n\r\n<div class=\"start-indicator\" *ngIf=\"!initialized\" @loaderAnimation>\r\n    <div class=\"start-title\">ressurect it</div>\r\n    <div class=\"spinner\"></div>\r\n</div>","import {Component, OnDestroy, AfterViewInit, ViewChild, ChangeDetectionStrategy, Inject, ChangeDetectorRef} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {RouterOutlet, Router} from '@angular/router';\nimport {LOGGER, Logger} from '@anglr/common';\nimport {TitledDialogService} from '@anglr/common/material';\nimport {getCurrentUrlPrefix} from '@anglr/md-help/web';\nimport {nameof} from '@jscrpt/common';\nimport {TranslateService} from '@ngx-translate/core';\nimport {Subscription} from 'rxjs';\n\nimport {config, SettingsDebug, SettingsGeneral} from '../config';\nimport {loaderTrigger, routeAnimationTrigger} from './app.component.animations';\nimport {SettingsService} from '../services/settings';\nimport {UserSettingsComponent} from '../modules';\n\n/**\n * Application entry component\n */\n@Component(\n{\n    selector: 'app',\n    templateUrl: 'app.component.html',\n    styleUrls: ['app.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    animations: [routeAnimationTrigger, loaderTrigger]\n})\nexport class AppComponent implements AfterViewInit, OnDestroy\n{\n    //######################### private fields #########################\n\n    /**\n     * Subscription for router outlet activation changes\n     */\n    private _routerOutletActivatedSubscription: Subscription;\n\n    /**\n     * Subscription for changes of general settings\n     */\n    private _settingsChangeSubscription: Subscription;\n\n    /**\n     * Subscription for changes of debugging settings\n     */\n    private _settingsDebuggingChangeSubscription: Subscription;\n\n    /**\n     * Currently active theme\n     */\n    private _theme: string;\n\n    //######################### public properties - template bindings #########################\n\n    /**\n     * Indication whether is console visible\n     */\n    public consoleVisible: boolean = false;\n\n    /**\n     * Name of state for routed component animation\n     */\n    public routeComponentState: string = 'none';\n\n    /**\n     * Indication whether is application initialized\n     */\n    public initialized: boolean = false;\n\n    //######################### public properties - children #########################\n\n    /**\n     * Router outlet that is used for loading routed components\n     */\n    @ViewChild('outlet', {static: false})\n    public routerOutlet: RouterOutlet;\n\n    //######################### constructor #########################\n    constructor(translate: TranslateService,\n                router: Router,\n                settings: SettingsService,\n                @Inject(DOCUMENT) document: HTMLDocument,\n                @Inject(LOGGER) logger: Logger,\n                private _changeDetector: ChangeDetectorRef,\n                private _dialog: TitledDialogService)\n    {\n        logger.verbose('Application is starting, main component constructed.');\n\n        document.body.classList.add('app-page', settings.settings.theme);\n        this._theme = settings.settings.theme;        document.body.classList.add('app-page', config.general.theme);\n\n        this._settingsChangeSubscription = settings.settingsChange\n            .subscribe(itm => \n            {\n                if(itm == nameof<SettingsGeneral>('theme'))\n                {\n                    document.body.classList.remove(this._theme);\n                    this._theme = settings.settings.theme;\n                    document.body.classList.add(this._theme);\n                }\n\n                if(itm == nameof<SettingsGeneral>('language'))\n                {\n                    translate.use(settings.settings.language);\n                    this._changeDetector.detectChanges();\n                }\n            });\n\n        this._settingsDebuggingChangeSubscription = settings.settingsDebuggingChange\n            .subscribe(itm => \n            {\n                if(itm == nameof<SettingsDebug>('consoleEnabled'))\n                {\n                    this._toggleConsoleHotkey();\n                }\n            });\n\n        translate.setDefaultLang('en');\n        translate.use(config.general.language);\n\n        //handle route to html5 routing\n        if(document.location.pathname != router.url)\n        {\n            router.navigateByUrl(router.parseUrl(document.location.href.replace(getCurrentUrlPrefix(document), '')));\n        }\n\n        if(settings.settingsDebugging?.consoleEnabled)\n        {\n            this._toggleConsoleHotkey();\n        }\n    }\n\n    //######################### public methods - implementation of AfterViewInit #########################\n\n    /**\n     * Called when view was initialized\n     */\n    public ngAfterViewInit(): void\n    {\n        this._routerOutletActivatedSubscription = this.routerOutlet.activateEvents.subscribe(() =>\n        {\n            this.routeComponentState = this.routerOutlet.activatedRouteData['animation'] || (<any>this.routerOutlet.activatedRoute.component).name;\n        });\n\n        this.initialized = true;\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this._routerOutletActivatedSubscription?.unsubscribe();\n        this._routerOutletActivatedSubscription = null;\n\n        this._routerOutletActivatedSubscription?.unsubscribe();\n        this._routerOutletActivatedSubscription = null;\n\n        this._settingsChangeSubscription?.unsubscribe();\n        this._settingsChangeSubscription = null;\n\n        this._settingsDebuggingChangeSubscription?.unsubscribe();\n        this._settingsDebuggingChangeSubscription = null;\n    }\n\n    //######################### public methods - template bindings #########################\n\n    /**\n     * Shows user settings\n     */\n    public showUserSettings(): void\n    {\n        this._dialog.open(UserSettingsComponent,\n        {\n            title: 'User Settings',\n            width: '35vw'\n        });\n    }\n\n    //######################### private methods #########################\n\n    /**\n     * Toggles hotkey for displaying console log\n     */\n    private _toggleConsoleHotkey()\n    {\n        // const oldHelpHotkey = this._appHotkeys.hotkeys.get('~');\n\n        // if(oldHelpHotkey)\n        // {\n        //     this._appHotkeys.hotkeys.remove(oldHelpHotkey);\n        // }\n        // else\n        // {\n        //     this._appHotkeys.hotkeys.add(new Hotkey('~', () =>\n        //     {\n        //         this.consoleVisible = !this.consoleVisible;\n        //         this._changeDetector.detectChanges();\n\n        //         return false;\n        //     }, null, 'Show console'));\n        // }\n    }\n}","import {Component, ChangeDetectionStrategy} from '@angular/core';\r\nimport {ComponentRoute} from '@anglr/common/router';\r\nimport {StatusCodeService} from '@anglr/common';\r\n\r\n/**\r\n * Page displayed when url was not found\r\n */\r\n@Component(\r\n{\r\n    selector: 'not-found-view',\r\n    templateUrl: 'notFound.component.html',\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\n@ComponentRoute({path: '**'})\r\nexport class NotFoundComponent\r\n{\r\n    //######################### constructor #########################\r\n    constructor(statusCodeService: StatusCodeService)\r\n    {\r\n        statusCodeService.setStatusCode(404);\r\n    }\r\n}","<h3 class=\"title top-border-round margin-none\">STRÁNKA NENÁJDENÁ</h3>\r\n\r\n<div class=\"light-block padding-top-small bottom-border-round full-height\">\r\n    <h2>\r\n        <span class=\"fa fa-file-o text-danger\"></span>\r\n        <span>Stránka nebola nájdená!</span>\r\n        <span class=\"fa fa-file-o text-danger\"></span>\r\n    </h2>\r\n</div>","import {Type} from '@angular/core';\nimport {ModuleRoutesOptions} from '@anglr/common/router';\n\nimport {NotFoundComponent} from '../pages/notFound/notFound.component';\nimport {DEFAULT_CONTENT} from '../misc/constants';\n\nexport const components: Type<any>[] =\n[\n    NotFoundComponent\n];\n\nexport const routesOptions: ModuleRoutesOptions =\n{\n    rootModule: true,\n    rootModuleConfig:\n    {\n        enableTracing: false,\n        useHash: true,\n        anchorScrolling: 'enabled',\n        scrollPositionRestoration: 'enabled',\n        onSameUrlNavigation: 'reload'\n    },\n    staticRoutesBefore:\n    [\n        {\n            path: '',\n            redirectTo: `content/${DEFAULT_CONTENT}`,\n            pathMatch: 'full'\n        },\n        {\n            path: 'content',\n            loadChildren: () => import('../pages/+content/content.module').then(({ContentModule}) => ContentModule)\n        },\n        {\n            path: 'restSamples',\n            loadChildren: () => import('../pages/+sampleRest/sampleRest.module').then(({SampleRestModule}) => SampleRestModule)\n        }\n    ]\n};","import {Injectable, Optional, Inject, Injector, Type} from '@angular/core';\nimport {Router} from '@angular/router';\nimport {Location} from '@angular/common';\nimport {HttpClient, HttpParams, HttpErrorResponse, HttpResponse} from '@angular/common/http';\nimport {HTTP_REQUEST_BASE_URL} from '@anglr/common';\nimport {RESTClient, GET, BaseUrl, DefaultHeaders, ResponseTransform, POST, FullHttpResponse, DisableInterceptor, REST_MIDDLEWARES_ORDER, REST_METHOD_MIDDLEWARES, RestMiddleware, Body} from '@anglr/rest';\nimport {AuthenticationServiceOptions, UserIdentity, AccessToken, AuthInterceptor, SuppressAuthInterceptor} from '@anglr/authentication';\nimport {ServiceUnavailableInterceptor, HttpGatewayTimeoutInterceptor, NoConnectionInterceptor} from '@anglr/error-handling';\nimport {isBlank} from '@jscrpt/common';\nimport {Observable, Observer, throwError} from 'rxjs';\nimport {catchError, map} from 'rxjs/operators';\n\nimport {config} from '../../../config';\nimport {UserInfo} from './account.interface';\nimport permissions from '../../../../config/permissions.json';\n\n/**\n * Service used to access user account information\n */\n@Injectable()\n@BaseUrl('content/')\n@DefaultHeaders(config.configuration.defaultApiHeaders)\nexport class AccountService extends RESTClient implements AuthenticationServiceOptions<any>\n{\n    //######################### private fields #########################\n\n    /**\n     * Computed permissions for roles\n     */\n    private _permissions: {[role: string]: string[]} = {};\n\n    //######################### constructor #########################\n    constructor(http: HttpClient,\n                injector: Injector,\n                private _location: Location,\n                @Optional() @Inject(HTTP_REQUEST_BASE_URL) baseUrl?: string,\n                @Inject(REST_MIDDLEWARES_ORDER) middlewaresOrder?: Type<RestMiddleware>[],\n                @Inject(REST_METHOD_MIDDLEWARES) methodMiddlewares?: Type<RestMiddleware>[])\n    {\n        super(http, baseUrl, injector, middlewaresOrder, methodMiddlewares);\n\n        this._computePermissionsForRoles();\n    }\n\n    //######################### public methods - implementation of AuthenticationServiceOptions #########################\n\n    /**\n     * Method logs user into system\n     * @param  {AccessToken} accessToken Access token used for authentication\n     * @returns Observable\n     */\n    public login(accessToken: AccessToken): Observable<any>\n    {\n        const body = new HttpParams()\n            .append('j_username', accessToken.userName)\n            .append('j_password', accessToken.password)\n            .append('remember-me', accessToken.rememberMe?.toString());\n\n        return this._login(body);\n    }\n\n    /**\n     * Gets indication whether current state of app is displaying login page\n     * @returns boolean\n     */\n    public isAuthPage(): boolean\n    {\n        return this._location.path().indexOf('/login') == 0;\n    }\n\n    /**\n     * Methods logs out user out of system\n     * @returns Observable\n     */\n    @POST('logout')\n    public logout(): Observable<any>\n    {\n        return null;\n    }\n\n    /**\n     * Gets information about user\n     * @returns Observable\n     */\n    @ResponseTransform()\n    @FullHttpResponse()\n    @DisableInterceptor(SuppressAuthInterceptor)\n    @DisableInterceptor(AuthInterceptor)\n    @DisableInterceptor(ServiceUnavailableInterceptor)\n    @DisableInterceptor(HttpGatewayTimeoutInterceptor)\n    @DisableInterceptor(NoConnectionInterceptor)\n    @GET('account.json')\n    public getUserIdentity(): Observable<UserIdentity<any>>\n    {\n        return null;\n    }\n\n    /**\n     * Redirects current page to authentication page\n     */\n    public showAuthPage(): Promise<boolean>\n    {\n        return this.injector.get(Router).navigate(['/login'], {queryParams: {returnUrl: this._location.path()}});\n    }\n\n    /**\n     * Redirects current page to access denied page\n     */\n    public showAccessDenied(): Promise<boolean>\n    {\n        return this.injector.get(Router).navigate(['/accessDenied']);\n    }\n\n    //######################### private methods #########################\n\n    /**\n     * Sends login data to server\n     */\n    @DisableInterceptor(SuppressAuthInterceptor)\n    @POST('authentication')\n    private _login(@Body _body: HttpParams): Observable<any>\n    {\n        return null;\n    }\n\n    /**\n     * Method transforms response of get method\n     * @param response Response to be transformed\n     * @returns Observable Transformed response\n     */\n    //@ts-ignore\n    private getUserIdentityResponseTransform(response: Observable<HttpResponse<any>>): Observable<any>\n    {\n        return response.pipe(catchError((error: HttpErrorResponse) =>\n        {\n            if(error.status == 401)\n            {\n                return new Observable((observer: Observer<any>) =>\n                {\n                    observer.next(\n                    {\n                        isAuthenticated: false,\n                        userName: '',\n                        permissions: [],\n                        firstName: '',\n                        surname: ''\n                    });\n                    \n                    observer.complete();\n                });\n            }\n\n            switch(error.status)\n            {\n                case 503:\n                {\n                    alert('Vzdialená služba je nedostupná. Skúste opätovne neskôr.');\n\n                    break;\n                }\n                case 504:\n                {\n                    alert('Vypršal čas na spracovanie požiadavky cez http proxy. Skúste opätovne neskôr.');\n\n                    break;\n                }\n                case 0:\n                {\n                    alert('Server je mimo prevádzky. Skúste opätovne neskôr.');\n\n                    break;\n                }\n            }\n\n            return throwError(error);\n        }),\n        map(data =>\n        {\n            if(data instanceof HttpResponse)\n            {\n                const body: UserInfo = data.body;\n                const privileges = this._roles2privileges(body.roles);\n\n                return {\n                    isAuthenticated: true,\n                    userName: body.login,\n                    firstName: '',\n                    surname: body.login,\n                    permissions: privileges.concat(['authenticated'])\n                };\n            }\n            else\n            {\n                return data;\n            }\n        }));\n    }\n\n    /**\n     * Gets array of permissions for provided roles\n     * @param roles Array of roles to be transformed to permissions\n     */\n    private _roles2privileges(roles: string[]): string[]\n    {\n        const perms: {[permission: string]: boolean} = {};\n\n        (roles ?? []).forEach(role => (this._permissions[role] ?? []).forEach(permission => perms[permission] = true));\n\n        return Object.keys(perms);\n    }\n\n    /**\n     * Computes permissions for roles\n     */\n    private _computePermissionsForRoles()\n    {\n        Object.keys(permissions).forEach(permission =>\n        {\n            const roles = permissions[permission];\n\n            if(Array.isArray(roles))\n            {\n                roles.forEach(role =>\n                {\n                    if(isBlank(this._permissions[role]))\n                    {\n                        this._permissions[role] = [];\n                    }\n\n                    this._permissions[role].push(permission);\n                });\n            }\n        });\n    }\n}","import {Injectable} from '@angular/core';\nimport {GlobalizationService as GlobalizationServiceInterface} from '@anglr/common';\n\nimport {Observable, empty} from 'rxjs';\n\n/**\n * Globalization service that is used for obtaining globalization language\n */\n@Injectable()\nexport class GlobalizationService extends GlobalizationServiceInterface\n{\n    /**\n     * Gets current name of locale, that is used within picker\n     */\n    public get locale(): string\n    {\n        return 'sk';\n    }\n    \n    /**\n     * Gets observable that emits data when locale changes and change should be applied to picker\n     */\n    public get localeChange(): Observable<void>\n    {\n        return empty();\n    }\n}","import {ValueProvider} from \"@angular/core\";\r\nimport {NO_DATA_RENDERER_OPTIONS, NoDataRendererOptions, GRID_INITIALIZER_OPTIONS, PAGING_OPTIONS, BasicPagingOptions, GridInitializerOptions} from \"@anglr/grid\";\r\n\r\n/**\r\n * Global configuration for Grid\r\n */\r\nexport const globalGridConfig =\r\n[\r\n    <ValueProvider>\r\n    {\r\n        provide: NO_DATA_RENDERER_OPTIONS,\r\n        useValue: <NoDataRendererOptions<any>>\r\n        {\r\n            texts:\r\n            {\r\n                noData: \"No data found !!!\",\r\n                loading: \"Data are currently loading!\",\r\n                notLoaded: \"Data are not loaded yet\"\r\n            }\r\n        }\r\n    },\r\n    <ValueProvider>\r\n    {\r\n        provide: GRID_INITIALIZER_OPTIONS,\r\n        //default value for each grid if not overwritten\r\n        useValue: <GridInitializerOptions>\r\n        {\r\n        }\r\n    },\r\n    <ValueProvider>\r\n    {\r\n        provide: PAGING_OPTIONS,\r\n        //default value for each grid if not overwritten\r\n        useValue: <BasicPagingOptions>\r\n        {\r\n            //available values for items per page buttons\r\n            itemsPerPageValues: [5, 15, 30],\r\n            //initial value of items per page, should be one of above\r\n            initialItemsPerPage: 15\r\n        }\r\n    }\r\n];","import {ValueProvider} from \"@angular/core\";\r\nimport {NORMAL_STATE_OPTIONS, NormalStateOptions} from \"@anglr/select\";\r\n\r\nimport {NOTHING_SELECTED} from \"../misc/constants\";\r\n\r\n/**\r\n * Global configuration for Select\r\n */\r\nexport const globalSelectConfig =\r\n[\r\n    <ValueProvider>\r\n    {\r\n        provide: NORMAL_STATE_OPTIONS,\r\n        useValue: <NormalStateOptions<any>>\r\n        {\r\n            texts:\r\n            {\r\n                nothingSelected: NOTHING_SELECTED\r\n            }\r\n        }\r\n    }\r\n];","import {Injectable} from '@angular/core';\nimport {RESTClient, BaseUrl, DefaultHeaders, POST, JsonContentType, Body, DisableInterceptor} from '@anglr/rest';\nimport {LoggerRestClient, RestLog} from '@anglr/common/structured-log';\nimport {HttpErrorInterceptor} from '@anglr/error-handling';\nimport {AuthInterceptor, SuppressAuthInterceptor} from '@anglr/authentication';\nimport {Observable} from 'rxjs';\n\nimport {config} from '../../../config';\n\n/**\n * Service used for logging logs on server\n */\n@Injectable()\n@BaseUrl(config.configuration.apiBaseUrl)\n@DefaultHeaders(config.configuration.defaultApiHeaders)\nexport class RestLoggerService extends RESTClient implements LoggerRestClient\n{\n    //######################### public methods - implementation of LoggerRestClient #########################\n\n    /**\n     * Logs message on server using REST\n     * @param logs - Array of logs to be logged\n     */\n    @JsonContentType()\n    @DisableInterceptor(HttpErrorInterceptor)\n    @DisableInterceptor(AuthInterceptor)\n    @DisableInterceptor(SuppressAuthInterceptor)\n    @POST('logger')\n    public log(@Body _logs: RestLog[]): Observable<void>\n    {\n        return null;\n    }\n}","import {FactoryProvider, ClassProvider, ValueProvider, APP_INITIALIZER} from '@angular/core';\nimport {AUTH_INTERCEPTOR_PROVIDER, AUTHENTICATION_SERVICE_OPTIONS, SUPPRESS_AUTH_INTERCEPTOR_PROVIDER, AuthenticationService} from '@anglr/authentication';\nimport {LocalPermanentStorageService} from '@anglr/common/store';\nimport {PROGRESS_INTERCEPTOR_PROVIDER, GlobalizationService, STRING_LOCALIZATION, PERMANENT_STORAGE, DebugDataEnabledService} from '@anglr/common';\nimport {NgxTranslateStringLocalizationService} from '@anglr/translate-extensions';\nimport {DATE_FNS_REST_DATE_API} from '@anglr/rest/date-fns';\nimport {HttpErrorInterceptorOptions, HTTP_ERROR_INTERCEPTOR_PROVIDER, HttpGatewayTimeoutInterceptorOptions, NoConnectionInterceptorOptions, HTTP_GATEWAY_TIMEOUT_INTERCEPTOR_PROVIDER, NO_CONNECTION_INTERCEPTOR_PROVIDER, SERVICE_UNAVAILABLE_INTERCEPTOR_PROVIDER, ERROR_WITH_URL_EXTENDER, ANGLR_EXCEPTION_HANDLER_PROVIDER} from '@anglr/error-handling';\nimport {DIALOG_INTERNAL_SERVER_ERROR_RENDERER_PROVIDER} from '@anglr/error-handling/material';\nimport {ConsoleSinkConfigService, LOGGER_REST_CLIENT, REST_SINK} from '@anglr/common/structured-log';\nimport {DATE_API} from '@anglr/datetime';\nimport {DateFnsDateApi, DateFnsLocale, DATEFNS_FORMAT_PROVIDER, DATE_FNS_LOCALE} from '@anglr/datetime/date-fns';\nimport {sk} from 'date-fns/locale';\nimport {LogEventLevel} from 'structured-log';\n\nimport {AccountService} from '../services/api/account/account.service';\nimport {GlobalizationService as GlobalizationServiceImpl} from '../services/globalization/globalization.service';\nimport {globalGridConfig} from './grid.global.conf';\nimport {globalSelectConfig} from './select.global.conf';\nimport {config} from '../config';\nimport {LocalSettingsStorage, SettingsService} from '../services/settings';\nimport {RestLoggerService} from '../services/api/restLogger';\nimport {SETTINGS_STORAGE} from '../misc/tokens';\n\n/**\n * Creates APP initialization factory, that first try to authorize user before doing anything else\n * @param authService Authentication service used for authentication of user\n */\nexport function appInitializerFactory(authService: AuthenticationService<any>): () => Promise<void>\n{\n    return async () =>\n    {\n        try\n        {\n            await authService\n                .getUserIdentity();\n        }\n        catch(e)\n        {\n            alert(`Authentication failed: ${e}`);\n\n            throw e;\n        }\n    };\n}\n\n/**\n * Factory for HttpErrorInterceptorOptions\n */\nexport function httpErrorInterceptorOptionsFactory(): HttpErrorInterceptorOptions\n{\n    return new HttpErrorInterceptorOptions(config.configuration.debug);\n}\n\n/**\n * Factory method for creating HttpGatewayTimeoutInterceptorOptions\n */\nexport function httpGatewayTimeoutInterceptorOptionsFactory(): HttpGatewayTimeoutInterceptorOptions\n{\n    return new HttpGatewayTimeoutInterceptorOptions('Server neodpovedal v stanovenom čase.');\n}\n\n/**\n * Factory method for creating NoConnectionInterceptorOptions\n */\nexport function noConnectionInterceptorOptionsFactory(): NoConnectionInterceptorOptions\n{\n    return new NoConnectionInterceptorOptions('Server je mimo prevádzky.');\n}\n\n/**\n * Array of providers that are used in app module\n */\nexport const providers =\n[\n    //######################### HTTP INTERCEPTORS #########################\n    HTTP_GATEWAY_TIMEOUT_INTERCEPTOR_PROVIDER,\n    SERVICE_UNAVAILABLE_INTERCEPTOR_PROVIDER,\n    HTTP_ERROR_INTERCEPTOR_PROVIDER,\n    NO_CONNECTION_INTERCEPTOR_PROVIDER,\n    SUPPRESS_AUTH_INTERCEPTOR_PROVIDER,\n    AUTH_INTERCEPTOR_PROVIDER,\n    PROGRESS_INTERCEPTOR_PROVIDER,\n\n    //######################### NO CONNECTION INTERCEPTOR OPTIONS #########################\n    <FactoryProvider>\n    {\n        useFactory: noConnectionInterceptorOptionsFactory,\n        provide: NoConnectionInterceptorOptions\n    },\n\n    //######################### HTTP GATEWAY TIMEOUT INTERCEPTOR OPTIONS #########################\n    <FactoryProvider>\n    {\n        useFactory: httpGatewayTimeoutInterceptorOptionsFactory,\n        provide: HttpGatewayTimeoutInterceptorOptions\n    },\n\n    //######################### GLOBALIZATION SERVICE #########################\n    <ClassProvider>\n    {\n        provide: GlobalizationService,\n        useClass: GlobalizationServiceImpl\n    },\n\n    //######################### AUTHENTICATION & AUTHORIZATION #########################\n    <ClassProvider>\n    {\n        provide: AUTHENTICATION_SERVICE_OPTIONS,\n        useClass: AccountService\n    },\n\n    //######################### ERROR HANDLING #########################\n    <FactoryProvider>\n    {\n        provide: HttpErrorInterceptorOptions,\n        useFactory: httpErrorInterceptorOptionsFactory\n    },\n    ERROR_WITH_URL_EXTENDER,\n    ANGLR_EXCEPTION_HANDLER_PROVIDER,\n    DIALOG_INTERNAL_SERVER_ERROR_RENDERER_PROVIDER,\n\n    //######################### APP INITIALIZER #########################\n    <FactoryProvider>\n    {\n        useFactory: appInitializerFactory,\n        provide: APP_INITIALIZER,\n        deps: [AuthenticationService],\n        multi: true\n    },\n\n    //######################### GRID GLOBAL OPTIONS #########################\n    ...globalGridConfig,\n    \n    //############################ SELECT GLOBAL OPTIONS ############################\n    ...globalSelectConfig,\n\n    //######################### STRING LOCALIZATION #########################\n    <ClassProvider>\n    {\n        provide: STRING_LOCALIZATION,\n        useClass: NgxTranslateStringLocalizationService\n    },\n\n    //######################### PERMANENT STORAGE #########################\n    <ClassProvider>\n    {\n        provide: PERMANENT_STORAGE,\n        useClass: LocalPermanentStorageService\n    },\n\n    //######################### LOGGER #########################\n    REST_SINK,\n    <FactoryProvider>\n    {\n        provide: ConsoleSinkConfigService,\n        useFactory: (settingsSvc: SettingsService) =>\n        {\n            return new ConsoleSinkConfigService(null, LogEventLevel[settingsSvc?.settingsLogging?.consoleLogLevel]);\n        },\n        deps: [SettingsService]\n    },\n    <ClassProvider>\n    {\n        provide: LOGGER_REST_CLIENT,\n        useClass: RestLoggerService\n    },\n    <ClassProvider>\n    {\n        provide: SETTINGS_STORAGE,\n        useClass: LocalSettingsStorage\n    },\n\n    //######################### REST #########################\n    DATE_FNS_REST_DATE_API,\n\n    //######################### DEBUG DATA #########################\n    <FactoryProvider>\n    {\n        provide: DebugDataEnabledService,\n        useFactory: (settingsSvc: SettingsService) =>\n        {\n            const debugDataEnabled = new DebugDataEnabledService();\n\n            debugDataEnabled.setEnabled(settingsSvc.settingsDebugging?.debugData);\n\n            return debugDataEnabled;\n        },\n        deps: [SettingsService]\n    },\n\n    //######################### DATE API #########################\n    <ClassProvider>\n    {\n        provide: DATE_API,\n        useClass: DateFnsDateApi\n    },\n    DATEFNS_FORMAT_PROVIDER,\n    <ValueProvider>\n    {\n        provide: DATE_FNS_LOCALE,\n        useValue: <DateFnsLocale>\n        {\n            locale: sk\n        }\n    }\n];\n","import {Injectable} from '@angular/core';\nimport {TranslateLoader} from '@ngx-translate/core';\nimport {Observable, Observer} from 'rxjs';\n\n/**\n * Service used as webpack translate loader\n */\n@Injectable()\nexport class WebpackTranslateLoaderService implements TranslateLoader\n{\n    //######################### public methods - implementation of TranslateLoader #########################\n\n    /**\n     * Gets translations for specified language\n     * @param lang Language which translations are required\n     */\n    public getTranslation(lang: string): Observable<any> \n    {\n        return Observable.create(async (observer: Observer<any>) =>\n        {\n            const result = await import(`../../../content/l10n/${lang}.json`);\n\n            observer.next(result.default);\n            observer.complete();\n        });\n    }\n}","/* eslint-disable ressurectit/imports-order */\nimport './dependencies';\nimport './dependencies.browser';\nimport 'zone.js/dist/zone';\nimport './hacks';\nimport {platformBrowser} from '@angular/platform-browser';\nimport {NgModuleRef, enableProdMode, StaticProvider, PlatformRef} from '@angular/core';\nimport {runWhenModuleStable} from '@anglr/common';\nimport {RestTransferStateService} from '@anglr/rest';\nimport {hmrAccept, hmrFinishedNotification} from '@anglr/common/hmr';\n\nimport {config} from './config';\nimport {BrowserAppModule} from './boot/browser-app.module';\n\nfunction start(providers: StaticProvider[])\n{\n    platform = platformBrowser(providers);\n\n    runWhenModuleStable(platform.bootstrapModule(BrowserAppModule), (moduleRef: NgModuleRef<any>) => \n    {\n        // moduleRef.injector.get(LoggerService).verbose('Angular finished bootstraping and is stable');\n        moduleRef.injector.get(RestTransferStateService)?.clearAndDeactivate();\n        jsDevMode && hmrFinishedNotification();\n    }, config.configuration.debug);\n}\n\nif(isProduction)\n{\n    enableProdMode();\n}\n\nif (jsDevMode && module['hot'])\n{\n    module['hot'].accept();\n}\n\njsDevMode && hmrAccept(() => platform);\n\nlet platform: PlatformRef;\n\nstart([]);\n","import {NgModule, ClassProvider} from '@angular/core';\nimport {BrowserModule} from '@angular/platform-browser';\nimport {HttpClientModule} from '@angular/common/http';\nimport {RouterModule} from '@angular/router';\nimport {ModuleRoutes} from '@anglr/common/router';\nimport {InternalServerErrorModule} from '@anglr/error-handling';\nimport {ProgressIndicatorModule} from '@anglr/common';\nimport {TitledDialogModule} from '@anglr/common/material';\nimport {NotificationsModule} from '@anglr/notifications';\nimport {ConsoleLogModule} from '@anglr/common/structured-log';\nimport {TranslateModule, TranslateLoader} from '@ngx-translate/core';\nimport {HotkeyModule} from 'angular2-hotkeys';\n\nimport {AppComponent} from './app.component';\nimport {components, routesOptions} from './app.component.routes';\nimport {APP_TRANSFER_ID} from '../misc/constants';\nimport {providers} from './app.config';\nimport {WebpackTranslateLoaderService} from '../services/webpackTranslateLoader';\nimport {FormsFeatureModule} from '../modules';\n\n/**\n * Main module shared for both server and browser side\n */\n@NgModule(\n{\n    imports:\n    [\n        BrowserModule.withServerTransition(\n        {\n            appId: APP_TRANSFER_ID\n        }),\n        HttpClientModule,\n        InternalServerErrorModule,\n        ProgressIndicatorModule,\n        NotificationsModule,\n        RouterModule,\n        HotkeyModule,\n        ConsoleLogModule.forRoot(),\n        TitledDialogModule,\n        FormsFeatureModule,\n        TranslateModule.forRoot(\n        {\n            loader: <ClassProvider>\n            {\n                provide: TranslateLoader, \n                useClass: WebpackTranslateLoaderService\n            }\n        })\n    ],\n    providers: providers,\n    declarations:\n    [\n        AppComponent,\n        ...components\n    ],\n    exports: [AppComponent]\n})\n@ModuleRoutes(components, routesOptions)\nexport class AppModule\n{\n}\n","import {NgModule, FactoryProvider} from '@angular/core';\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\nimport {BrowserTransferStateModule} from '@angular/platform-browser';\nimport {AnglrExceptionHandlerOptions} from '@anglr/error-handling';\n\nimport {config} from '../config';\nimport {AppComponent} from './app.component';\nimport {AppModule} from './app.module';\n\n/**\n * Factory for AnglrExceptionHandlerOptions\n */\nexport function anglrExceptionHandlerOptionsFactory()\n{\n    return new AnglrExceptionHandlerOptions(config.configuration.debug, false);\n}\n\n/**\n * Entry module for browser side\n */\n@NgModule(\n{\n    bootstrap: [AppComponent],\n    imports:\n    [\n        AppModule,\n        BrowserAnimationsModule,\n        BrowserTransferStateModule\n    ],\n    providers:\n    [\n        <FactoryProvider>\n        {\n            provide: AnglrExceptionHandlerOptions,\n            useFactory: anglrExceptionHandlerOptionsFactory\n        }\n    ]\n})\nexport class BrowserAppModule\n{\n}\n","export const APP_TRANSFER_ID = 'my-app-id';\r\nexport const NOTHING_SELECTED = \"Nothing selected !!!\";\r\nexport const DATE_FORMAT = \"YYYY-MM-DD\";\r\nexport const NAME_DATE_FORMAT = \"DD. MMMM YYYY (dddd)\"\r\nexport const DEFAULT_CONTENT = 'home';\r\nexport const DEBUG_INFO = 'debug-info';","import {InjectionToken} from '@angular/core';\n\nimport {SettingsStorage} from '../services/settings';\n\n/**\n * Token used for settings storage\n */\nexport const SETTINGS_STORAGE: InjectionToken<SettingsStorage> = new InjectionToken<SettingsStorage>('SETTINGS_STORAGE');","import {NgModule} from \"@angular/core\";\r\n\r\nimport {AsSourcePipe} from \"../pipes\";\r\n\r\n/**\r\n * Module for asSource pipe\r\n */\r\n@NgModule(\r\n{\r\n    declarations:\r\n    [\r\n        AsSourcePipe\r\n    ],\r\n    exports:\r\n    [\r\n        AsSourcePipe\r\n    ]\r\n})\r\nexport class AsSourceModule\r\n{\r\n}","import {NgModule} from '@angular/core';\nimport {ClipboardModule} from '@angular/cdk/clipboard';\nimport {DebugDataModule} from '@anglr/common';\n\n/**\n * Common module for allowing debugging features in code\n */\n@NgModule(\n{\n    exports:\n    [\n        ClipboardModule,\n        DebugDataModule\n    ]\n})\nexport class DebuggingFeatureModule\n{\n}","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {RouterModule} from '@angular/router';\nimport {CommonModule as NgCommonModule} from '@anglr/common';\nimport {NumeralModule} from '@anglr/common/numeral';\nimport {TooltipModule} from '@anglr/common/positions';\nimport {AuthorizationModule} from '@anglr/authentication';\nimport {DatePipesModule} from '@anglr/datetime';\nimport {TranslateModule} from '@ngx-translate/core';\n\n/**\n * Common module for displaying readonly data helpers\n */\n@NgModule(\n{\n    exports:\n    [\n        CommonModule,\n        RouterModule,\n        NgCommonModule,\n        NumeralModule,\n        TooltipModule,\n        TranslateModule,\n        DatePipesModule,\n        AuthorizationModule\n    ]\n})\nexport class DisplayingFeatureModule\n{\n}","import {NgModule} from '@angular/core';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {MatSlideToggleModule} from '@angular/material/slide-toggle';\nimport {NgSelectEditModule, NgSelectModule} from '@anglr/select';\nimport {NumberInputModule} from '@anglr/common/forms';\nimport {DateTimeSelectorModule} from '@anglr/datetime';\n\n/**\n * Common module for enabling forms features\n */\n@NgModule(\n{\n    exports:\n    [\n        ReactiveFormsModule,\n        MatSlideToggleModule,\n        NumberInputModule,\n        NgSelectModule,\n        NgSelectEditModule,\n        DateTimeSelectorModule\n    ]\n})\nexport class FormsFeatureModule\n{\n}","import {NgModule} from '@angular/core';\nimport {GridModule} from '@anglr/grid';\n\n/**\n * Common module for enabling usage of Grid\n */\n@NgModule(\n{\n    exports:\n    [\n        GridModule\n    ]\n})\nexport class GridFeatureModule\n{\n}","import {NgModule} from \"@angular/core\";\r\n\r\nimport {RenderMarkdownDirective} from \"../directives\";\r\n\r\n/**\r\n * Module containing custom render markdown directive\r\n */\r\n@NgModule(\r\n{\r\n    declarations:\r\n    [\r\n        RenderMarkdownDirective\r\n    ],\r\n    exports:\r\n    [\r\n        RenderMarkdownDirective\r\n    ]\r\n})\r\nexport class RenderMarkdownModule\r\n{\r\n}","import {NgModule} from '@angular/core';\nimport {MarkdownModule} from '@anglr/md-help/web';\n\nimport {RenderMarkdownModule} from './renderMarkdown';\n\n/**\n * Common module for enabling usage of Wiki features (markdown)\n */\n@NgModule(\n{\n    exports:\n    [\n        MarkdownModule,\n        RenderMarkdownModule\n    ]\n})\nexport class WikiFeatureModule\n{\n}","import {NgModule} from '@angular/core';\nimport {MatTabsModule} from '@angular/material/tabs';\n\nimport {WikiFeatureModule} from './wikiFeature.module';\nimport {SourceCodeModule} from './sourceCode';\nimport {AsSourceModule} from './asSource';\n\n/**\n * Common module for enabling usage of features used in all samples\n */\n@NgModule(\n{\n    exports:\n    [\n        WikiFeatureModule,\n        SourceCodeModule,\n        AsSourceModule,\n        MatTabsModule\n    ]\n})\nexport class SamplesFeatureModule\n{\n}","import {NgModule} from '@angular/core';\n\nimport {DisplayingFeatureModule} from '../../displayingFeature.module';\nimport {FormsFeatureModule} from '../../formsFeature.module';\nimport {UserSettingsComponent} from '../components';\n\n/**\n * Module used for definition of user settings component\n */\n@NgModule(\n{\n    imports:\n    [\n        DisplayingFeatureModule,\n        FormsFeatureModule\n    ],\n    declarations:\n    [\n        UserSettingsComponent\n    ],\n    exports:\n    [\n        UserSettingsComponent\n    ]\n})\nexport class UserSettingsModule\n{\n}","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {FormGroup, FormBuilder} from '@angular/forms';\nimport {DebugDataEnabledService} from '@anglr/common';\nimport {ConsoleSinkConfigService} from '@anglr/common/structured-log';\nimport {ValueNamePair} from '@jscrpt/common';\nimport {LogEventLevel} from 'structured-log';\n\nimport {config, SettingsGeneral, SettingsDebug, LanguageDef} from '../../../../config';\nimport {SettingsService} from '../../../../services/settings';\n\n/**\n * Available sections for user settings\n */\nenum UserSettingsSections\n{\n    /**\n     * General user settings\n     */\n    General,\n\n    /**\n     * Loggers settings\n     */\n    Logging,\n\n    /**\n     * Debugging settings\n     */\n    Debugging\n}\n\ninterface SettingsLoggingEnum\n{\n    /**\n     * Minimal log level for console sink\n     */\n    consoleLogLevel: LogEventLevel;\n\n    /**\n     * Minimal log level for file sink\n     */\n    fileLogLevel: LogEventLevel;\n}\n\n/**\n * User settings component\n */\n@Component(\n{\n    selector: 'user-settings',\n    templateUrl: 'userSettings.component.html',\n    styleUrls: ['userSettings.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class UserSettingsComponent\n{\n    //######################### public properties - template bindings #########################\n\n    /**\n     * Array of available themes\n     */\n    public themes: string[] = config.configuration.themes;\n\n    /**\n     * Array of language definitions\n     */\n    public languages: LanguageDef[] = config.configuration.languages;\n\n    /**\n     * Available log levels\n     */\n    public logLevels: ValueNamePair[] = [];\n\n    /**\n     * Form group for general settings\n     */\n    public generalSettingsForm: FormGroup;\n\n    /**\n     * Form group for debugging settings\n     */\n    public debuggingSettingsForm: FormGroup;\n\n    /**\n     * Form group for logging settings\n     */\n    public loggingSettingsForm: FormGroup;\n\n    /**\n     * Active section\n     */\n    public activeSection: UserSettingsSections = UserSettingsSections.General;\n\n    /**\n     * User settings section enum\n     */\n    public UserSettingsSections = UserSettingsSections;\n\n    //######################### constructors #########################\n    constructor(settingsSvc: SettingsService,\n                formBuilder: FormBuilder,\n                consoleConfig: ConsoleSinkConfigService,\n                debugDataEnabled: DebugDataEnabledService)\n    {\n        const settings = settingsSvc.settings;\n        const debuggingSettings = settingsSvc.settingsDebugging;\n        const loggingSettings = settingsSvc.settingsLogging;\n        \n        this._getLogLevels();\n\n        this.generalSettingsForm = formBuilder.group(\n        <SettingsGeneral>\n        {\n            language: settings.language,\n            theme: settings.theme\n        });\n\n        this.debuggingSettingsForm = formBuilder.group(\n        <SettingsDebug>\n        {\n            consoleEnabled: debuggingSettings.consoleEnabled,\n            debugData: debuggingSettings.debugData\n        });\n\n        this.loggingSettingsForm = formBuilder.group(\n        <SettingsLoggingEnum>\n        {\n            consoleLogLevel: LogEventLevel[loggingSettings.consoleLogLevel],\n            fileLogLevel: LogEventLevel[loggingSettings.fileLogLevel]\n        });\n\n        this.generalSettingsForm.valueChanges.subscribe((generalSettings: SettingsGeneral) =>\n        {\n            settingsSvc.setSettings(generalSettings);\n        });\n\n        this.debuggingSettingsForm.valueChanges.subscribe((debugSettings: SettingsDebug) =>\n        {\n            debugDataEnabled.setEnabled(debugSettings.debugData);\n\n            settingsSvc.setDebuggingSettings(debugSettings);\n        });\n        \n        this.loggingSettingsForm.valueChanges.subscribe((loggingSettings: SettingsLoggingEnum) =>\n        {\n            consoleConfig.restrictToLevel = +loggingSettings.consoleLogLevel;\n\n            settingsSvc.setLoggingSettings(\n            {\n                consoleLogLevel: LogEventLevel[+loggingSettings.consoleLogLevel],\n                fileLogLevel: LogEventLevel[+loggingSettings.fileLogLevel]\n            });\n        });\n    }\n\n    //######################### private methods #########################\n\n    /**\n     * Gets available log levels\n     */\n    private _getLogLevels(): void\n    {\n        Object.keys(LogEventLevel).forEach(val =>\n        {\n            if(!isNaN(+val))\n            {\n                this.logLevels.push(\n                {\n                    name: LogEventLevel[val],\n                    value: val\n                });\n            }\n        });\n    }\n}","<div class=\"flex-column settings-menu\">\r\n    <a class=\"btn-line\"\r\n       [class.active]=\"activeSection == UserSettingsSections.General\"\r\n       (click)=\"activeSection = UserSettingsSections.General\">\r\n        <span class=\"fas fa-cog\"></span>\r\n        <span>{{'general' | translate}}</span>\r\n    </a>\r\n\r\n    <a class=\"btn-line\"\r\n       [class.active]=\"activeSection == UserSettingsSections.Logging\"\r\n       (click)=\"activeSection = UserSettingsSections.Logging\"\r\n       *authorize=\"'logging-settings'\">\r\n        <span class=\"fas fa-pen\"></span>\r\n        <span>{{'logging' | translate}}</span>\r\n    </a>\r\n\r\n    <a class=\"btn-line\"\r\n       [class.active]=\"activeSection == UserSettingsSections.Debugging\"\r\n       (click)=\"activeSection = UserSettingsSections.Debugging\"\r\n       *authorize=\"'debug-settings'\">\r\n        <span class=\"fas fa-bug\"></span>\r\n        <span>{{'debug' | translate}}</span>\r\n    </a>\r\n</div>\r\n\r\n<div>\r\n    <!-- GENERAL SETTIGNS -->\r\n    <div class=\"settings-items\" [formGroup]=\"generalSettingsForm\" *ngIf=\"activeSection == UserSettingsSections.General\">\r\n        <!-- THEME -->\r\n        <div class=\"text-capitalize\">{{'theme' | translate}}</div>\r\n\r\n        <div>\r\n            <ng-select formControlName=\"theme\">\r\n                <ng-option *ngFor=\"let theme of themes\" [text]=\"theme | translate\" [value]=\"theme\"></ng-option>\r\n            </ng-select>\r\n        </div>\r\n\r\n        <!-- LANGUAGE -->\r\n        <div class=\"text-capitalize\">{{'language' | translate}}</div>\r\n\r\n        <div>\r\n            <ng-select formControlName=\"language\">\r\n                <ng-option *ngFor=\"let lang of languages\" [text]=\"lang?.name\" [value]=\"lang?.lang\"></ng-option>\r\n            </ng-select>\r\n        </div>\r\n    </div>\r\n\r\n    <!-- LOGGING SETTIGNS -->\r\n    <div class=\"settings-items\" [formGroup]=\"loggingSettingsForm\" *ngIf=\"activeSection == UserSettingsSections.Logging\">\r\n        <!-- CONSOLE LOG LEVEL -->\r\n        <div class=\"text-capitalize\">{{'console log' | translate}}</div>\r\n\r\n        <div>\r\n            <ng-select formControlName=\"consoleLogLevel\">\r\n                <ng-option *ngFor=\"let level of logLevels\" [text]=\"level?.name\" [value]=\"level?.value\"></ng-option>\r\n            </ng-select>\r\n        </div>\r\n\r\n        <!-- FILE LOG LEVEL -->\r\n        <ng-template [authorize]=\"'authorized-electron'\">\r\n            <div class=\"text-capitalize\">{{'file log' | translate}}</div>\r\n\r\n            <div>\r\n                <ng-select formControlName=\"fileLogLevel\">\r\n                    <ng-option *ngFor=\"let level of logLevels\" [text]=\"level?.name\" [value]=\"level?.value\"></ng-option>\r\n                </ng-select>\r\n            </div>\r\n        </ng-template>\r\n    </div>\r\n\r\n    <!-- DEBUGGING SETTIGNS -->\r\n    <div class=\"settings-items\" [formGroup]=\"debuggingSettingsForm\" *ngIf=\"activeSection == UserSettingsSections.Debugging\">\r\n        <!-- CONSOLE -->\r\n        <div class=\"text-capitalize\">{{'console' | translate}}</div>\r\n\r\n        <div>\r\n            <mat-slide-toggle formControlName=\"consoleEnabled\"></mat-slide-toggle>\r\n        </div>\r\n\r\n        <!-- DEBUG DATA -->\r\n        <div class=\"text-capitalize\">{{'debug data' | translate}}</div>\r\n\r\n        <div>\r\n            <mat-slide-toggle formControlName=\"debugData\"></mat-slide-toggle>\r\n        </div>\r\n    </div>\r\n</div>","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\n\nimport {VyberStlpcovBtnComponent} from '../components';\n\n/**\n * Module that contains button that allows opening selection of columns for grid\n */\n@NgModule(\n{\n    imports:\n    [\n        CommonModule\n    ],\n    declarations:\n    [\n        VyberStlpcovBtnComponent\n    ],\n    exports:\n    [\n        VyberStlpcovBtnComponent        \n    ]\n})\nexport class VyberStlpcovBtnModule\n{\n}","import {NgModule} from \"@angular/core\";\r\nimport {CommonModule} from \"@angular/common\";\r\n\r\nimport {SourceCodeComponent} from \"../components\";\r\n\r\n/**\r\n * Module containing source code component\r\n */\r\n@NgModule(\r\n{\r\n    imports:\r\n    [\r\n        CommonModule\r\n    ],\r\n    declarations:\r\n    [\r\n        SourceCodeComponent\r\n    ],\r\n    exports:\r\n    [\r\n        SourceCodeComponent\r\n    ]\r\n})\r\nexport class SourceCodeModule\r\n{\r\n}","import {Injectable, KeyValueDiffers, Inject, KeyValueDiffer} from '@angular/core';\nimport {extend} from '@jscrpt/common';\nimport {Subject, Observable} from 'rxjs';\n\nimport {SettingsStorage} from './settings.interface';\nimport {SETTINGS_STORAGE} from '../../misc/tokens';\nimport {SettingsGeneral, SettingsDebug, SettingsLogging} from '../../config';\n\n/**\n * Class used as settings service\n */\n@Injectable({providedIn: 'root'})\nexport class SettingsService\n{\n    //######################### private methods #########################\n\n    /**\n     * Current general settings value\n     */\n    private _settings: SettingsGeneral = this._storage.get();\n\n    /**\n     * Current debugging settings value\n     */\n    private _settingsDebugging: SettingsDebug = this._storage.getDebugging();\n\n    /**\n     * Current logging settings value\n     */\n    private _settingsLogging: SettingsLogging = this._storage.getLogging();\n\n    /**\n     * General settings value differ\n     */\n    private _settingsValueDiff: KeyValueDiffer<any, any>;\n\n    /**\n     * Debugging settings value differ\n     */\n    private _settingsDebuggingValueDiff: KeyValueDiffer<any, any>;\n\n    /**\n     * Occurs when any of general settings properties change\n     */\n    private _settingsChangeSubject: Subject<keyof SettingsGeneral> = new Subject<keyof SettingsGeneral>();\n\n    /**\n     * Occurs when any of debugging settings properties change\n     */\n    private _settingsDebuggingChangeSubject: Subject<keyof SettingsDebug> = new Subject<keyof SettingsDebug>();\n\n    //######################### public properties #########################\n\n    /**\n     * Gets general settings object value\n     */\n    public get settings(): SettingsGeneral\n    {\n        return this._settings;\n    }\n\n    /**\n     * Gets debugging settings object value\n     */\n    public get settingsDebugging(): SettingsDebug\n    {\n        return this._settingsDebugging;\n    }\n\n    /**\n     * Gets logging settings object value\n     */\n    public get settingsLogging(): SettingsLogging\n    {\n        return this._settingsLogging;\n    }\n\n    /**\n     * Occurs when any of general settings properties change\n     */\n    public get settingsChange(): Observable<keyof SettingsGeneral>\n    {\n        return this._settingsChangeSubject.asObservable();\n    }\n\n    /**\n     * Occurs when any of debugging settings properties change\n     */\n    public get settingsDebuggingChange(): Observable<keyof SettingsDebug>\n    {\n        return this._settingsDebuggingChangeSubject.asObservable();\n    }\n\n    //######################### constructor #########################\n    constructor(keyValueDiffers: KeyValueDiffers,\n                @Inject(SETTINGS_STORAGE) private _storage: SettingsStorage)\n    {\n        this._settingsValueDiff = keyValueDiffers.find(this._settings).create();\n        this._settingsValueDiff.diff(this._settings);\n\n        this._settingsDebuggingValueDiff = keyValueDiffers.find(this._settingsDebugging).create();\n        this._settingsDebuggingValueDiff.diff(this._settingsDebugging);\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Sets new general settings\n     * @param settings Instance of general settings object\n     */\n    public setSettings(settings: SettingsGeneral): void\n    {\n        this._settings = extend(true, {}, this._settings, settings);\n        this._storage.set(settings);\n\n        const diff = this._settingsValueDiff.diff(settings);\n        \n        if(diff)\n        {\n            diff.forEachChangedItem(itm =>\n            {\n                this._settingsChangeSubject.next(itm.key as any);\n            });\n        }\n    }\n\n    /**\n     * Sets new debugging settings\n     * @param settings Instance of debugging settings object\n     */\n    public setDebuggingSettings(settings: SettingsDebug): void\n    {\n        this._settingsDebugging = extend(true, {}, this._settingsDebugging, settings);\n        this._storage.setDebugging(settings);\n\n        const diff = this._settingsDebuggingValueDiff.diff(settings);\n        \n        if(diff)\n        {\n            diff.forEachChangedItem(itm =>\n            {\n                this._settingsDebuggingChangeSubject.next(itm.key as any);\n            });\n        }\n    }\n\n    /**\n     * Sets new logging settings\n     * @param settings Instance of logging settings object\n     */\n    public setLoggingSettings(settings: SettingsLogging): void\n    {\n        this._settingsLogging = extend(true, {}, this._settingsLogging, settings);\n        this._storage.setLogging(settings);\n    }\n}","import {Injectable} from '@angular/core';\nimport {extend} from '@jscrpt/common';\nimport store from 'store';\n\nimport {config, SettingsGeneral, SettingsDebug, SettingsLogging} from '../../config';\nimport {SettingsStorage} from './settings.interface';\n\nconst GENERAL_SETTINGS_STORAGE = 'general-settings';\nconst DEBUGGING_SETTINGS_STORAGE = 'debugging-settings';\nconst LOGGING_SETTINGS_STORAGE = 'logging-settings';\n\n/**\n * Settings storage using local storage\n */\n@Injectable()\nexport class LocalSettingsStorage implements SettingsStorage\n{\n    //######################### public methods - implementation of SettingsStorage #########################\n\n    /**\n     * Gets general settings object from storage\n     */\n    public get(): SettingsGeneral\n    {\n        let settings = store.get(GENERAL_SETTINGS_STORAGE);\n\n        settings = extend(true,\n                          {},\n                          <SettingsGeneral>\n                          {\n                              theme: config.general.theme,\n                              language: config.general.language\n                          },\n                          settings);\n\n        return settings;\n    }\n\n    /**\n     * Sets general settings object to storage\n     * @param config General settings object to be stored\n     */\n    public set(config: SettingsGeneral): void\n    {\n        store.set(GENERAL_SETTINGS_STORAGE, config);\n    }\n\n    /**\n     * Gets debugging settings object from storage\n     */\n    public getDebugging(): SettingsDebug\n    {\n        let settings = store.get(DEBUGGING_SETTINGS_STORAGE);\n\n        settings = extend(true,\n                          {},\n                          <SettingsDebug>\n                          {\n                              consoleEnabled: config.debug.consoleEnabled,\n                              debugData: config.debug.debugData\n                          },\n                          settings);\n\n        return settings;\n    }\n\n    /**\n     * Sets debugging settings object to storage\n     * @param config Debugging settings object to be stored\n     */\n    public setDebugging(config: SettingsDebug): void\n    {\n        store.set(DEBUGGING_SETTINGS_STORAGE, config);\n    }\n\n    /**\n     * Gets logging settings object from storage\n     */\n    public getLogging(): SettingsLogging\n    {\n        let settings = store.get(LOGGING_SETTINGS_STORAGE);\n\n        settings = extend(true,\n                          {},\n                          <SettingsLogging>\n                          {\n                              consoleLogLevel: config.logging.consoleLogLevel,\n                              fileLogLevel: config.logging.fileLogLevel\n                          },\n                          settings);\n\n        return settings;\n    }\n\n    /**\n     * Sets logging settings object to storage\n     * @param config Logging settings object to be stored\n     */\n    public setLogging(config: SettingsLogging): void\n    {\n        store.set(LOGGING_SETTINGS_STORAGE, config);\n    }\n}"],"sourceRoot":""}