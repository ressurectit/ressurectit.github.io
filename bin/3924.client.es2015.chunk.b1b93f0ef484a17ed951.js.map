{"version":3,"sources":["webpack://ressurectit.github.io/./app/samples/grid/customRenderer/galleryRenderer/galleryContentRenderer.component.html","webpack://ressurectit.github.io/./app/samples/grid/customRenderer/galleryRenderer/galleryContentRenderer.component.ts"],"names":["defaultOptions","cssClasses","GalleryContentRendererComponent","constructor","pluginElement","_changeDetector","gridPlugins","options","orderingChange","this","_options","extend","_dataLoader","result","data","ngOnDestroy","_dataChangedSubscription","unsubscribe","_metadataChangedSubscription","initialize","metadataSelector","_metadataSelector","metadataChange","subscribe","invalidateVisuals","dataLoader","resultChange","initOptions","detectChanges","opacity","transform"],"mappings":"2YACI,gBACI,gBACJ,Q,yBADS,8CCYb,MAAMA,EACN,CACIC,WACA,IA+BG,MAAMC,EAgETC,YAAmBC,EACGC,EACwCC,EACJC,GAHvC,KAAAH,gBACG,KAAAC,kBACwC,KAAAC,cAfvD,KAAAE,eAAqC,IAAI,IAkB5CC,KAAKC,UAAW,IAAAC,SAAO,EAAM,GAAIX,EAAgBO,GAnCrD,cAEI,OAAOE,KAAKC,SAEhB,YAAmBH,GAEfE,KAAKC,UAAW,IAAAC,SAAO,EAAMF,KAAKC,SAAUH,GAkBhD,W,QAEI,OAA+B,QAAxB,EAAgB,QAAhB,EAAAE,KAAKG,mBAAW,eAAEC,cAAM,eAAEC,KAiB9BC,c,QAE0B,QAA7B,EAAAN,KAAKO,gCAAwB,SAAEC,cAC/BR,KAAKO,yBAA2B,KAEC,QAAjC,EAAAP,KAAKS,oCAA4B,SAAED,cACnCR,KAAKS,6BAA+B,KAQjCC,aAEH,IAAIC,EAAmEX,KAAKH,YAAY,KAErFG,KAAKY,mBAAqBZ,KAAKY,mBAAqBD,IAEnDX,KAAKS,6BAA6BD,cAClCR,KAAKS,6BAA+B,KACpCT,KAAKY,kBAAoB,MAGzBZ,KAAKY,oBAELZ,KAAKY,kBAAoBD,EAEzBX,KAAKS,6BAA+BT,KAAKY,kBAAkBC,eAAeC,WAAU,IAAMd,KAAKe,uBAGnG,IAAIC,EAAwDhB,KAAKH,YAAY,MAE1EG,KAAKG,aAAeH,KAAKG,aAAea,IAEvChB,KAAKO,yBAAyBC,cAC9BR,KAAKO,yBAA2B,KAChCP,KAAKG,YAAc,MAGnBH,KAAKG,cAELH,KAAKG,YAAca,EAEnBhB,KAAKO,yBAA2BP,KAAKG,YAAYc,aAAaH,WAAU,IAAMd,KAAKe,uBAGvFf,KAAKe,oBAMFG,eAOAH,oBAEHf,KAAKJ,gBAAgBuB,iB,iCA5IhB1B,GAA+B,wBAkEpB,IAAqB,OACrB,KAAwB,K,kBAnEnCA,EAA+B,+C,6BAAA,qJDhD5C,gBACI,qBAGJ,Q,MAH0B,+B,kRC6BtB,EACI,QAAQ,cACR,EACI,QAAW,SACX,EACI,QAAM,gBACN,EACI,QAAM,CAAC2B,QAAS,EAAGC,UAAW,wBAC9B,SAAS,GACT,EACI,QAAQ,wCAAwC,QAAM,CAAED,QAAS,EAAGC,UAAW,oBAKlG","file":"3924.client.es2015.chunk.b1b93f0ef484a17ed951.js","sourcesContent":["<div class=\"gallery-content\">\r\n    <div *ngFor=\"let item of data\" class=\"gallery-item\">\r\n        <img [src]=\"item?.source\">\r\n    </div>\r\n</div>","import {Component, ElementRef, Inject, Optional, EventEmitter, ChangeDetectionStrategy, ChangeDetectorRef, OnDestroy} from \"@angular/core\";\r\nimport {trigger, transition, query, style, stagger, animate} from \"@angular/animations\";\r\nimport {GridPluginGeneric, GRID_PLUGIN_INSTANCES, GridPluginInstances, CONTENT_RENDERER_OPTIONS, MetadataSelector, DataLoader, DataResponse, METADATA_SELECTOR, DATA_LOADER} from \"@anglr/grid\";\r\nimport {extend} from \"@jscrpt/common\";\r\nimport {Subscription} from \"rxjs\";\r\n\r\nimport {GalleryContentRenderer, GalleryContentRendererOptions, CssClassesGalleryContentRenderer} from \"./galleryContentRenderer.interface\";\r\nimport {GalleryItem as GalleryItemData} from \"../../../../services/api/gallery\";\r\nimport {GalleryMetadata, GalleryItem} from \"../gallery/gallery.interface\";\r\n\r\n/**\r\n * Default options for 'GalleryContentRendererComponent'\r\n * @internal\r\n */\r\nconst defaultOptions: GalleryContentRendererOptions<CssClassesGalleryContentRenderer> =\r\n{\r\n    cssClasses:\r\n    {\r\n    }\r\n};\r\n\r\n/**\r\n * Component used for rendering gallery content renderer\r\n */\r\n@Component(\r\n{\r\n    selector: 'div.gallery-renderer',\r\n    templateUrl: 'galleryContentRenderer.component.html',\r\n    styleUrls: ['galleryContentRenderer.component.scss'],\r\n    animations:\r\n    [\r\n        trigger('showGallery',\r\n        [\r\n            transition(\":enter\",\r\n            [\r\n                query('.gallery-item',\r\n                [\r\n                    style({opacity: 0, transform: 'translateY(-100px)'}),\r\n                    stagger(-30, \r\n                    [\r\n                        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)', style({ opacity: 1, transform: 'none' }))\r\n                    ])\r\n                ])\r\n            ])\r\n        ])\r\n    ],\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class GalleryContentRendererComponent<TOrdering, TOptions extends GalleryContentRendererOptions<CssClassesGalleryContentRenderer>> implements GalleryContentRenderer<TOrdering>, GridPluginGeneric<TOptions>, OnDestroy\r\n{\r\n    //######################### protected fields #########################\r\n\r\n    /**\r\n     * Options for content renderer\r\n     */\r\n    protected _options: TOptions;\r\n\r\n    /**\r\n     * Metadata selector currently used\r\n     */\r\n    protected _metadataSelector: MetadataSelector<GalleryMetadata<GalleryItem>>;\r\n\r\n    /**\r\n     * Data loader currently used\r\n     */\r\n    protected _dataLoader: DataLoader<DataResponse<GalleryItemData>>;\r\n\r\n    /**\r\n     * Subscription listening for metadata changes\r\n     */\r\n    protected _metadataChangedSubscription: Subscription;\r\n\r\n    /**\r\n     * Subscription listening for data changes\r\n     */\r\n    protected _dataChangedSubscription: Subscription;\r\n\r\n    //######################### public properties - implementation of GalleryContentRenderer #########################\r\n\r\n    /**\r\n     * Options for content renderer\r\n     */\r\n    public get options(): TOptions\r\n    {\r\n        return this._options;\r\n    }\r\n    public set options(options: TOptions)\r\n    {\r\n        this._options = extend(true, this._options, options) as TOptions;\r\n    }\r\n\r\n    /**\r\n     * Information about current ordering state\r\n     */\r\n    public ordering: TOrdering;\r\n\r\n    /**\r\n     * Indication that ordering has changed\r\n     */\r\n    public orderingChange: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n    //######################### public properties #########################\r\n\r\n    /**\r\n     * Gets data that are present for displaying\r\n     */\r\n    public get data(): GalleryItemData[]\r\n    {\r\n        return this._dataLoader?.result?.data;\r\n    }\r\n\r\n    //######################### constructor #########################\r\n    constructor(public pluginElement: ElementRef,\r\n                protected _changeDetector: ChangeDetectorRef,\r\n                @Inject(GRID_PLUGIN_INSTANCES) @Optional() public gridPlugins: GridPluginInstances,\r\n                @Inject(CONTENT_RENDERER_OPTIONS) @Optional() options?: GalleryContentRendererOptions<CssClassesGalleryContentRenderer>)\r\n    {\r\n        this._options = extend(true, {}, defaultOptions, options);\r\n    }\r\n\r\n    //######################### public methods - implementation of OnDestroy #########################\r\n    \r\n    /**\r\n     * Called when component is destroyed\r\n     */\r\n    public ngOnDestroy()\r\n    {\r\n        this._dataChangedSubscription?.unsubscribe();\r\n        this._dataChangedSubscription = null;\r\n        \r\n        this._metadataChangedSubscription?.unsubscribe();\r\n        this._metadataChangedSubscription = null;\r\n    }\r\n\r\n    //######################### public methods - implementation of GalleryContentRenderer #########################\r\n    \r\n    /**\r\n     * Initialize plugin, to be ready to use, initialize communication with other plugins\r\n     */\r\n    public initialize()\r\n    {\r\n        let metadataSelector: MetadataSelector<GalleryMetadata<GalleryItem>> = this.gridPlugins[METADATA_SELECTOR] as MetadataSelector<GalleryMetadata<GalleryItem>>;\r\n\r\n        if(this._metadataSelector && this._metadataSelector != metadataSelector)\r\n        {\r\n            this._metadataChangedSubscription.unsubscribe();\r\n            this._metadataChangedSubscription = null;\r\n            this._metadataSelector = null;\r\n        }\r\n\r\n        if(!this._metadataSelector)\r\n        {\r\n            this._metadataSelector = metadataSelector;\r\n\r\n            this._metadataChangedSubscription = this._metadataSelector.metadataChange.subscribe(() => this.invalidateVisuals());\r\n        }\r\n\r\n        let dataLoader: DataLoader<DataResponse<GalleryItemData>> = this.gridPlugins[DATA_LOADER] as DataLoader<DataResponse<GalleryItemData>>;\r\n\r\n        if(this._dataLoader && this._dataLoader != dataLoader)\r\n        {\r\n            this._dataChangedSubscription.unsubscribe();\r\n            this._dataChangedSubscription = null;\r\n            this._dataLoader = null;\r\n        }\r\n\r\n        if(!this._dataLoader)\r\n        {\r\n            this._dataLoader = dataLoader;\r\n\r\n            this._dataChangedSubscription = this._dataLoader.resultChange.subscribe(() => this.invalidateVisuals());\r\n        }\r\n\r\n        this.invalidateVisuals();\r\n    }\r\n    \r\n    /**\r\n     * Initialize plugin options, all operations required to be done with plugin options are handled here\r\n     */\r\n    public initOptions()\r\n    {\r\n    }\r\n    \r\n    /**\r\n     * Explicitly runs invalidation of content (change detection)\r\n     */\r\n    public invalidateVisuals(): void\r\n    {\r\n        this._changeDetector.detectChanges();\r\n    }\r\n}"],"sourceRoot":""}