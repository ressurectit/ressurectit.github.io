{"version":3,"sources":["webpack://ressurectit.github.io/./app/services/api/source/source.service.ts","webpack://ressurectit.github.io/./app/modules/asSource/pipes/asSource/asSource.pipe.ts","webpack://ressurectit.github.io/./app/misc/rxjsOperators/handle404.ts","webpack://ressurectit.github.io/./app/modules/sourceCode/components/sourceCode/sourceCode.component.html","webpack://ressurectit.github.io/./app/modules/sourceCode/components/sourceCode/sourceCode.component.ts","webpack://ressurectit.github.io/./app/samples/datetime/basic/basic.component.ts","webpack://ressurectit.github.io/./app/samples/datetime/basic/basic.component.html","webpack://ressurectit.github.io/./app/samples/datetime/basic/basicSample.component.ts","webpack://ressurectit.github.io/./app/samples/datetime/basic/basicSample.component.html","webpack://ressurectit.github.io/./app/samples/datetime/datetimeSamples.module.ts","webpack://ressurectit.github.io/./app/samples/datetime/minMaxStatic/minMaxStatic.component.ts","webpack://ressurectit.github.io/./app/samples/datetime/minMaxStatic/minMaxStatic.component.html","webpack://ressurectit.github.io/./app/samples/datetime/minMaxStatic/minMaxStaticSample.component.ts","webpack://ressurectit.github.io/./app/samples/datetime/minMaxStatic/minMaxStaticSample.component.html","webpack://ressurectit.github.io/./app/samples/datetime/simpleSelector/simpleSelector.component.ts","webpack://ressurectit.github.io/./app/samples/datetime/simpleSelector/simpleSelector.component.html","webpack://ressurectit.github.io/./app/samples/datetime/simpleSelector/simpleSelectorSample.component.ts","webpack://ressurectit.github.io/./app/samples/datetime/simpleSelector/simpleSelectorSample.component.html"],"names":["SourceService","getSource","_path","C","Observable","AsSourcePipe","constructor","_sourceSvc","transform","path","type","source","this","pipe","catchError","error","status","of","throwError","toPromise","SourceCodeComponent","showSources","BasicComponent","BasicSampleComponent","datetimeControl","DatetimeSamplesModule","MinMaxStaticComponent","MinMaxStaticSampleComponent","SimpleSelectorComponent","SimpleSelectorSampleComponent","dateTimeOptions","selectorComponent"],"mappings":"ktBASaA,EAAa,cAAS,KASxBC,UAAwBC,GAE3B,OAAO,O,qEAXFF,KAAa,GAAbA,I,uBAAAA,EAAa,QAAbA,EAAa,gBAFD,SAWrB,IAHC,IAAAG,MACA,OAAS,YACT,QAAI,W,EACa,E,GAAA,QAAK,Q,yGAAwBC,EAAA,I,8BATtCJ,EAAa,IADzB,OAAQ,wFACIA,G,2DCGN,MAAMK,EAGTC,YAAoBC,GAAA,KAAAA,aAWPC,UAAUC,EAAWC,EAAe,c,qCAE7C,IAAIC,QAAeC,KAAKL,WAAWN,UAAUQ,GACxCI,MCrBDF,GAEGA,EAAOE,MAAK,EAAAC,EAAA,IAAWC,GAEP,KAAhBA,EAAMC,QAEE,EAAAC,MAAG,OAGP,EAAAC,EAAA,GAAWH,QDajBI,YAEL,MAAgB,UAAGT,MACzBC,UAAU,aAAeF,a,iUArBdJ,GAAY,Y,mCAAZA,EAAY,W,qLEZzB,gBACI,QACJ,Q,KAFwC,0BCcjC,MAAMe,EARb,cAeW,KAAAC,aAAuB,G,iCAPrBD,I,kBAAAA,EAAmB,+C,MAAA,0K,ODdhC,qBAIA,cAAgF,+DAC5E,iBACJ,Q,MANM,0BAIe,wC,+MCOL,CAAC,MAAkB,qB,oNCA5B,MAAME,G,iCAAAA,I,kBAAAA,EAAc,mLCX3B,aAAI,wBAAc,OAElB,sBACI,wBACI,oBACI,gB,mCACJ,OAEA,oBACI,gB,qCACJ,OACJ,OACJ,OAEA,yB,MATiB,mGAIA,gH,oUCGV,MAAMC,EANb,cAaW,KAAAC,gBAA+B,IAAI,KAAY,O,iCAP7CD,I,kBAAAA,EAAoB,qHCZjC,cAAK,O,qBAA8C,OAEnD,gC,MAFK,yFAEoC,8C,0OCkClC,MAAME,G,iCAAAA,I,kBAAAA,I,sBAjBT,CACI,IACA,IACA,KACA,IACA,S,ufCbD,MAAMC,G,iCAAAA,I,kBAAAA,EAAqB,8LCXlC,aAAI,iCAAuB,OAE3B,sBACI,wBACI,oBACI,gB,mCACJ,OAEA,oBACI,gB,qCACJ,OACJ,OACJ,OAEA,kC,MATiB,iHAIA,8H,kVCGV,MAAMC,EANb,cAaW,KAAAH,gBAA+B,IAAI,KAAY,O,iCAP7CG,I,kBAAAA,EAA2B,uKCZxC,cAAK,O,qBAA8C,OAEnD,gC,MAFK,yFAGe,8C,4SCQb,MAAMC,G,iCAAAA,I,kBAAAA,EAAuB,mMCXpC,aAAI,kCAAwB,OAE5B,sBACI,wBACI,oBACI,gB,mCACJ,OAEA,oBACI,gB,qCACJ,OACJ,OACJ,OAEA,mC,MATiB,qHAIA,kI,gWCIV,MAAMC,EAeTvB,cARO,KAAAkB,gBAA+B,IAAI,KAAY,MAUlDZ,KAAKkB,gBACL,CACIC,kBAAmB,M,iCAnBlBF,I,kBAAAA,EAA6B,yICb1C,cAAK,O,qBAA8C,OAEnD,gC,MAFK,yFAGe,4CAA+B,+B","file":"7930.client.es2015.chunk.3a631e2ea3a69c9bba92.js","sourcesContent":["import {Injectable} from \"@angular/core\";\r\nimport {BaseUrl, Produces, ResponseType, GET, Path, Cache, RESTClient} from \"@anglr/rest\";\r\nimport {Observable} from \"rxjs\";\r\n\r\n/**\r\n * Service used to obtain source files\r\n */\r\n@Injectable({providedIn: 'root'})\r\n@BaseUrl('https://raw.githubusercontent.com/ressurectit/ressurectit.github.io.src/master/app/')\r\nexport class SourceService extends RESTClient\r\n{\r\n    /**\r\n     * Gets content file from path\r\n     * @param _path Path to content file\r\n     */\r\n    @Cache()\r\n    @Produces(ResponseType.Text)\r\n    @GET('{path}')\r\n    public getSource(@Path('path') _path: string): Observable<string>\r\n    {\r\n        return null;\r\n    }\r\n}","import {Pipe, PipeTransform} from \"@angular/core\";\r\n\r\nimport {SourceService} from \"../../../../services/api/source\";\r\nimport {handle404} from \"../../../../misc/rxjsOperators\";\r\n\r\n/**\r\n * Obtains source for provided string\r\n */\r\n@Pipe(\r\n{\r\n    name: \"asSource\"\r\n})\r\nexport class AsSourcePipe implements PipeTransform\r\n{\r\n    //######################### constructor #########################\r\n    constructor(private _sourceSvc: SourceService)\r\n    {\r\n    }\r\n\r\n    //######################### public methods #########################\r\n\r\n    /**\r\n     * Returns observable for obtaining source\r\n     * @param path Value to be used as source path\r\n     * @param type Type of source\r\n     */\r\n    public async transform(path: any, type: string = 'typescript'): Promise<string>\r\n    {\r\n        let source = await this._sourceSvc.getSource(path)\r\n            .pipe(handle404())\r\n            .toPromise();\r\n\r\n        return '``` ' + `${type}\r\n${source ?? 'not found ' + path}\r\n` + '```';\r\n    }\r\n}","import {Observable, MonoTypeOperatorFunction, of, throwError} from \"rxjs\";\r\nimport {catchError} from \"rxjs/operators\";\r\n\r\n/**\r\n * Handles 404 http code as response\r\n */\r\nexport function handle404<TResponse>(): MonoTypeOperatorFunction<TResponse|null>\r\n{\r\n    return (source: Observable<TResponse|null>) =>\r\n    {\r\n        return source.pipe(catchError(error =>\r\n        {\r\n            if(error.status == 404)\r\n            {\r\n                return of(null);\r\n            }\r\n\r\n            return throwError(error);\r\n        }));\r\n    };\r\n}","<div *ngIf=\"showSources\" class=\"flex-1\" @slideInOut>\r\n    <ng-content></ng-content>\r\n</div>\r\n\r\n<a class=\"show-icon\" [class.absolute]=\"showSources\" title=\"Show / hide sources\" (click)=\"showSources = !showSources\">\r\n    <span class=\"fas fa-code\"></span>\r\n</a>","import {Component, ChangeDetectionStrategy} from \"@angular/core\";\r\nimport {slideInOutTrigger} from '@anglr/animations';\r\n\r\n/**\r\n * Component that is used for displaying source codes\r\n */\r\n@Component(\r\n{\r\n    selector: 'source-code',\r\n    templateUrl: 'sourceCode.component.html',\r\n    styleUrls: ['sourceCode.component.scss'],\r\n    animations: [slideInOutTrigger],\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class SourceCodeComponent\r\n{\r\n    //######################### public properties - template bindings #########################\r\n\r\n    /**\r\n     * Indication whether show/hide sources\r\n     */\r\n    public showSources: boolean = false;\r\n}","import {Component, ChangeDetectionStrategy} from '@angular/core';\n\n/**\n * Basic sample for datetime component\n */\n@Component(\n{\n    selector: 'basic-view',\n    templateUrl: 'basic.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BasicComponent\n{\n}","<h3>Basic Datetime</h3>\r\n\r\n<source-code>\r\n    <mat-tab-group>\r\n        <mat-tab label=\"basicSample.component.ts\">\r\n            <div [renderMarkdown]=\"'samples/datetime/basic/basicSample.component.ts' | asSource | async\"></div>\r\n        </mat-tab>\r\n\r\n        <mat-tab label=\"basicSample.component.html\">\r\n            <div [renderMarkdown]=\"'samples/datetime/basic/basicSample.component.html' | asSource: 'html' | async\"></div>\r\n        </mat-tab>\r\n    </mat-tab-group>\r\n</source-code>\r\n\r\n<basic-sample></basic-sample>","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {FormControl} from '@angular/forms';\n\n/**\n * Basic sample for datetime component\n */\n@Component(\n{\n    selector: 'basic-sample',\n    templateUrl: 'basicSample.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BasicSampleComponent\n{\n    //######################### public properties - template bindings #########################\n\n    /**\n     * Control bound to datetime\n     */\n    public datetimeControl: FormControl = new FormControl(null);\n}","<div>Value: {{datetimeControl?.value | dateFormat}}</div>\r\n\r\n<date-time-selector class=\"form-control\" [formControl]=\"datetimeControl\"></date-time-selector>","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {DatePipesModule, DateTimeSelectorModule} from '@anglr/datetime';\n\nimport {SamplesFeatureModule} from '../../modules';\nimport {BasicComponent} from './basic/basic.component';\nimport {BasicSampleComponent} from './basic/basicSample.component';\nimport {SimpleSelectorSampleComponent} from './simpleSelector/simpleSelectorSample.component';\nimport {SimpleSelectorComponent} from './simpleSelector/simpleSelector.component';\nimport {MinMaxStaticSampleComponent} from './minMaxStatic/minMaxStaticSample.component';\nimport {MinMaxStaticComponent} from './minMaxStatic/minMaxStatic.component';\n\n/**\n * Module with datetime samples components\n */\n@NgModule(\n{\n    imports:\n    [\n        CommonModule,\n        ReactiveFormsModule,\n        SamplesFeatureModule,\n        DateTimeSelectorModule,\n        DatePipesModule\n    ],\n    declarations:\n    [\n        BasicSampleComponent,\n        BasicComponent,\n        SimpleSelectorSampleComponent,\n        SimpleSelectorComponent,\n        MinMaxStaticSampleComponent,\n        MinMaxStaticComponent\n    ]\n})\nexport class DatetimeSamplesModule\n{\n}","import {Component, ChangeDetectionStrategy} from '@angular/core';\n\n/**\n * Min max static datetime sample component\n */\n@Component(\n{\n    selector: 'min-max-static-view',\n    templateUrl: 'minMaxStatic.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MinMaxStaticComponent\n{\n}","<h3>Min Max Static Datetime</h3>\r\n\r\n<source-code>\r\n    <mat-tab-group>\r\n        <mat-tab label=\"minMaxStatic.component.ts\">\r\n            <div [renderMarkdown]=\"'samples/datetime/minMaxStatic/minMaxStaticSample.component.ts' | asSource | async\"></div>\r\n        </mat-tab>\r\n\r\n        <mat-tab label=\"minMaxStatic.component.html\">\r\n            <div [renderMarkdown]=\"'samples/datetime/minMaxStatic/minMaxStaticSample.component.html' | asSource: 'html' | async\"></div>\r\n        </mat-tab>\r\n    </mat-tab-group>\r\n</source-code>\r\n\r\n<min-max-static-sample></min-max-static-sample>","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {FormControl} from '@angular/forms';\n\n/**\n * Min max static datetime sample component\n */\n@Component(\n{\n    selector: 'min-max-static-sample',\n    templateUrl: 'minMaxStaticSample.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MinMaxStaticSampleComponent\n{\n    //######################### public properties - template bindings #########################\n\n    /**\n     * Control bound to datetime\n     */\n    public datetimeControl: FormControl = new FormControl(null);\n}","<div>Value: {{datetimeControl?.value | dateFormat}}</div>\r\n\r\n<date-time-selector class=\"form-control\"\r\n                    [formControl]=\"datetimeControl\"\r\n                    minValue=\"2020-06-10\"\r\n                    maxValue=\"+1m\"></date-time-selector>","import {Component, ChangeDetectionStrategy} from '@angular/core';\n\n/**\n * Simple datetime selector sample component\n */\n@Component(\n{\n    selector: 'simple-selector-view',\n    templateUrl: 'simpleSelector.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SimpleSelectorComponent\n{\n}","<h3>Simple Datetime Selector</h3>\r\n\r\n<source-code>\r\n    <mat-tab-group>\r\n        <mat-tab label=\"simpleSelector.component.ts\">\r\n            <div [renderMarkdown]=\"'samples/datetime/simpleSelector/simpleSelectorSample.component.ts' | asSource | async\"></div>\r\n        </mat-tab>\r\n\r\n        <mat-tab label=\"simpleSelector.component.html\">\r\n            <div [renderMarkdown]=\"'samples/datetime/simpleSelector/simpleSelectorSample.component.html' | asSource: 'html' | async\"></div>\r\n        </mat-tab>\r\n    </mat-tab-group>\r\n</source-code>\r\n\r\n<simple-selector-sample></simple-selector-sample>","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {DateTimeSelectorOptions, SimpleInputDateTimeSelectorComponent} from '@anglr/datetime';\n\n/**\n * Simple datetime selector sample component\n */\n@Component(\n{\n    selector: 'simple-selector-sample',\n    templateUrl: 'simpleSelectorSample.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SimpleSelectorSampleComponent\n{\n    //######################### public properties - template bindings #########################\n\n    /**\n     * Control bound to datetime\n     */\n    public datetimeControl: FormControl = new FormControl(null);\n\n    /**\n     * Options for datetime selector\n     */\n    public dateTimeOptions: DateTimeSelectorOptions;\n\n    //######################### constructor #########################\n    constructor()\n    {\n        this.dateTimeOptions =\n        {\n            selectorComponent: SimpleInputDateTimeSelectorComponent\n        };\n    }\n}","<div>Value: {{datetimeControl?.value | dateFormat}}</div>\r\n\r\n<date-time-selector class=\"form-control\"\r\n                    [formControl]=\"datetimeControl\"\r\n                    [options]=\"dateTimeOptions\"></date-time-selector>"],"sourceRoot":""}