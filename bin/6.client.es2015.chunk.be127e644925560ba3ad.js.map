{"version":3,"sources":["webpack:///./app/services/api/data/data.service.ts","webpack:///./app/pages/+sampleGrid/basic/basicSample.component.ts","webpack:///./app/pages/+sampleGrid/basic/basicSample.component.html","webpack:///./app/pages/+sampleGrid/basic/basic.component.ts","webpack:///./app/pages/+sampleGrid/basic/basic.component.html","webpack:///./app/misc/resolvers/data.resolver.ts","webpack:///./app/pages/+sampleGrid/basicSync/basicSyncSample.component.ts","webpack:///./app/pages/+sampleGrid/basicSync/basicSyncSample.component.html","webpack:///./app/pages/+sampleGrid/basicSync/basicSync.component.ts","webpack:///./app/pages/+sampleGrid/basicSync/basicSync.component.html","webpack:///./app/pages/+sampleGrid/basicMetadata/basicMetadataSample.component.html","webpack:///./app/pages/+sampleGrid/basicMetadata/basicMetadataSample.component.ts","webpack:///./app/pages/+sampleGrid/basicMetadata/basicMetadata.component.ts","webpack:///./app/pages/+sampleGrid/basicMetadata/basicMetadata.component.html","webpack:///./app/pages/+sampleGrid/groupedMetadata/groupedMetadataSample.component.html","webpack:///./app/pages/+sampleGrid/groupedMetadata/groupedMetadataSample.component.ts","webpack:///./app/pages/+sampleGrid/groupedMetadata/groupedMetadata.component.ts","webpack:///./app/pages/+sampleGrid/groupedMetadata/groupedMetadata.component.html","webpack:///./app/pages/+sampleGrid/configuration/configurationSample.component.ts","webpack:///./app/pages/+sampleGrid/configuration/configurationSample.component.html","webpack:///./app/pages/+sampleGrid/configuration/configuration.component.ts","webpack:///./app/pages/+sampleGrid/configuration/configuration.component.html","webpack:///./app/pages/+sampleGrid/sampleGrid.routes.ts","webpack:///./app/pages/+sampleGrid/sampleGrid.module.ts"],"names":["paging","ordering","this","getAllData","pipe","map","data","paginator","setPage","page","setItemsPerPage","size","setItemCount","length","sort","a","b","aValue","bValue","aValueNum","bValueNum","isNaN","direction","Ascendant","content","slice","getOffset","totalElements","Observable","BasicSampleComponent","_dataSvc","gridOptions","plugins","dataLoader","options","dataCallback","_getData","bind","itemsPerPageValues","initialItemsPerPage","itemsPerPage","reqOrdering","orderByDirection","orderBy","result","getData","toPromise","totalCount","selector","templateUrl","providers","changeDetection","OnPush","BasicComponent","path","DataResolver","_route","_state","snapshot","type","orderData","BasicSyncComponent","resolve","BasicMetadataSampleComponent","BasicMetadataComponent","contentRenderer","headerRenderer","GroupedMetadataComponent","ConfigurationSampleComponent","noDataRenderer","texts","noData","provide","useValue","ConfigurationComponent","components","SampleGridModule","declarations","imports"],"mappings":"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","file":"6.client.es2015.chunk.be127e644925560ba3ad.js","sourcesContent":["import {Injectable} from \"@angular/core\";\r\nimport {BaseUrl, GET, RESTClient} from \"@anglr/rest\";\r\nimport {Paginator, getValue, OrderByDirection} from \"@jscrpt/common\";\r\nimport {Observable} from \"rxjs\";\r\nimport {map} from \"rxjs/operators\";\r\n\r\nimport {PagedData, Pageable, Orderable} from \"../../../misc/types\";\r\nimport {Address} from \"./data.interface\";\r\n\r\n/**\r\n * Service used to obtain data for grid\r\n */\r\n@Injectable()\r\n@BaseUrl('content/')\r\nexport class DataService extends RESTClient\r\n{\r\n    /**\r\n     * Gets data \r\n     * @param paging Paging for obtaining specific page\r\n     * @param ordering Ordering for ordering\r\n     */\r\n    public getData(paging?: Pageable,\r\n                   ordering?: Orderable): Observable<PagedData<Address>>\r\n    {\r\n        return this.getAllData()\r\n            .pipe(map(data =>\r\n            {\r\n                let paginator = new Paginator();\r\n\r\n                paginator.setPage(paging.page)\r\n                    .setItemsPerPage(paging.size)\r\n                    .setItemCount(data.length);\r\n\r\n                if(ordering)\r\n                {\r\n                    data = data.sort((a, b) =>\r\n                    {\r\n                        let aValue = getValue(a, ordering.sort);\r\n                        let bValue = getValue(b, ordering.sort);\r\n                        let aValueNum = +aValue;\r\n                        let bValueNum = +bValue;\r\n\r\n                        if(!isNaN(aValueNum) && !isNaN(bValueNum))\r\n                        {\r\n                            aValue = aValueNum;\r\n                            bValue = bValueNum;\r\n                        }\r\n\r\n                        if(aValue < bValue)\r\n                        {\r\n                            return ordering.direction == OrderByDirection.Ascendant ? -1 : 1;\r\n                        }\r\n                        else if(aValue > bValue)\r\n                        {\r\n                            return ordering.direction == OrderByDirection.Ascendant ? 1 : -1;\r\n                        }\r\n            \r\n                        return 0;\r\n                    });\r\n                }\r\n\r\n                return <PagedData<Address>>{\r\n                    content: data.slice(paginator.getOffset(), paginator.getOffset() + paging.size),\r\n                    totalElements: data.length\r\n                };\r\n            }));\r\n    }\r\n\r\n    /**\r\n     * Gets data\r\n     */\r\n    @GET('data.json')\r\n    public getAllData(): Observable<Address[]>\r\n    {\r\n        return null;\r\n    }\r\n}","import {Component, ChangeDetectionStrategy} from \"@angular/core\";\r\nimport {GridOptions, SimpleOrdering, BasicPagingOptions, AsyncDataLoaderOptions, DataResponse} from \"@anglr/grid\";\r\n\r\nimport {Address, DataService} from \"../../../services/api/data\";\r\nimport {Orderable} from \"../../../misc/types\";\r\n\r\n/**\r\n * Basic sample for grid component\r\n */\r\n@Component(\r\n{\r\n    selector: 'basic-sample',\r\n    templateUrl: 'basicSample.component.html',\r\n    providers: [DataService],\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class BasicSampleComponent\r\n{\r\n    //######################### public properties - template bindings #########################\r\n\r\n    /**\r\n     * Grid options that are used for grid initialization\r\n     */\r\n    public gridOptions: GridOptions;\r\n\r\n    //######################### constructor #########################\r\n    constructor(private _dataSvc: DataService)\r\n    {\r\n        this.gridOptions =\r\n        {\r\n            plugins:\r\n            {\r\n                dataLoader:\r\n                {\r\n                    options: <AsyncDataLoaderOptions<Address, SimpleOrdering>>\r\n                    {\r\n                        //data callback used for getting data asynchronously\r\n                        dataCallback: this._getData.bind(this)\r\n                    }\r\n                },\r\n                paging:\r\n                {\r\n                    options: <BasicPagingOptions>\r\n                    {\r\n                        //available values for items per page buttons\r\n                        itemsPerPageValues: [5, 10, 20],\r\n                        //initial value of items per page, should be one of above\r\n                        initialItemsPerPage: 5\r\n                    }\r\n                }\r\n            }\r\n        };\r\n    }\r\n\r\n    //######################### private methods #########################\r\n\r\n    /**\r\n     * Callback used for obtaining data\r\n     * @param page Index of requested page\r\n     * @param itemsPerPage Number of items per page\r\n     * @param ordering Order by column name\r\n     */\r\n    private async _getData(page: number, itemsPerPage: number, ordering: SimpleOrdering): Promise<DataResponse<Address>>\r\n    {\r\n        let reqOrdering: Orderable = null;\r\n\r\n        if(ordering)\r\n        {\r\n            reqOrdering = \r\n            {\r\n                direction: ordering.orderByDirection,\r\n                sort: ordering.orderBy\r\n            };\r\n        }\r\n\r\n        let result = await this._dataSvc\r\n            .getData({\r\n                        page: page,\r\n                        size: itemsPerPage\r\n                    },\r\n                    reqOrdering)\r\n            .toPromise();\r\n\r\n        return {\r\n            data: result.content,\r\n            totalCount: result.totalElements\r\n        };\r\n    }\r\n}","<ng-grid [gridOptions]=\"gridOptions\">\r\n    <basic-table-metadata>\r\n        <basic-table-column id=\"country\" name=\"country\" title=\"Country\"></basic-table-column>\r\n        <basic-table-column id=\"city\" name=\"city\" title=\"City\"></basic-table-column>\r\n        <basic-table-column id=\"zip\" name=\"zip\" title=\"ZIP\"></basic-table-column>\r\n        <basic-table-column id=\"street\" name=\"street\" title=\"Street\"></basic-table-column>\r\n        <basic-table-column id=\"houseNumber\" name=\"houseNumber\" title=\"House Number\"></basic-table-column>\r\n    </basic-table-metadata>\r\n</ng-grid>","import {Component, ChangeDetectionStrategy} from \"@angular/core\";\r\nimport {ComponentRoute} from \"@anglr/common/router\";\r\n\r\n/**\r\n * Basic sample for grid component\r\n */\r\n@Component(\r\n{\r\n    selector: 'basic-view',\r\n    templateUrl: 'basic.component.html',\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\n@ComponentRoute({path: ''})\r\nexport class BasicComponent\r\n{\r\n}","<go-back></go-back>\r\n\r\n<h3>Basic Grid Sample</h3>\r\n\r\n<div class=\"bold spread-text\">IMPORT MODULE</div>\r\n<div renderMarkdown=\"`import {GridModule} from '@anglr/grid';`\"></div>\r\n\r\n<source-code>\r\n    <mat-tab-group>\r\n        <mat-tab label=\"basicSample.component.ts\">\r\n            <div [renderMarkdown]=\"'pages/+sampleGrid/basic/basicSample.component.ts' | asSource | async\"></div>\r\n        </mat-tab>\r\n\r\n        <mat-tab label=\"basicSample.component.html\">\r\n            <div [renderMarkdown]=\"'pages/+sampleGrid/basic/basicSample.component.html' | asSource: 'html' | async\"></div>\r\n        </mat-tab>\r\n\r\n        <mat-tab label=\"data.interface.ts\">\r\n            <div [renderMarkdown]=\"'services/api/data/data.interface.ts' | asSource | async\"></div>\r\n        </mat-tab>\r\n    </mat-tab-group>\r\n</source-code>\r\n\r\n<basic-sample></basic-sample>","import {Injectable} from \"@angular/core\";\r\nimport {Resolve, ActivatedRouteSnapshot, RouterStateSnapshot} from \"@angular/router\";\r\n\r\nimport {DataService, Address} from \"../../services/api/data\";\r\n\r\n/**\r\n * Resolver that resolves all data\r\n */\r\n@Injectable()\r\nexport class DataResolver implements Resolve<Address[]>\r\n{\r\n    //######################### constructor #########################\r\n    constructor(private _dataSvc: DataService)\r\n    {\r\n    }\r\n\r\n    //######################### implementation of Resolve<Address[]> #########################\r\n\r\n    /**\r\n     * Resolves all data\r\n     * @param {ActivatedRouteSnapshot} _route Next route that will be resolved\r\n     * @param {RouterStateSnapshot} _state Current state of router\r\n     */\r\n    public resolve(_route: ActivatedRouteSnapshot, _state: RouterStateSnapshot): Promise<Address[]> \r\n    {\r\n        return this._dataSvc.getAllData().toPromise();\r\n    }\r\n}","import {Component, ChangeDetectionStrategy} from \"@angular/core\";\r\nimport {ActivatedRoute} from \"@angular/router\";\r\nimport {GridOptions, SyncDataLoaderComponent, SyncDataLoaderOptions, SimpleOrdering, BasicPagingOptions} from \"@anglr/grid\";\r\nimport {getValue, OrderByDirection} from \"@jscrpt/common\";\r\n\r\nimport {Address} from \"../../../services/api/data\";\r\n\r\ninterface RouteData\r\n{\r\n    data: Address[];\r\n}\r\n\r\n/**\r\n * Basic synchronous sample for grid component\r\n */\r\n@Component(\r\n{\r\n    selector: 'basic-sync-sample',\r\n    templateUrl: 'basicSyncSample.component.html',\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class BasicSyncSampleComponent\r\n{\r\n    //######################### public properties - template bindings #########################\r\n\r\n    /**\r\n     * Grid options that are used for grid initialization\r\n     */\r\n    public gridOptions: GridOptions;\r\n\r\n    //######################### constructor #########################\r\n    constructor(private _route: ActivatedRoute)\r\n    {\r\n        let data = (this._route.snapshot.data as RouteData).data;\r\n\r\n        this.gridOptions =\r\n        {\r\n            plugins:\r\n            {\r\n                dataLoader:\r\n                {\r\n                    //use sync data loader as grid data loader plugin\r\n                    type: SyncDataLoaderComponent,\r\n                    options: <SyncDataLoaderOptions<Address, SimpleOrdering>>\r\n                    {\r\n                        //all data used in data loader\r\n                        data: data,\r\n                        //custom ordering, does not have to be specified, defaults to function that orders using string ordering\r\n                        orderData: (data: any[], ordering: SimpleOrdering) =>\r\n                        {\r\n                            if(!ordering)\r\n                            {\r\n                                return data;\r\n                            }\r\n\r\n                            return data.sort((a, b) =>\r\n                            {\r\n                                let aValue = getValue(a, ordering.orderBy);\r\n                                let bValue = getValue(b, ordering.orderBy);\r\n                                let aValueNum = +aValue;\r\n                                let bValueNum = +bValue;\r\n\r\n                                if(!isNaN(aValueNum) && !isNaN(bValueNum))\r\n                                {\r\n                                    aValue = aValueNum;\r\n                                    bValue = bValueNum;\r\n                                }\r\n\r\n                                if(aValue < bValue)\r\n                                {\r\n                                    return ordering.orderByDirection == OrderByDirection.Ascendant ? -1 : 1;\r\n                                }\r\n                                else if(aValue > bValue)\r\n                                {\r\n                                    return ordering.orderByDirection == OrderByDirection.Ascendant ? 1 : -1;\r\n                                }\r\n                    \r\n                                return 0;\r\n                            });\r\n                        }\r\n                    }\r\n                },\r\n                paging:\r\n                {\r\n                    options: <BasicPagingOptions>\r\n                    {\r\n                        //available values for items per page buttons\r\n                        itemsPerPageValues: [15, 30, 60],\r\n                        //initial value of items per page, should be one of above\r\n                        initialItemsPerPage: 15\r\n                    }\r\n                }\r\n            }\r\n        };\r\n    }\r\n}","<ng-grid [gridOptions]=\"gridOptions\">\r\n    <basic-table-metadata>\r\n        <basic-table-column id=\"country\" name=\"country\" title=\"Country\"></basic-table-column>\r\n        <basic-table-column id=\"city\" name=\"city\" title=\"City\"></basic-table-column>\r\n        <basic-table-column id=\"zip\" name=\"zip\" title=\"ZIP\"></basic-table-column>\r\n        <basic-table-column id=\"street\" name=\"street\" title=\"Street\"></basic-table-column>\r\n        <basic-table-column id=\"houseNumber\" name=\"houseNumber\" title=\"House Number\"></basic-table-column>\r\n    </basic-table-metadata>\r\n</ng-grid>","import {Component, ChangeDetectionStrategy} from \"@angular/core\";\r\nimport {ComponentRoute} from \"@anglr/common/router\";\r\n\r\nimport {DataResolver} from \"../../../misc/resolvers\";\r\n\r\n/**\r\n * Basic synchronous sample for grid component\r\n */\r\n@Component(\r\n{\r\n    selector: 'basicSync-view',\r\n    templateUrl: 'basicSync.component.html',\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\n@ComponentRoute({path: 'sync', resolve: {data: DataResolver}})\r\nexport class BasicSyncComponent\r\n{\r\n}","<go-back></go-back>\r\n\r\n<h3>Basic Synchronous Grid Sample</h3>\r\n\r\n<div class=\"bold spread-text\">IMPORT MODULE</div>\r\n<div renderMarkdown=\"`import {GridModule} from '@anglr/grid';`\"></div>\r\n\r\n<source-code>\r\n    <mat-tab-group>\r\n        <mat-tab label=\"basicSyncSample.component.ts\">\r\n            <div [renderMarkdown]=\"'pages/+sampleGrid/basicSync/basicSyncSample.component.ts' | asSource | async\"></div>\r\n        </mat-tab>\r\n\r\n        <mat-tab label=\"basicSyncSample.component.html\">\r\n            <div [renderMarkdown]=\"'pages/+sampleGrid/basicSync/basicSyncSample.component.html' | asSource: 'html' | async\"></div>\r\n        </mat-tab>\r\n\r\n        <mat-tab label=\"data.resolver.ts\">\r\n            <div [renderMarkdown]=\"'misc/resolvers/data.resolver.ts' | asSource | async\"></div>\r\n        </mat-tab>\r\n\r\n        <mat-tab label=\"data.interface.ts\">\r\n            <div [renderMarkdown]=\"'services/api/data/data.interface.ts' | asSource | async\"></div>\r\n        </mat-tab>\r\n    </mat-tab-group>\r\n</source-code>\r\n\r\n<basic-sync-sample></basic-sync-sample>","<ng-grid [gridOptions]=\"gridOptions\">\r\n    <basic-table-metadata>\r\n        <!-- Simple column definition -->\r\n        <basic-table-column id=\"country\" name=\"country\" title=\"Country\"></basic-table-column>\r\n        <!-- Simple column definition, with ordering enabled, specific width and title tooltip in header -->\r\n        <basic-table-column id=\"city\" name=\"city\" title=\"City\" [ordering]=\"true\" width=\"70px\" headerTooltip=\"City where citizen lives\"></basic-table-column>\r\n        <!-- Simple column definition, that is hidden as default, can be displayed using metadata selector -->\r\n        <basic-table-column id=\"zip\" name=\"zip\" title=\"ZIP\" [visible]=\"false\"></basic-table-column>\r\n        <!-- Simple column definition, with custom css classes for header and body cell -->\r\n        <basic-table-column id=\"street\" name=\"street\" title=\"Street\" headerClass=\"text-center\" cellClass=\"text-right\"></basic-table-column>\r\n        <!-- Simple column definition, without visible title -->\r\n        <basic-table-column id=\"houseNumber\" name=\"houseNumber\" title=\"House number\" [titleVisible]=\"false\"></basic-table-column>\r\n\r\n        <!-- Custom column definition, custom body template with all available context data -->\r\n        <basic-table-column id=\"citizenName\" title=\"Citizen name\">\r\n            <ng-template #bodyTemplate let-row let-column=\"column\" let-index=\"index\" let-rowIndex=\"rowIndex\">\r\n                <div>\r\n                    {{row?.citizen?.name}} | column title: {{column?.title}} | index of row on current page: {{index}} | index of row: {{rowIndex}}\r\n                </div>\r\n            </ng-template>\r\n        </basic-table-column>\r\n\r\n        <!-- Custom column definition, custom body and header template -->\r\n        <basic-table-column id=\"citizenSurname\" title=\"Citizen surname\">\r\n            <ng-template #bodyTemplate let-row>\r\n                <div>\r\n                    {{row?.citizen?.surname}}\r\n                </div>\r\n            </ng-template>\r\n\r\n            <ng-template #headerTemplate let-column=\"column\">\r\n                <div class=\"bold\">\r\n                    {{column?.title}}\r\n                </div>\r\n            </ng-template>\r\n        </basic-table-column>\r\n\r\n        <!-- Custom column definition, custom body template -->\r\n        <basic-table-column id=\"citizenBirthDate\" title=\"Citizen birth date\">\r\n            <ng-template #bodyTemplate let-row>{{row?.citizen?.birthDate | momentConvert}}</ng-template>\r\n        </basic-table-column>\r\n    </basic-table-metadata>\r\n</ng-grid>","import {Component, ChangeDetectionStrategy} from \"@angular/core\";\r\nimport {GridOptions, SimpleOrdering, BasicPagingOptions, AsyncDataLoaderOptions, DataResponse} from \"@anglr/grid\";\r\n\r\nimport {Address, DataService} from \"../../../services/api/data\";\r\nimport {Orderable} from \"../../../misc/types\";\r\n\r\n/**\r\n * Basic metadata sample for grid component\r\n */\r\n@Component(\r\n{\r\n    selector: 'basic-metadata-sample',\r\n    templateUrl: 'basicMetadataSample.component.html',\r\n    providers: [DataService],\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class BasicMetadataSampleComponent\r\n{\r\n    //######################### public properties - template bindings #########################\r\n\r\n    /**\r\n     * Grid options that are used for grid initialization\r\n     */\r\n    public gridOptions: GridOptions;\r\n\r\n    //######################### constructor #########################\r\n    constructor(private _dataSvc: DataService)\r\n    {\r\n        this.gridOptions =\r\n        {\r\n            plugins:\r\n            {\r\n                dataLoader:\r\n                {\r\n                    options: <AsyncDataLoaderOptions<Address, SimpleOrdering>>\r\n                    {\r\n                        //data callback used for getting data asynchronously\r\n                        dataCallback: this._getData.bind(this)\r\n                    }\r\n                },\r\n                paging:\r\n                {\r\n                    options: <BasicPagingOptions>\r\n                    {\r\n                        //available values for items per page buttons\r\n                        itemsPerPageValues: [10, 20, 40],\r\n                        //initial value of items per page, should be one of above\r\n                        initialItemsPerPage: 10\r\n                    }\r\n                }\r\n            }\r\n        };\r\n    }\r\n\r\n    //######################### private methods #########################\r\n\r\n    /**\r\n     * Callback used for obtaining data\r\n     * @param page Index of requested page\r\n     * @param itemsPerPage Number of items per page\r\n     * @param ordering Order by column name\r\n     */\r\n    private async _getData(page: number, itemsPerPage: number, ordering: SimpleOrdering): Promise<DataResponse<Address>>\r\n    {\r\n        let reqOrdering: Orderable = null;\r\n\r\n        if(ordering)\r\n        {\r\n            reqOrdering = \r\n            {\r\n                direction: ordering.orderByDirection,\r\n                sort: ordering.orderBy\r\n            };\r\n        }\r\n\r\n        let result = await this._dataSvc\r\n            .getData({\r\n                        page: page,\r\n                        size: itemsPerPage\r\n                    },\r\n                    reqOrdering)\r\n            .toPromise();\r\n\r\n        return {\r\n            data: result.content,\r\n            totalCount: result.totalElements\r\n        };\r\n    }\r\n}","import {Component, ChangeDetectionStrategy} from \"@angular/core\";\r\nimport {ComponentRoute} from \"@anglr/common/router\";\r\n\r\n/**\r\n * Basic metadata sample for grid component\r\n */\r\n@Component(\r\n{\r\n    selector: 'basicMetadata-view',\r\n    templateUrl: 'basicMetadata.component.html',\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\n@ComponentRoute({path: 'metadata'})\r\nexport class BasicMetadataComponent\r\n{\r\n}","<go-back></go-back>\r\n\r\n<h3>Basic Metadata Grid Sample</h3>\r\n\r\n<div class=\"bold spread-text\">IMPORT MODULE</div>\r\n<div renderMarkdown=\"`import {GridModule} from '@anglr/grid';`\"></div>\r\n\r\n<source-code>\r\n    <mat-tab-group>\r\n        <mat-tab label=\"basicMetadataSample.component.ts\">\r\n            <div [renderMarkdown]=\"'pages/+sampleGrid/basicMetadata/basicMetadataSample.component.ts' | asSource | async\"></div>\r\n        </mat-tab>\r\n\r\n        <mat-tab label=\"basicMetadataSample.component.html\">\r\n            <div [renderMarkdown]=\"'pages/+sampleGrid/basicMetadata/basicMetadataSample.component.html' | asSource: 'html' | async\"></div>\r\n        </mat-tab>\r\n\r\n        <mat-tab label=\"data.interface.ts\">\r\n            <div [renderMarkdown]=\"'services/api/data/data.interface.ts' | asSource | async\"></div>\r\n        </mat-tab>\r\n    </mat-tab-group>\r\n</source-code>\r\n\r\n<basic-metadata-sample></basic-metadata-sample>","<ng-grid [gridOptions]=\"gridOptions\">\r\n    <grouped-table-metadata>\r\n        <!-- group with custom template and 2 columns in it-->\r\n        <table-group title=\"Country and city\">\r\n            <ng-template let-group>\r\n                <div class=\"text-left\">{{group?.title}}</div>\r\n            </ng-template>\r\n\r\n            <table-group-column id=\"country\"></table-group-column>\r\n            <table-group-column id=\"city\"></table-group-column>\r\n        </table-group>\r\n\r\n        <!-- group with only one column and with title that is not visible -->\r\n        <table-group title=\"Zip code\" [titleVisible]=\"false\">\r\n            <table-group-column id=\"zip\"></table-group-column>\r\n        </table-group>\r\n\r\n        <!-- group with custom css class applied to group and 2 columns in it -->\r\n        <table-group title=\"Address street:\" cssClass=\"text-right\">\r\n            <table-group-column id=\"street\"></table-group-column>\r\n            <table-group-column id=\"houseNumber\"></table-group-column>\r\n        </table-group>\r\n\r\n        <!-- columns metadata definition as standard -->\r\n        <basic-table-column id=\"country\" name=\"country\" title=\"Country\"></basic-table-column>\r\n        <basic-table-column id=\"city\" name=\"city\" title=\"City\"></basic-table-column>\r\n        <basic-table-column id=\"zip\" name=\"zip\" title=\"ZIP\"></basic-table-column>\r\n        <basic-table-column id=\"street\" name=\"street\" title=\"Street\"></basic-table-column>\r\n        <basic-table-column id=\"houseNumber\" name=\"houseNumber\" title=\"House number\"></basic-table-column>\r\n    </grouped-table-metadata>\r\n</ng-grid>","import {Component, ChangeDetectionStrategy} from \"@angular/core\";\r\nimport {GridOptions, SimpleOrdering, BasicPagingOptions, AsyncDataLoaderOptions, DataResponse, TableContentRendererOptions, GroupedTableHeaderContentRendererComponent} from \"@anglr/grid\";\r\n\r\nimport {Address, DataService} from \"../../../services/api/data\";\r\nimport {Orderable} from \"../../../misc/types\";\r\n\r\n/**\r\n * Grouped metadata sample for grid component\r\n */\r\n@Component(\r\n{\r\n    selector: 'grouped-metadata-sample',\r\n    templateUrl: 'groupedMetadataSample.component.html',\r\n    providers: [DataService],\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class GroupedMetadataSampleComponent\r\n{\r\n    //######################### public properties - template bindings #########################\r\n\r\n    /**\r\n     * Grid options that are used for grid initialization\r\n     */\r\n    public gridOptions: GridOptions;\r\n\r\n    //######################### constructor #########################\r\n    constructor(private _dataSvc: DataService)\r\n    {\r\n        this.gridOptions =\r\n        {\r\n            plugins:\r\n            {\r\n                contentRenderer:\r\n                {\r\n                    options: <TableContentRendererOptions>\r\n                    {\r\n                        plugins:\r\n                        {\r\n                            headerRenderer:\r\n                            {\r\n                                type: GroupedTableHeaderContentRendererComponent\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                dataLoader:\r\n                {\r\n                    options: <AsyncDataLoaderOptions<Address, SimpleOrdering>>\r\n                    {\r\n                        //data callback used for getting data asynchronously\r\n                        dataCallback: this._getData.bind(this)\r\n                    }\r\n                },\r\n                paging:\r\n                {\r\n                    options: <BasicPagingOptions>\r\n                    {\r\n                        //available values for items per page buttons\r\n                        itemsPerPageValues: [5, 10, 20],\r\n                        //initial value of items per page, should be one of above\r\n                        initialItemsPerPage: 5\r\n                    }\r\n                }\r\n            }\r\n        };\r\n    }\r\n\r\n    //######################### private methods #########################\r\n\r\n    /**\r\n     * Callback used for obtaining data\r\n     * @param page Index of requested page\r\n     * @param itemsPerPage Number of items per page\r\n     * @param ordering Order by column name\r\n     */\r\n    private async _getData(page: number, itemsPerPage: number, ordering: SimpleOrdering): Promise<DataResponse<Address>>\r\n    {\r\n        let reqOrdering: Orderable = null;\r\n\r\n        if(ordering)\r\n        {\r\n            reqOrdering = \r\n            {\r\n                direction: ordering.orderByDirection,\r\n                sort: ordering.orderBy\r\n            };\r\n        }\r\n\r\n        let result = await this._dataSvc\r\n            .getData({\r\n                        page: page,\r\n                        size: itemsPerPage\r\n                    },\r\n                    reqOrdering)\r\n            .toPromise();\r\n\r\n        return {\r\n            data: result.content,\r\n            totalCount: result.totalElements\r\n        };\r\n    }\r\n}","import {Component, ChangeDetectionStrategy} from \"@angular/core\";\r\nimport {ComponentRoute} from \"@anglr/common/router\";\r\n\r\n/**\r\n * Grouped metadata sample for grid component\r\n */\r\n@Component(\r\n{\r\n    selector: 'grouped-metadata-view',\r\n    templateUrl: 'groupedMetadata.component.html',\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\n@ComponentRoute({path: 'grouped'})\r\nexport class GroupedMetadataComponent\r\n{\r\n}","<go-back></go-back>\r\n\r\n<h3>Grouped Metadata Grid Sample</h3>\r\n\r\n<div class=\"bold spread-text\">IMPORT MODULE</div>\r\n<div renderMarkdown=\"`import {GridModule, GroupedGridModule} from '@anglr/grid';`\"></div>\r\n\r\n<source-code>\r\n    <mat-tab-group>\r\n        <mat-tab label=\"groupedMetadataSample.component.ts\">\r\n            <div [renderMarkdown]=\"'pages/+sampleGrid/groupedMetadata/groupedMetadataSample.component.ts' | asSource | async\"></div>\r\n        </mat-tab>\r\n\r\n        <mat-tab label=\"groupedMetadataSample.component.html\">\r\n            <div [renderMarkdown]=\"'pages/+sampleGrid/groupedMetadata/groupedMetadataSample.component.html' | asSource: 'html' | async\"></div>\r\n        </mat-tab>\r\n\r\n        <mat-tab label=\"data.interface.ts\">\r\n            <div [renderMarkdown]=\"'services/api/data/data.interface.ts' | asSource | async\"></div>\r\n        </mat-tab>\r\n    </mat-tab-group>\r\n</source-code>\r\n\r\n<grouped-metadata-sample></grouped-metadata-sample>","import {Component, ChangeDetectionStrategy, ValueProvider} from \"@angular/core\";\r\nimport {GridOptions, SimpleOrdering, BasicPagingOptions, SyncDataLoaderComponent, SyncDataLoaderOptions, GRID_OPTIONS, PAGING_OPTIONS, NoDataRendererOptions} from \"@anglr/grid\";\r\n\r\n/**\r\n * Configuration sample for grid component\r\n */\r\n@Component(\r\n{\r\n    selector: 'configuration-sample',\r\n    templateUrl: 'configurationSample.component.html',\r\n    providers:\r\n    [\r\n        //one way is to provide all grid options\r\n        <ValueProvider>\r\n        {\r\n            provide: GRID_OPTIONS,\r\n            useValue: <GridOptions>\r\n            {\r\n                plugins:\r\n                {\r\n                    dataLoader:\r\n                    {\r\n                        //use sync data loader as grid data loader plugin for all 3 grids\r\n                        type: SyncDataLoaderComponent,\r\n                        options: <SyncDataLoaderOptions<any, SimpleOrdering>>\r\n                        {\r\n                            data: []\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        //other way is to provide only specific options for one plugin\r\n        <ValueProvider>\r\n        {\r\n            provide: PAGING_OPTIONS,\r\n            useValue: <BasicPagingOptions>\r\n            {\r\n                itemsPerPageValues: [15, 30, 60],\r\n                initialItemsPerPage: 15\r\n            }\r\n        }\r\n    ],\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ConfigurationSampleComponent\r\n{\r\n    //######################### public properties - template bindings #########################\r\n\r\n    /**\r\n     * Grid options that are used for grid initialization\r\n     */\r\n    public gridOptions: GridOptions;\r\n\r\n    //######################### constructor #########################\r\n    constructor()\r\n    {\r\n        this.gridOptions =\r\n        {\r\n            plugins:\r\n            {\r\n                noDataRenderer:\r\n                {\r\n                    options: <NoDataRendererOptions<any>>\r\n                    {\r\n                        texts:\r\n                        {\r\n                            noData: \"See there are no data :).\"\r\n                        }\r\n                    }\r\n                },\r\n                paging:\r\n                {\r\n                    options: <BasicPagingOptions>\r\n                    {\r\n                        //available values for items per page buttons\r\n                        itemsPerPageValues: [5, 10, 15]\r\n                    }\r\n                }\r\n            }\r\n        };\r\n    }\r\n}","<h4>Component scope provided paging options, globally provided no data renderer options</h4>\r\n\r\n<ng-grid>\r\n    <basic-table-metadata>\r\n        <basic-table-column id=\"country\" name=\"country\" title=\"Country\"></basic-table-column>\r\n        <basic-table-column id=\"city\" name=\"city\" title=\"City\"></basic-table-column>\r\n        <basic-table-column id=\"zip\" name=\"zip\" title=\"ZIP\"></basic-table-column>\r\n        <basic-table-column id=\"street\" name=\"street\" title=\"Street\"></basic-table-column>\r\n        <basic-table-column id=\"houseNumber\" name=\"houseNumber\" title=\"House Number\"></basic-table-column>\r\n    </basic-table-metadata>\r\n</ng-grid>\r\n\r\n<hr class=\"margin-top-big\">\r\n\r\n<h4>Locally provided paging and no data renderer options</h4>\r\n\r\n<ng-grid [gridOptions]=\"gridOptions\">\r\n    <basic-table-metadata>\r\n        <basic-table-column id=\"country\" name=\"country\" title=\"Country\"></basic-table-column>\r\n        <basic-table-column id=\"city\" name=\"city\" title=\"City\"></basic-table-column>\r\n        <basic-table-column id=\"zip\" name=\"zip\" title=\"ZIP\"></basic-table-column>\r\n        <basic-table-column id=\"street\" name=\"street\" title=\"Street\"></basic-table-column>\r\n        <basic-table-column id=\"houseNumber\" name=\"houseNumber\" title=\"House Number\"></basic-table-column>\r\n    </basic-table-metadata>\r\n</ng-grid>","import {Component, ChangeDetectionStrategy} from \"@angular/core\";\r\nimport {ComponentRoute} from \"@anglr/common/router\";\r\n\r\n/**\r\n * Configuration sample for grid component\r\n */\r\n@Component(\r\n{\r\n    selector: 'configuration-view',\r\n    templateUrl: 'configuration.component.html',\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\n@ComponentRoute({path: 'config'})\r\nexport class ConfigurationComponent\r\n{\r\n}","<go-back></go-back>\r\n\r\n<h3>Configuration Sample</h3>\r\n\r\n<div class=\"bold spread-text\">IMPORT MODULE</div>\r\n<div renderMarkdown=\"`import {GridModule} from '@anglr/grid';`\"></div>\r\n\r\n<source-code>\r\n    <mat-tab-group>\r\n        <mat-tab label=\"configurationSample.component.ts\">\r\n            <div [renderMarkdown]=\"'pages/+sampleGrid/configuration/configurationSample.component.ts' | asSource | async\"></div>\r\n        </mat-tab>\r\n\r\n        <mat-tab label=\"configurationSample.component.html\">\r\n            <div [renderMarkdown]=\"'pages/+sampleGrid/configuration/configurationSample.component.html' | asSource: 'html' | async\"></div>\r\n        </mat-tab>\r\n\r\n        <mat-tab label=\"grid.global.conf.ts\">\r\n            <div [renderMarkdown]=\"'boot/grid.global.conf.ts' | asSource | async\"></div>\r\n        </mat-tab>\r\n    </mat-tab-group>\r\n</source-code>\r\n\r\n<configuration-sample></configuration-sample>","import {BasicComponent} from \"./basic/basic.component\";\r\nimport {BasicSyncComponent} from \"./basicSync/basicSync.component\";\r\nimport {BasicMetadataComponent} from \"./basicMetadata/basicMetadata.component\";\r\nimport {GroupedMetadataComponent} from \"./groupedMetadata/groupedMetadata.component\";\r\nimport {ConfigurationComponent} from \"./configuration/configuration.component\";\r\n\r\nexport var components = \r\n[\r\n    BasicComponent,\r\n    BasicSyncComponent,\r\n    BasicMetadataComponent,\r\n    GroupedMetadataComponent,\r\n    ConfigurationComponent\r\n];","import {NgModule} from '@angular/core';\nimport {ModuleRoutes} from '@anglr/common/router';\n\nimport {components} from './sampleGrid.routes';\nimport {CommonSharedModule} from \"../../boot/commonShared.module\";\nimport {BasicSampleComponent} from './basic/basicSample.component';\nimport {BasicSyncSampleComponent} from './basicSync/basicSyncSample.component';\nimport {BasicMetadataSampleComponent} from './basicMetadata/basicMetadataSample.component';\nimport {GroupedMetadataSampleComponent} from './groupedMetadata/groupedMetadataSample.component';\nimport {ConfigurationSampleComponent} from './configuration/configurationSample.component';\nimport {DataResolver} from '../../misc/resolvers';\nimport {DataService} from '../../services/api/data';\n\n/**\n * Module for samples for grid\n */\n@NgModule(\n{\n    declarations: \n    [\n        ...components,\n        BasicSampleComponent,\n        BasicSyncSampleComponent,\n        BasicMetadataSampleComponent,\n        GroupedMetadataSampleComponent,\n        ConfigurationSampleComponent\n    ],\n    imports:\n    [\n        CommonSharedModule\n    ],\n    providers:\n    [\n        DataResolver,\n        DataService\n    ]\n})\n@ModuleRoutes(components)\nexport class SampleGridModule\n{\n}"],"sourceRoot":""}