{"version":3,"sources":["webpack://ressurectit.github.io/./node_modules/@angular/material/esm2015/tabs/ink-bar.js","webpack://ressurectit.github.io/./node_modules/@angular/cdk/esm2015/a11y/key-manager/focus-key-manager.js","webpack://ressurectit.github.io/./node_modules/@angular/cdk/esm2015/a11y/key-manager/list-key-manager.js","webpack://ressurectit.github.io/./node_modules/@angular/material/esm2015/tabs/paginated-tab-header.js","webpack://ressurectit.github.io/./node_modules/@angular/material/esm2015/tabs/tabs-animations.js","webpack://ressurectit.github.io/./node_modules/@angular/material/esm2015/tabs/tab-body.js","webpack://ressurectit.github.io/./node_modules/@angular/material/esm2015/tabs/tab-content.js","webpack://ressurectit.github.io/./node_modules/@angular/material/esm2015/tabs/tab-config.js","webpack://ressurectit.github.io/./node_modules/@angular/material/esm2015/tabs/tab-group.js","webpack://ressurectit.github.io/./node_modules/@angular/material/esm2015/tabs/tab-header.js","webpack://ressurectit.github.io/./node_modules/@angular/material/esm2015/tabs/tab-label-wrapper.js","webpack://ressurectit.github.io/./node_modules/@angular/material/esm2015/tabs/tab-label.js","webpack://ressurectit.github.io/./node_modules/@angular/material/esm2015/tabs/tab.js"],"names":["_MAT_INK_BAR_POSITIONER","providedIn","factory","element","left","offsetLeft","width","offsetWidth","MatInkBar","constructor","_elementRef","_ngZone","_inkBarPositioner","_animationMode","this","alignToElement","show","requestAnimationFrame","runOutsideAngular","_setStyles","nativeElement","style","visibility","hide","positions","inkBar","t","type","selectors","hostAttrs","hostVars","hostBindings","rf","ctx","ctorParameters","undefined","decorators","args","String","FocusKeyManager","_items","_activeItemIndex","_activeItem","_wrap","_letterKeyStream","Subject","_typeaheadSubscription","Subscription","_vertical","_allowedModifierKeys","_homeAndEnd","_skipPredicateFn","item","disabled","_pressedLetters","tabOut","change","changes","subscribe","newItems","newIndex","toArray","indexOf","skipPredicate","predicate","withWrap","shouldWrap","withVerticalOrientation","enabled","withHorizontalOrientation","direction","_horizontal","withAllowedModifierKeys","keys","withTypeAhead","debounceInterval","unsubscribe","pipe","tap","letter","push","debounceTime","filter","length","map","join","inputString","items","_getItemsArray","i","index","getLabel","toUpperCase","trim","setActiveItem","withHomeAndEnd","previousActiveItem","updateActiveItem","next","onKeydown","event","keyCode","isModifierAllowed","every","modifier","setNextItemActive","setPreviousItemActive","setFirstItemActive","setLastItemActive","key","toLocaleUpperCase","A","Z","fromCharCode","preventDefault","isTyping","_setActiveItemByIndex","_setActiveItemByDelta","itemArray","activeItem","delta","_setActiveInWrapMode","_setActiveInDefaultMode","fallbackDelta","super","arguments","_origin","setFocusOrigin","origin","focus","passiveEventListenerOptions","passive","MatPaginatedTabHeader","_changeDetectorRef","_viewportRuler","_dir","_platform","_scrollDistance","_selectedIndexChanged","_destroyed","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_stopScrolling","disablePagination","_selectedIndex","selectFocusedIndex","indexFocused","fromEvent","takeUntil","_stopInterval","value","_keyManager","ngAfterViewInit","_previousPaginator","_handlePaginatorPress","_nextPaginator","ngAfterContentInit","dirChange","resize","realign","updatePagination","_alignInkBarToSelectedTab","_getLayoutDirection","merge","run","Promise","resolve","then","newFocusIndex","emit","_setTabFocus","ngAfterContentChecked","_tabLabelCount","markForCheck","_scrollToLabel","_checkScrollingControls","_scrollDistanceChanged","_updateTabScrollPosition","ngOnDestroy","complete","_handleKeydown","focusIndex","selectedIndex","_itemSelected","_onContentChanges","textContent","_currentTextContent","_checkPaginationEnabled","activeItemIndex","_isValidIndex","tab","tabIndex","containerEl","_tabListContainer","dir","scrollLeft","scrollWidth","scrollDistance","translateX","_tabList","transform","Math","round","TRIDENT","EDGE","_scrollTo","_scrollHeader","scrollAmount","_handlePaginatorClick","labelIndex","selectedLabel","viewLength","elementRef","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","_getMaxScrollDistance","selectedItem","selectedLabelWrapper","_inkBar","mouseEvent","button","timer","maxScrollDistance","distance","position","max","min","inputs","propDecorators","matTabsAnimations","translateTab","minHeight","MatTabBody_ng_template_2_Template","_c0","a0","animationDuration","_c1","a1","params","MatTabBodyPortal","componentFactoryResolver","viewContainerRef","_host","_document","_centeringSub","_leavingSub","ngOnInit","_beforeCentering","startWith","_isCenterPosition","_position","isCentering","hasAttached","attach","_content","_afterLeavingCenter","detach","MatTabBody","features","_MatTabBodyBase","changeDetectorRef","_dirChangeSubscription","_translateTabComplete","_onCentering","_onCentered","_computePositionAnimationState","distinctUntilChanged","x","y","fromState","toState","_positionIndex","_computePositionFromOrigin","_onTranslateTabStarted","clientHeight","outputs","viewQuery","_t","_portalHost","first","decls","vars","consts","template","$event","directives","styles","encapsulation","data","animation","MAT_TAB_CONTENT","MatTabContent","provide","useExisting","MAT_TABS_CONFIG","MatTabGroup_div_2_ng_template_2_ng_template_0_Template","MatTabGroup_div_2_ng_template_2_Template","tab_r4","$implicit","templateLabel","MatTabGroup_div_2_ng_template_3_Template","textLabel","MatTabGroup_div_2_Template","_r12","restoredCtx","i_r5","ctx_r11","_r0","_handleClick","_tabFocusChanged","ctx_r1","_getTabLabelId","disableRipple","_getTabIndex","_tabs","_getTabContentId","ariaLabel","ariaLabelledby","MatTabGroup_mat_tab_body_5_Template","_r17","_removeTabBodyWrapperHeight","_setTabBodyWrapperHeight","tab_r14","i_r15","ctx_r3","content","contentTabIndex","nextId","MatTabChangeEvent","_MatTabGroupMixinBase","_MatTabGroupBase","defaultConfig","_a","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","_tabLabelSubscription","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","dynamicHeight","_dynamicHeight","_animationDuration","test","_contentTabIndex","_backgroundColor","classList","remove","backgroundColor","add","indexToSelect","_clampTabIndex","isFirstRun","_createChangeEvent","wrapper","_tabBodyWrapper","forEach","isActive","_subscribeToAllTabChanges","_subscribeToTabLabels","tabs","_allTabs","reset","_closestTabGroup","notifyOnChanges","destroy","realignInkBar","_tabHeader","focusTab","header","_focusChanged","_stateChanges","tabHeight","height","offsetHeight","tabHeader","idx","focusOrigin","MatTabGroup","animationMode","contentQueries","dirIndex","color","exportAs","descendants","_c2","_c3","_MatTabHeaderBase","viewportRuler","ngZone","platform","_disableRipple","MatTabHeader","ngContentSelectors","static","_MatTabLabelWrapperBase","MatTabLabelWrapper","getOffsetLeft","getOffsetWidth","MAT_TAB_LABEL","MatTabLabel","MatTab_ng_template_0_Template","_MatTabBase","MAT_TAB_GROUP","MatTab","_viewContainerRef","_contentPortal","_templateLabel","_setTemplateLabelInput","ngOnChanges","hasOwnProperty","_explicitContent","_implicitContent","read"],"mappings":"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","file":"9425.client.es2015.chunk.39b94804241a4b847b30.js","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Directive, ElementRef, Inject, InjectionToken, NgZone, Optional } from '@angular/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n/** Injection token for the MatInkBar's Positioner. */\nimport * as ɵngcc0 from '@angular/core';\nexport const _MAT_INK_BAR_POSITIONER = new InjectionToken('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\n});\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY() {\n    const method = (element) => ({\n        left: element ? (element.offsetLeft || 0) + 'px' : '0',\n        width: element ? (element.offsetWidth || 0) + 'px' : '0',\n    });\n    return method;\n}\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\nexport class MatInkBar {\n    constructor(_elementRef, _ngZone, _inkBarPositioner, _animationMode) {\n        this._elementRef = _elementRef;\n        this._ngZone = _ngZone;\n        this._inkBarPositioner = _inkBarPositioner;\n        this._animationMode = _animationMode;\n    }\n    /**\n     * Calculates the styles from the provided element in order to align the ink-bar to that element.\n     * Shows the ink bar if previously set as hidden.\n     * @param element\n     */\n    alignToElement(element) {\n        this.show();\n        if (typeof requestAnimationFrame !== 'undefined') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => this._setStyles(element));\n            });\n        }\n        else {\n            this._setStyles(element);\n        }\n    }\n    /** Shows the ink bar. */\n    show() {\n        this._elementRef.nativeElement.style.visibility = 'visible';\n    }\n    /** Hides the ink bar. */\n    hide() {\n        this._elementRef.nativeElement.style.visibility = 'hidden';\n    }\n    /**\n     * Sets the proper styles to the ink bar element.\n     * @param element\n     */\n    _setStyles(element) {\n        const positions = this._inkBarPositioner(element);\n        const inkBar = this._elementRef.nativeElement;\n        inkBar.style.left = positions.left;\n        inkBar.style.width = positions.width;\n    }\n}\nMatInkBar.ɵfac = function MatInkBar_Factory(t) { return new (t || MatInkBar)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(_MAT_INK_BAR_POSITIONER), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8)); };\nMatInkBar.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatInkBar, selectors: [[\"mat-ink-bar\"]], hostAttrs: [1, \"mat-ink-bar\"], hostVars: 2, hostBindings: function MatInkBar_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n    } } });\nMatInkBar.ctorParameters = () => [\n    { type: ElementRef },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [_MAT_INK_BAR_POSITIONER,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatInkBar, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-ink-bar',\n                host: {\n                    'class': 'mat-ink-bar',\n                    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [_MAT_INK_BAR_POSITIONER]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }]; }, null); })();\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5rLWJhci5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vc3JjL21hdGVyaWFsL3RhYnMvaW5rLWJhci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBRUgsT0FBTyxFQUFDLFNBQVMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLGNBQWMsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQzlGLE9BQU8sRUFBQyxxQkFBcUIsRUFBQyxNQUFNLHNDQUFzQyxDQUFDO0FBVzNFLHNEQUFzRDs7QUFDdEQsTUFBTSxDQUFDLE1BQU0sdUJBQXVCLEdBQ2xDLElBQUksY0FBYyxDQUF1QixxQkFBcUIsRUFBRTtBQUNsRSxJQUFJLFVBQVUsRUFBRSxNQUFNO0FBQ3RCLElBQUksT0FBTyxFQUFFLCtCQUErQjtBQUM1QyxDQUFHLENBQUMsQ0FBQztBQUVMO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxNQUFNLFVBQVUsK0JBQStCO0FBQUssSUFDbEQsTUFBTSxNQUFNLEdBQUcsQ0FBQyxPQUFvQixFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQzVDLFFBQUksSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBVSxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRztBQUMxRCxRQUFJLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFdBQVcsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUc7QUFDNUQsS0FBRyxDQUFDLENBQUM7QUFDTCxJQUNFLE9BQU8sTUFBTSxDQUFDO0FBQ2hCLENBQUM7QUFFRDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBUUgsTUFBTSxPQUFPLFNBQVM7QUFDdEIsSUFBRSxZQUNVLFdBQW9DLEVBQ3BDLE9BQWUsRUFDa0IsaUJBQXVDLEVBQzlCLGNBQXVCO0FBQUksUUFIckUsZ0JBQVcsR0FBWCxXQUFXLENBQXlCO0FBQUMsUUFDckMsWUFBTyxHQUFQLE9BQU8sQ0FBUTtBQUFDLFFBQ2lCLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBc0I7QUFBQyxRQUMvQixtQkFBYyxHQUFkLGNBQWMsQ0FBUztBQUFDLElBQUcsQ0FBQztBQUNsRixJQUNFO0FBQ0Y7QUFDRTtBQUNFO0FBRUosT0FESztBQUNMLElBQUUsY0FBYyxDQUFDLE9BQW9CO0FBQ3JDLFFBQUksSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ2hCLFFBQ0ksSUFBSSxPQUFPLHFCQUFxQixLQUFLLFdBQVcsRUFBRTtBQUN0RCxZQUFNLElBQUksQ0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFO0FBQzFDLGdCQUFRLHFCQUFxQixDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztBQUM5RCxZQUFNLENBQUMsQ0FBQyxDQUFDO0FBQ1QsU0FBSztBQUFDLGFBQUs7QUFDWCxZQUFNLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDL0IsU0FBSztBQUNMLElBQUUsQ0FBQztBQUNILElBQ0UseUJBQXlCO0FBQzNCLElBQUUsSUFBSTtBQUFLLFFBQ1AsSUFBSSxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLFVBQVUsR0FBRyxTQUFTLENBQUM7QUFDaEUsSUFBRSxDQUFDO0FBQ0gsSUFDRSx5QkFBeUI7QUFDM0IsSUFBRSxJQUFJO0FBQUssUUFDUCxJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsVUFBVSxHQUFHLFFBQVEsQ0FBQztBQUMvRCxJQUFFLENBQUM7QUFDSCxJQUNFO0FBQ0Y7QUFDRTtBQUNFLE9BQUM7QUFDTCxJQUFVLFVBQVUsQ0FBQyxPQUFvQjtBQUN6QyxRQUFJLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUN0RCxRQUFJLE1BQU0sTUFBTSxHQUFnQixJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQztBQUMvRCxRQUNJLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUM7QUFDdkMsUUFBSSxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDO0FBQ3pDLElBQUUsQ0FBQztBQUNIO3FDQXBEQyxTQUFTLFNBQUMsa0JBQ1QsUUFBUSxFQUFFLGFBQWEsa0JBQ3ZCLElBQUksRUFBRSxzQkFDSixPQUFPLEVBQUUsYUFBYSxzQkFDdEIsaUNBQWlDLEVBQUUscUNBQXFDO09BQ3pFLGVBQ0Y7O1dBQ0k7QUFBQztBQUVMLFlBN0NrQixVQUFVO0FBQUksWUFBc0IsTUFBTTtBQUFJLDRDQStDNUQsTUFBTSxTQUFDLHVCQUF1QjtBQUFTLHlDQUN2QyxRQUFRLFlBQUksTUFBTSxTQUFDLHFCQUFxQjtBQUFROzs7Ozs7Ozs7Ozs7Ozs7Ozs7a0NBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5pbXBvcnQge0RpcmVjdGl2ZSwgRWxlbWVudFJlZiwgSW5qZWN0LCBJbmplY3Rpb25Ub2tlbiwgTmdab25lLCBPcHRpb25hbH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0FOSU1BVElPTl9NT0RVTEVfVFlQRX0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlci9hbmltYXRpb25zJztcblxuXG4vKipcbiAqIEludGVyZmFjZSBmb3IgYSBhIE1hdElua0JhciBwb3NpdGlvbmVyIG1ldGhvZCwgZGVmaW5pbmcgdGhlIHBvc2l0aW9uaW5nIGFuZCB3aWR0aCBvZiB0aGUgaW5rXG4gKiBiYXIgaW4gYSBzZXQgb2YgdGFicy5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBfTWF0SW5rQmFyUG9zaXRpb25lciB7XG4gIChlbGVtZW50OiBIVE1MRWxlbWVudCk6IHsgbGVmdDogc3RyaW5nLCB3aWR0aDogc3RyaW5nIH07XG59XG5cbi8qKiBJbmplY3Rpb24gdG9rZW4gZm9yIHRoZSBNYXRJbmtCYXIncyBQb3NpdGlvbmVyLiAqL1xuZXhwb3J0IGNvbnN0IF9NQVRfSU5LX0JBUl9QT1NJVElPTkVSID1cbiAgbmV3IEluamVjdGlvblRva2VuPF9NYXRJbmtCYXJQb3NpdGlvbmVyPignTWF0SW5rQmFyUG9zaXRpb25lcicsIHtcbiAgICBwcm92aWRlZEluOiAncm9vdCcsXG4gICAgZmFjdG9yeTogX01BVF9JTktfQkFSX1BPU0lUSU9ORVJfRkFDVE9SWVxuICB9KTtcblxuLyoqXG4gKiBUaGUgZGVmYXVsdCBwb3NpdGlvbmVyIGZ1bmN0aW9uIGZvciB0aGUgTWF0SW5rQmFyLlxuICogQGRvY3MtcHJpdmF0ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gX01BVF9JTktfQkFSX1BPU0lUSU9ORVJfRkFDVE9SWSgpOiBfTWF0SW5rQmFyUG9zaXRpb25lciB7XG4gIGNvbnN0IG1ldGhvZCA9IChlbGVtZW50OiBIVE1MRWxlbWVudCkgPT4gKHtcbiAgICBsZWZ0OiBlbGVtZW50ID8gKGVsZW1lbnQub2Zmc2V0TGVmdCB8fCAwKSArICdweCcgOiAnMCcsXG4gICAgd2lkdGg6IGVsZW1lbnQgPyAoZWxlbWVudC5vZmZzZXRXaWR0aCB8fCAwKSArICdweCcgOiAnMCcsXG4gIH0pO1xuXG4gIHJldHVybiBtZXRob2Q7XG59XG5cbi8qKlxuICogVGhlIGluay1iYXIgaXMgdXNlZCB0byBkaXNwbGF5IGFuZCBhbmltYXRlIHRoZSBsaW5lIHVuZGVybmVhdGggdGhlIGN1cnJlbnQgYWN0aXZlIHRhYiBsYWJlbC5cbiAqIEBkb2NzLXByaXZhdGVcbiAqL1xuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnbWF0LWluay1iYXInLFxuICBob3N0OiB7XG4gICAgJ2NsYXNzJzogJ21hdC1pbmstYmFyJyxcbiAgICAnW2NsYXNzLl9tYXQtYW5pbWF0aW9uLW5vb3BhYmxlXSc6IGBfYW5pbWF0aW9uTW9kZSA9PT0gJ05vb3BBbmltYXRpb25zJ2AsXG4gIH0sXG59KVxuZXhwb3J0IGNsYXNzIE1hdElua0JhciB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgX2VsZW1lbnRSZWY6IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+LFxuICAgIHByaXZhdGUgX25nWm9uZTogTmdab25lLFxuICAgIEBJbmplY3QoX01BVF9JTktfQkFSX1BPU0lUSU9ORVIpIHByaXZhdGUgX2lua0JhclBvc2l0aW9uZXI6IF9NYXRJbmtCYXJQb3NpdGlvbmVyLFxuICAgIEBPcHRpb25hbCgpIEBJbmplY3QoQU5JTUFUSU9OX01PRFVMRV9UWVBFKSBwdWJsaWMgX2FuaW1hdGlvbk1vZGU/OiBzdHJpbmcpIHsgfVxuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGVzIHRoZSBzdHlsZXMgZnJvbSB0aGUgcHJvdmlkZWQgZWxlbWVudCBpbiBvcmRlciB0byBhbGlnbiB0aGUgaW5rLWJhciB0byB0aGF0IGVsZW1lbnQuXG4gICAqIFNob3dzIHRoZSBpbmsgYmFyIGlmIHByZXZpb3VzbHkgc2V0IGFzIGhpZGRlbi5cbiAgICogQHBhcmFtIGVsZW1lbnRcbiAgICovXG4gIGFsaWduVG9FbGVtZW50KGVsZW1lbnQ6IEhUTUxFbGVtZW50KSB7XG4gICAgdGhpcy5zaG93KCk7XG5cbiAgICBpZiAodHlwZW9mIHJlcXVlc3RBbmltYXRpb25GcmFtZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRoaXMuX25nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB0aGlzLl9zZXRTdHlsZXMoZWxlbWVudCkpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3NldFN0eWxlcyhlbGVtZW50KTtcbiAgICB9XG4gIH1cblxuICAvKiogU2hvd3MgdGhlIGluayBiYXIuICovXG4gIHNob3coKTogdm9pZCB7XG4gICAgdGhpcy5fZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LnN0eWxlLnZpc2liaWxpdHkgPSAndmlzaWJsZSc7XG4gIH1cblxuICAvKiogSGlkZXMgdGhlIGluayBiYXIuICovXG4gIGhpZGUoKTogdm9pZCB7XG4gICAgdGhpcy5fZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LnN0eWxlLnZpc2liaWxpdHkgPSAnaGlkZGVuJztcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBwcm9wZXIgc3R5bGVzIHRvIHRoZSBpbmsgYmFyIGVsZW1lbnQuXG4gICAqIEBwYXJhbSBlbGVtZW50XG4gICAqL1xuICBwcml2YXRlIF9zZXRTdHlsZXMoZWxlbWVudDogSFRNTEVsZW1lbnQpIHtcbiAgICBjb25zdCBwb3NpdGlvbnMgPSB0aGlzLl9pbmtCYXJQb3NpdGlvbmVyKGVsZW1lbnQpO1xuICAgIGNvbnN0IGlua0JhcjogSFRNTEVsZW1lbnQgPSB0aGlzLl9lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQ7XG5cbiAgICBpbmtCYXIuc3R5bGUubGVmdCA9IHBvc2l0aW9ucy5sZWZ0O1xuICAgIGlua0Jhci5zdHlsZS53aWR0aCA9IHBvc2l0aW9ucy53aWR0aDtcbiAgfVxufVxuIl19","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ListKeyManager } from './list-key-manager';\nexport class FocusKeyManager extends ListKeyManager {\n    constructor() {\n        super(...arguments);\n        this._origin = 'program';\n    }\n    /**\n     * Sets the focus origin that will be passed in to the items for any subsequent `focus` calls.\n     * @param origin Focus origin to be used when focusing items.\n     */\n    setFocusOrigin(origin) {\n        this._origin = origin;\n        return this;\n    }\n    setActiveItem(item) {\n        super.setActiveItem(item);\n        if (this.activeItem) {\n            this.activeItem.focus(this._origin);\n        }\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9jdXMta2V5LW1hbmFnZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9zcmMvY2RrL2ExMXkva2V5LW1hbmFnZXIvZm9jdXMta2V5LW1hbmFnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBRUgsT0FBTyxFQUFDLGNBQWMsRUFBdUIsTUFBTSxvQkFBb0IsQ0FBQztBQWF4RSxNQUFNLE9BQU8sZUFBbUIsU0FBUSxjQUFtQztJQUEzRTs7UUFDVSxZQUFPLEdBQWdCLFNBQVMsQ0FBQztJQStCM0MsQ0FBQztJQTdCQzs7O09BR0c7SUFDSCxjQUFjLENBQUMsTUFBbUI7UUFDaEMsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7UUFDdEIsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBZVEsYUFBYSxDQUFDLElBQVM7UUFDOUIsS0FBSyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUUxQixJQUFJLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDbkIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQ3JDO0lBQ0gsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB7TGlzdEtleU1hbmFnZXIsIExpc3RLZXlNYW5hZ2VyT3B0aW9ufSBmcm9tICcuL2xpc3Qta2V5LW1hbmFnZXInO1xuaW1wb3J0IHtGb2N1c09yaWdpbn0gZnJvbSAnLi4vZm9jdXMtbW9uaXRvci9mb2N1cy1tb25pdG9yJztcblxuLyoqXG4gKiBUaGlzIGlzIHRoZSBpbnRlcmZhY2UgZm9yIGZvY3VzYWJsZSBpdGVtcyAodXNlZCBieSB0aGUgRm9jdXNLZXlNYW5hZ2VyKS5cbiAqIEVhY2ggaXRlbSBtdXN0IGtub3cgaG93IHRvIGZvY3VzIGl0c2VsZiwgd2hldGhlciBvciBub3QgaXQgaXMgY3VycmVudGx5IGRpc2FibGVkXG4gKiBhbmQgYmUgYWJsZSB0byBzdXBwbHkgaXRzIGxhYmVsLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIEZvY3VzYWJsZU9wdGlvbiBleHRlbmRzIExpc3RLZXlNYW5hZ2VyT3B0aW9uIHtcbiAgLyoqIEZvY3VzZXMgdGhlIGBGb2N1c2FibGVPcHRpb25gLiAqL1xuICBmb2N1cyhvcmlnaW4/OiBGb2N1c09yaWdpbik6IHZvaWQ7XG59XG5cbmV4cG9ydCBjbGFzcyBGb2N1c0tleU1hbmFnZXI8VD4gZXh0ZW5kcyBMaXN0S2V5TWFuYWdlcjxGb2N1c2FibGVPcHRpb24gJiBUPiB7XG4gIHByaXZhdGUgX29yaWdpbjogRm9jdXNPcmlnaW4gPSAncHJvZ3JhbSc7XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIGZvY3VzIG9yaWdpbiB0aGF0IHdpbGwgYmUgcGFzc2VkIGluIHRvIHRoZSBpdGVtcyBmb3IgYW55IHN1YnNlcXVlbnQgYGZvY3VzYCBjYWxscy5cbiAgICogQHBhcmFtIG9yaWdpbiBGb2N1cyBvcmlnaW4gdG8gYmUgdXNlZCB3aGVuIGZvY3VzaW5nIGl0ZW1zLlxuICAgKi9cbiAgc2V0Rm9jdXNPcmlnaW4ob3JpZ2luOiBGb2N1c09yaWdpbik6IHRoaXMge1xuICAgIHRoaXMuX29yaWdpbiA9IG9yaWdpbjtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBhY3RpdmUgaXRlbSB0byB0aGUgaXRlbSBhdCB0aGUgc3BlY2lmaWVkXG4gICAqIGluZGV4IGFuZCBmb2N1c2VzIHRoZSBuZXdseSBhY3RpdmUgaXRlbS5cbiAgICogQHBhcmFtIGluZGV4IEluZGV4IG9mIHRoZSBpdGVtIHRvIGJlIHNldCBhcyBhY3RpdmUuXG4gICAqL1xuICBvdmVycmlkZSBzZXRBY3RpdmVJdGVtKGluZGV4OiBudW1iZXIpOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBhY3RpdmUgaXRlbSB0byB0aGUgaXRlbSB0aGF0IGlzIHNwZWNpZmllZCBhbmQgZm9jdXNlcyBpdC5cbiAgICogQHBhcmFtIGl0ZW0gSXRlbSB0byBiZSBzZXQgYXMgYWN0aXZlLlxuICAgKi9cbiAgb3ZlcnJpZGUgc2V0QWN0aXZlSXRlbShpdGVtOiBUKTogdm9pZDtcblxuICBvdmVycmlkZSBzZXRBY3RpdmVJdGVtKGl0ZW06IGFueSk6IHZvaWQge1xuICAgIHN1cGVyLnNldEFjdGl2ZUl0ZW0oaXRlbSk7XG5cbiAgICBpZiAodGhpcy5hY3RpdmVJdGVtKSB7XG4gICAgICB0aGlzLmFjdGl2ZUl0ZW0uZm9jdXModGhpcy5fb3JpZ2luKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { QueryList } from '@angular/core';\nimport { Subject, Subscription } from 'rxjs';\nimport { UP_ARROW, DOWN_ARROW, LEFT_ARROW, RIGHT_ARROW, TAB, A, Z, ZERO, NINE, hasModifierKey, HOME, END, } from '@angular/cdk/keycodes';\nimport { debounceTime, filter, map, tap } from 'rxjs/operators';\n/**\n * This class manages keyboard events for selectable lists. If you pass it a query list\n * of items, it will set the active item correctly when arrow events occur.\n */\nexport class ListKeyManager {\n    constructor(_items) {\n        this._items = _items;\n        this._activeItemIndex = -1;\n        this._activeItem = null;\n        this._wrap = false;\n        this._letterKeyStream = new Subject();\n        this._typeaheadSubscription = Subscription.EMPTY;\n        this._vertical = true;\n        this._allowedModifierKeys = [];\n        this._homeAndEnd = false;\n        /**\n         * Predicate function that can be used to check whether an item should be skipped\n         * by the key manager. By default, disabled items are skipped.\n         */\n        this._skipPredicateFn = (item) => item.disabled;\n        // Buffer for the letters that the user has pressed when the typeahead option is turned on.\n        this._pressedLetters = [];\n        /**\n         * Stream that emits any time the TAB key is pressed, so components can react\n         * when focus is shifted off of the list.\n         */\n        this.tabOut = new Subject();\n        /** Stream that emits whenever the active item of the list manager changes. */\n        this.change = new Subject();\n        // We allow for the items to be an array because, in some cases, the consumer may\n        // not have access to a QueryList of the items they want to manage (e.g. when the\n        // items aren't being collected via `ViewChildren` or `ContentChildren`).\n        if (_items instanceof QueryList) {\n            _items.changes.subscribe((newItems) => {\n                if (this._activeItem) {\n                    const itemArray = newItems.toArray();\n                    const newIndex = itemArray.indexOf(this._activeItem);\n                    if (newIndex > -1 && newIndex !== this._activeItemIndex) {\n                        this._activeItemIndex = newIndex;\n                    }\n                }\n            });\n        }\n    }\n    /**\n     * Sets the predicate function that determines which items should be skipped by the\n     * list key manager.\n     * @param predicate Function that determines whether the given item should be skipped.\n     */\n    skipPredicate(predicate) {\n        this._skipPredicateFn = predicate;\n        return this;\n    }\n    /**\n     * Configures wrapping mode, which determines whether the active item will wrap to\n     * the other end of list when there are no more items in the given direction.\n     * @param shouldWrap Whether the list should wrap when reaching the end.\n     */\n    withWrap(shouldWrap = true) {\n        this._wrap = shouldWrap;\n        return this;\n    }\n    /**\n     * Configures whether the key manager should be able to move the selection vertically.\n     * @param enabled Whether vertical selection should be enabled.\n     */\n    withVerticalOrientation(enabled = true) {\n        this._vertical = enabled;\n        return this;\n    }\n    /**\n     * Configures the key manager to move the selection horizontally.\n     * Passing in `null` will disable horizontal movement.\n     * @param direction Direction in which the selection can be moved.\n     */\n    withHorizontalOrientation(direction) {\n        this._horizontal = direction;\n        return this;\n    }\n    /**\n     * Modifier keys which are allowed to be held down and whose default actions will be prevented\n     * as the user is pressing the arrow keys. Defaults to not allowing any modifier keys.\n     */\n    withAllowedModifierKeys(keys) {\n        this._allowedModifierKeys = keys;\n        return this;\n    }\n    /**\n     * Turns on typeahead mode which allows users to set the active item by typing.\n     * @param debounceInterval Time to wait after the last keystroke before setting the active item.\n     */\n    withTypeAhead(debounceInterval = 200) {\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) && (this._items.length &&\n            this._items.some(item => typeof item.getLabel !== 'function'))) {\n            throw Error('ListKeyManager items in typeahead mode must implement the `getLabel` method.');\n        }\n        this._typeaheadSubscription.unsubscribe();\n        // Debounce the presses of non-navigational keys, collect the ones that correspond to letters\n        // and convert those letters back into a string. Afterwards find the first item that starts\n        // with that string and select it.\n        this._typeaheadSubscription = this._letterKeyStream.pipe(tap(letter => this._pressedLetters.push(letter)), debounceTime(debounceInterval), filter(() => this._pressedLetters.length > 0), map(() => this._pressedLetters.join(''))).subscribe(inputString => {\n            const items = this._getItemsArray();\n            // Start at 1 because we want to start searching at the item immediately\n            // following the current active item.\n            for (let i = 1; i < items.length + 1; i++) {\n                const index = (this._activeItemIndex + i) % items.length;\n                const item = items[index];\n                if (!this._skipPredicateFn(item) &&\n                    item.getLabel().toUpperCase().trim().indexOf(inputString) === 0) {\n                    this.setActiveItem(index);\n                    break;\n                }\n            }\n            this._pressedLetters = [];\n        });\n        return this;\n    }\n    /**\n     * Configures the key manager to activate the first and last items\n     * respectively when the Home or End key is pressed.\n     * @param enabled Whether pressing the Home or End key activates the first/last item.\n     */\n    withHomeAndEnd(enabled = true) {\n        this._homeAndEnd = enabled;\n        return this;\n    }\n    setActiveItem(item) {\n        const previousActiveItem = this._activeItem;\n        this.updateActiveItem(item);\n        if (this._activeItem !== previousActiveItem) {\n            this.change.next(this._activeItemIndex);\n        }\n    }\n    /**\n     * Sets the active item depending on the key event passed in.\n     * @param event Keyboard event to be used for determining which element should be active.\n     */\n    onKeydown(event) {\n        const keyCode = event.keyCode;\n        const modifiers = ['altKey', 'ctrlKey', 'metaKey', 'shiftKey'];\n        const isModifierAllowed = modifiers.every(modifier => {\n            return !event[modifier] || this._allowedModifierKeys.indexOf(modifier) > -1;\n        });\n        switch (keyCode) {\n            case TAB:\n                this.tabOut.next();\n                return;\n            case DOWN_ARROW:\n                if (this._vertical && isModifierAllowed) {\n                    this.setNextItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            case UP_ARROW:\n                if (this._vertical && isModifierAllowed) {\n                    this.setPreviousItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            case RIGHT_ARROW:\n                if (this._horizontal && isModifierAllowed) {\n                    this._horizontal === 'rtl' ? this.setPreviousItemActive() : this.setNextItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            case LEFT_ARROW:\n                if (this._horizontal && isModifierAllowed) {\n                    this._horizontal === 'rtl' ? this.setNextItemActive() : this.setPreviousItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            case HOME:\n                if (this._homeAndEnd && isModifierAllowed) {\n                    this.setFirstItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            case END:\n                if (this._homeAndEnd && isModifierAllowed) {\n                    this.setLastItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            default:\n                if (isModifierAllowed || hasModifierKey(event, 'shiftKey')) {\n                    // Attempt to use the `event.key` which also maps it to the user's keyboard language,\n                    // otherwise fall back to resolving alphanumeric characters via the keyCode.\n                    if (event.key && event.key.length === 1) {\n                        this._letterKeyStream.next(event.key.toLocaleUpperCase());\n                    }\n                    else if ((keyCode >= A && keyCode <= Z) || (keyCode >= ZERO && keyCode <= NINE)) {\n                        this._letterKeyStream.next(String.fromCharCode(keyCode));\n                    }\n                }\n                // Note that we return here, in order to avoid preventing\n                // the default action of non-navigational keys.\n                return;\n        }\n        this._pressedLetters = [];\n        event.preventDefault();\n    }\n    /** Index of the currently active item. */\n    get activeItemIndex() {\n        return this._activeItemIndex;\n    }\n    /** The active item. */\n    get activeItem() {\n        return this._activeItem;\n    }\n    /** Gets whether the user is currently typing into the manager using the typeahead feature. */\n    isTyping() {\n        return this._pressedLetters.length > 0;\n    }\n    /** Sets the active item to the first enabled item in the list. */\n    setFirstItemActive() {\n        this._setActiveItemByIndex(0, 1);\n    }\n    /** Sets the active item to the last enabled item in the list. */\n    setLastItemActive() {\n        this._setActiveItemByIndex(this._items.length - 1, -1);\n    }\n    /** Sets the active item to the next enabled item in the list. */\n    setNextItemActive() {\n        this._activeItemIndex < 0 ? this.setFirstItemActive() : this._setActiveItemByDelta(1);\n    }\n    /** Sets the active item to a previous enabled item in the list. */\n    setPreviousItemActive() {\n        this._activeItemIndex < 0 && this._wrap ? this.setLastItemActive()\n            : this._setActiveItemByDelta(-1);\n    }\n    updateActiveItem(item) {\n        const itemArray = this._getItemsArray();\n        const index = typeof item === 'number' ? item : itemArray.indexOf(item);\n        const activeItem = itemArray[index];\n        // Explicitly check for `null` and `undefined` because other falsy values are valid.\n        this._activeItem = activeItem == null ? null : activeItem;\n        this._activeItemIndex = index;\n    }\n    /**\n     * This method sets the active item, given a list of items and the delta between the\n     * currently active item and the new active item. It will calculate differently\n     * depending on whether wrap mode is turned on.\n     */\n    _setActiveItemByDelta(delta) {\n        this._wrap ? this._setActiveInWrapMode(delta) : this._setActiveInDefaultMode(delta);\n    }\n    /**\n     * Sets the active item properly given \"wrap\" mode. In other words, it will continue to move\n     * down the list until it finds an item that is not disabled, and it will wrap if it\n     * encounters either end of the list.\n     */\n    _setActiveInWrapMode(delta) {\n        const items = this._getItemsArray();\n        for (let i = 1; i <= items.length; i++) {\n            const index = (this._activeItemIndex + (delta * i) + items.length) % items.length;\n            const item = items[index];\n            if (!this._skipPredicateFn(item)) {\n                this.setActiveItem(index);\n                return;\n            }\n        }\n    }\n    /**\n     * Sets the active item properly given the default mode. In other words, it will\n     * continue to move down the list until it finds an item that is not disabled. If\n     * it encounters either end of the list, it will stop and not wrap.\n     */\n    _setActiveInDefaultMode(delta) {\n        this._setActiveItemByIndex(this._activeItemIndex + delta, delta);\n    }\n    /**\n     * Sets the active item to the first enabled item starting at the index specified. If the\n     * item is disabled, it will move in the fallbackDelta direction until it either\n     * finds an enabled item or encounters the end of the list.\n     */\n    _setActiveItemByIndex(index, fallbackDelta) {\n        const items = this._getItemsArray();\n        if (!items[index]) {\n            return;\n        }\n        while (this._skipPredicateFn(items[index])) {\n            index += fallbackDelta;\n            if (!items[index]) {\n                return;\n            }\n        }\n        this.setActiveItem(index);\n    }\n    /** Returns the items as an array. */\n    _getItemsArray() {\n        return this._items instanceof QueryList ? this._items.toArray() : this._items;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ChangeDetectorRef, ElementRef, NgZone, Optional, EventEmitter, Directive, Inject, Input, } from '@angular/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\nimport { FocusKeyManager } from '@angular/cdk/a11y';\nimport { ENTER, SPACE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { merge, of as observableOf, Subject, timer, fromEvent } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { Platform, normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n/** Config used to bind passive event listeners */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nimport * as ɵngcc3 from '@angular/cdk/platform';\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({ passive: true });\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n/**\n * Amount of milliseconds to wait before starting to scroll the header automatically.\n * Set a little conservatively in order to handle fake events dispatched on touch devices.\n */\nconst HEADER_SCROLL_DELAY = 650;\n/**\n * Interval in milliseconds at which to scroll the header\n * while the user is holding their pointer.\n */\nconst HEADER_SCROLL_INTERVAL = 100;\n/**\n * Base class for a tab header that supported pagination.\n * @docs-private\n */\nexport class MatPaginatedTabHeader {\n    constructor(_elementRef, _changeDetectorRef, _viewportRuler, _dir, _ngZone, _platform, _animationMode) {\n        this._elementRef = _elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._viewportRuler = _viewportRuler;\n        this._dir = _dir;\n        this._ngZone = _ngZone;\n        this._platform = _platform;\n        this._animationMode = _animationMode;\n        /** The distance in pixels that the tab labels should be translated to the left. */\n        this._scrollDistance = 0;\n        /** Whether the header should scroll to the selected index after the view has been checked. */\n        this._selectedIndexChanged = false;\n        /** Emits when the component is destroyed. */\n        this._destroyed = new Subject();\n        /** Whether the controls for pagination should be displayed */\n        this._showPaginationControls = false;\n        /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n        this._disableScrollAfter = true;\n        /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n        this._disableScrollBefore = true;\n        /** Stream that will stop the automated scrolling. */\n        this._stopScrolling = new Subject();\n        /**\n         * Whether pagination should be disabled. This can be used to avoid unnecessary\n         * layout recalculations if it's known that pagination won't be required.\n         */\n        this.disablePagination = false;\n        this._selectedIndex = 0;\n        /** Event emitted when the option is selected. */\n        this.selectFocusedIndex = new EventEmitter();\n        /** Event emitted when a label is focused. */\n        this.indexFocused = new EventEmitter();\n        // Bind the `mouseleave` event on the outside since it doesn't change anything in the view.\n        _ngZone.runOutsideAngular(() => {\n            fromEvent(_elementRef.nativeElement, 'mouseleave')\n                .pipe(takeUntil(this._destroyed))\n                .subscribe(() => {\n                this._stopInterval();\n            });\n        });\n    }\n    /** The index of the active tab. */\n    get selectedIndex() { return this._selectedIndex; }\n    set selectedIndex(value) {\n        value = coerceNumberProperty(value);\n        if (this._selectedIndex != value) {\n            this._selectedIndexChanged = true;\n            this._selectedIndex = value;\n            if (this._keyManager) {\n                this._keyManager.updateActiveItem(value);\n            }\n        }\n    }\n    ngAfterViewInit() {\n        // We need to handle these events manually, because we want to bind passive event listeners.\n        fromEvent(this._previousPaginator.nativeElement, 'touchstart', passiveEventListenerOptions)\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => {\n            this._handlePaginatorPress('before');\n        });\n        fromEvent(this._nextPaginator.nativeElement, 'touchstart', passiveEventListenerOptions)\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => {\n            this._handlePaginatorPress('after');\n        });\n    }\n    ngAfterContentInit() {\n        const dirChange = this._dir ? this._dir.change : observableOf('ltr');\n        const resize = this._viewportRuler.change(150);\n        const realign = () => {\n            this.updatePagination();\n            this._alignInkBarToSelectedTab();\n        };\n        this._keyManager = new FocusKeyManager(this._items)\n            .withHorizontalOrientation(this._getLayoutDirection())\n            .withHomeAndEnd()\n            .withWrap();\n        this._keyManager.updateActiveItem(this._selectedIndex);\n        // Defer the first call in order to allow for slower browsers to lay out the elements.\n        // This helps in cases where the user lands directly on a page with paginated tabs.\n        typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n        // On dir change or window resize, realign the ink bar and update the orientation of\n        // the key manager if the direction has changed.\n        merge(dirChange, resize, this._items.changes).pipe(takeUntil(this._destroyed)).subscribe(() => {\n            // We need to defer this to give the browser some time to recalculate\n            // the element dimensions. The call has to be wrapped in `NgZone.run`,\n            // because the viewport change handler runs outside of Angular.\n            this._ngZone.run(() => Promise.resolve().then(realign));\n            this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n        });\n        // If there is a change in the focus key manager we need to emit the `indexFocused`\n        // event in order to provide a public event that notifies about focus changes. Also we realign\n        // the tabs container by scrolling the new focused tab into the visible section.\n        this._keyManager.change.pipe(takeUntil(this._destroyed)).subscribe(newFocusIndex => {\n            this.indexFocused.emit(newFocusIndex);\n            this._setTabFocus(newFocusIndex);\n        });\n    }\n    ngAfterContentChecked() {\n        // If the number of tab labels have changed, check if scrolling should be enabled\n        if (this._tabLabelCount != this._items.length) {\n            this.updatePagination();\n            this._tabLabelCount = this._items.length;\n            this._changeDetectorRef.markForCheck();\n        }\n        // If the selected index has changed, scroll to the label and check if the scrolling controls\n        // should be disabled.\n        if (this._selectedIndexChanged) {\n            this._scrollToLabel(this._selectedIndex);\n            this._checkScrollingControls();\n            this._alignInkBarToSelectedTab();\n            this._selectedIndexChanged = false;\n            this._changeDetectorRef.markForCheck();\n        }\n        // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n        // then translate the header to reflect this.\n        if (this._scrollDistanceChanged) {\n            this._updateTabScrollPosition();\n            this._scrollDistanceChanged = false;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._stopScrolling.complete();\n    }\n    /** Handles keyboard events on the header. */\n    _handleKeydown(event) {\n        // We don't handle any key bindings with a modifier key.\n        if (hasModifierKey(event)) {\n            return;\n        }\n        switch (event.keyCode) {\n            case ENTER:\n            case SPACE:\n                if (this.focusIndex !== this.selectedIndex) {\n                    this.selectFocusedIndex.emit(this.focusIndex);\n                    this._itemSelected(event);\n                }\n                break;\n            default:\n                this._keyManager.onKeydown(event);\n        }\n    }\n    /**\n     * Callback for when the MutationObserver detects that the content has changed.\n     */\n    _onContentChanges() {\n        const textContent = this._elementRef.nativeElement.textContent;\n        // We need to diff the text content of the header, because the MutationObserver callback\n        // will fire even if the text content didn't change which is inefficient and is prone\n        // to infinite loops if a poorly constructed expression is passed in (see #14249).\n        if (textContent !== this._currentTextContent) {\n            this._currentTextContent = textContent || '';\n            // The content observer runs outside the `NgZone` by default, which\n            // means that we need to bring the callback back in ourselves.\n            this._ngZone.run(() => {\n                this.updatePagination();\n                this._alignInkBarToSelectedTab();\n                this._changeDetectorRef.markForCheck();\n            });\n        }\n    }\n    /**\n     * Updates the view whether pagination should be enabled or not.\n     *\n     * WARNING: Calling this method can be very costly in terms of performance. It should be called\n     * as infrequently as possible from outside of the Tabs component as it causes a reflow of the\n     * page.\n     */\n    updatePagination() {\n        this._checkPaginationEnabled();\n        this._checkScrollingControls();\n        this._updateTabScrollPosition();\n    }\n    /** Tracks which element has focus; used for keyboard navigation */\n    get focusIndex() {\n        return this._keyManager ? this._keyManager.activeItemIndex : 0;\n    }\n    /** When the focus index is set, we must manually send focus to the correct label */\n    set focusIndex(value) {\n        if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {\n            return;\n        }\n        this._keyManager.setActiveItem(value);\n    }\n    /**\n     * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n     * providing a valid index and return true.\n     */\n    _isValidIndex(index) {\n        if (!this._items) {\n            return true;\n        }\n        const tab = this._items ? this._items.toArray()[index] : null;\n        return !!tab && !tab.disabled;\n    }\n    /**\n     * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n     * scrolling is enabled.\n     */\n    _setTabFocus(tabIndex) {\n        if (this._showPaginationControls) {\n            this._scrollToLabel(tabIndex);\n        }\n        if (this._items && this._items.length) {\n            this._items.toArray()[tabIndex].focus();\n            // Do not let the browser manage scrolling to focus the element, this will be handled\n            // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n            // should be the full width minus the offset width.\n            const containerEl = this._tabListContainer.nativeElement;\n            const dir = this._getLayoutDirection();\n            if (dir == 'ltr') {\n                containerEl.scrollLeft = 0;\n            }\n            else {\n                containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n            }\n        }\n    }\n    /** The layout direction of the containing app. */\n    _getLayoutDirection() {\n        return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n    }\n    /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n    _updateTabScrollPosition() {\n        if (this.disablePagination) {\n            return;\n        }\n        const scrollDistance = this.scrollDistance;\n        const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n        // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n        // seems to cause flickering and overflow in Internet Explorer. For example, the ink bar\n        // and ripples will exceed the boundaries of the visible tab bar.\n        // See: https://github.com/angular/components/issues/10276\n        // We round the `transform` here, because transforms with sub-pixel precision cause some\n        // browsers to blur the content of the element.\n        this._tabList.nativeElement.style.transform = `translateX(${Math.round(translateX)}px)`;\n        // Setting the `transform` on IE will change the scroll offset of the parent, causing the\n        // position to be thrown off in some cases. We have to reset it ourselves to ensure that\n        // it doesn't get thrown off. Note that we scope it only to IE and Edge, because messing\n        // with the scroll position throws off Chrome 71+ in RTL mode (see #14689).\n        if (this._platform.TRIDENT || this._platform.EDGE) {\n            this._tabListContainer.nativeElement.scrollLeft = 0;\n        }\n    }\n    /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n    get scrollDistance() { return this._scrollDistance; }\n    set scrollDistance(value) {\n        this._scrollTo(value);\n    }\n    /**\n     * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n     * the end of the list, respectively). The distance to scroll is computed to be a third of the\n     * length of the tab list view window.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     */\n    _scrollHeader(direction) {\n        const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n        // Move the scroll distance one-third the length of the tab list's viewport.\n        const scrollAmount = (direction == 'before' ? -1 : 1) * viewLength / 3;\n        return this._scrollTo(this._scrollDistance + scrollAmount);\n    }\n    /** Handles click events on the pagination arrows. */\n    _handlePaginatorClick(direction) {\n        this._stopInterval();\n        this._scrollHeader(direction);\n    }\n    /**\n     * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     */\n    _scrollToLabel(labelIndex) {\n        if (this.disablePagination) {\n            return;\n        }\n        const selectedLabel = this._items ? this._items.toArray()[labelIndex] : null;\n        if (!selectedLabel) {\n            return;\n        }\n        // The view length is the visible width of the tab labels.\n        const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n        const { offsetLeft, offsetWidth } = selectedLabel.elementRef.nativeElement;\n        let labelBeforePos, labelAfterPos;\n        if (this._getLayoutDirection() == 'ltr') {\n            labelBeforePos = offsetLeft;\n            labelAfterPos = labelBeforePos + offsetWidth;\n        }\n        else {\n            labelAfterPos = this._tabList.nativeElement.offsetWidth - offsetLeft;\n            labelBeforePos = labelAfterPos - offsetWidth;\n        }\n        const beforeVisiblePos = this.scrollDistance;\n        const afterVisiblePos = this.scrollDistance + viewLength;\n        if (labelBeforePos < beforeVisiblePos) {\n            // Scroll header to move label to the before direction\n            this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n        }\n        else if (labelAfterPos > afterVisiblePos) {\n            // Scroll header to move label to the after direction\n            this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n        }\n    }\n    /**\n     * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n     * tab list is wider than the size of the header container, then the pagination controls should\n     * be shown.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     */\n    _checkPaginationEnabled() {\n        if (this.disablePagination) {\n            this._showPaginationControls = false;\n        }\n        else {\n            const isEnabled = this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n            if (!isEnabled) {\n                this.scrollDistance = 0;\n            }\n            if (isEnabled !== this._showPaginationControls) {\n                this._changeDetectorRef.markForCheck();\n            }\n            this._showPaginationControls = isEnabled;\n        }\n    }\n    /**\n     * Evaluate whether the before and after controls should be enabled or disabled.\n     * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n     * before button. If the header is at the end of the list (scroll distance is equal to the\n     * maximum distance we can scroll), then disable the after button.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     */\n    _checkScrollingControls() {\n        if (this.disablePagination) {\n            this._disableScrollAfter = this._disableScrollBefore = true;\n        }\n        else {\n            // Check if the pagination arrows should be activated.\n            this._disableScrollBefore = this.scrollDistance == 0;\n            this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n     * is equal to the difference in width between the tab list container and tab header container.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     */\n    _getMaxScrollDistance() {\n        const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n        const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n        return (lengthOfTabList - viewLength) || 0;\n    }\n    /** Tells the ink-bar to align itself to the current label wrapper */\n    _alignInkBarToSelectedTab() {\n        const selectedItem = this._items && this._items.length ?\n            this._items.toArray()[this.selectedIndex] : null;\n        const selectedLabelWrapper = selectedItem ? selectedItem.elementRef.nativeElement : null;\n        if (selectedLabelWrapper) {\n            this._inkBar.alignToElement(selectedLabelWrapper);\n        }\n        else {\n            this._inkBar.hide();\n        }\n    }\n    /** Stops the currently-running paginator interval.  */\n    _stopInterval() {\n        this._stopScrolling.next();\n    }\n    /**\n     * Handles the user pressing down on one of the paginators.\n     * Starts scrolling the header after a certain amount of time.\n     * @param direction In which direction the paginator should be scrolled.\n     */\n    _handlePaginatorPress(direction, mouseEvent) {\n        // Don't start auto scrolling for right mouse button clicks. Note that we shouldn't have to\n        // null check the `button`, but we do it so we don't break tests that use fake events.\n        if (mouseEvent && mouseEvent.button != null && mouseEvent.button !== 0) {\n            return;\n        }\n        // Avoid overlapping timers.\n        this._stopInterval();\n        // Start a timer after the delay and keep firing based on the interval.\n        timer(HEADER_SCROLL_DELAY, HEADER_SCROLL_INTERVAL)\n            // Keep the timer going until something tells it to stop or the component is destroyed.\n            .pipe(takeUntil(merge(this._stopScrolling, this._destroyed)))\n            .subscribe(() => {\n            const { maxScrollDistance, distance } = this._scrollHeader(direction);\n            // Stop the timer if we've reached the start or the end.\n            if (distance === 0 || distance >= maxScrollDistance) {\n                this._stopInterval();\n            }\n        });\n    }\n    /**\n     * Scrolls the header to a given position.\n     * @param position Position to which to scroll.\n     * @returns Information on the current scroll distance and the maximum.\n     */\n    _scrollTo(position) {\n        if (this.disablePagination) {\n            return { maxScrollDistance: 0, distance: 0 };\n        }\n        const maxScrollDistance = this._getMaxScrollDistance();\n        this._scrollDistance = Math.max(0, Math.min(maxScrollDistance, position));\n        // Mark that the scroll distance has changed so that after the view is checked, the CSS\n        // transformation can move the header.\n        this._scrollDistanceChanged = true;\n        this._checkScrollingControls();\n        return { maxScrollDistance, distance: this._scrollDistance };\n    }\n}\nMatPaginatedTabHeader.ɵfac = function MatPaginatedTabHeader_Factory(t) { return new (t || MatPaginatedTabHeader)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Platform), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8)); };\nMatPaginatedTabHeader.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatPaginatedTabHeader, inputs: { disablePagination: \"disablePagination\" } });\nMatPaginatedTabHeader.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: ViewportRuler },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: NgZone },\n    { type: Platform },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\nMatPaginatedTabHeader.propDecorators = {\n    disablePagination: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatPaginatedTabHeader, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.ViewportRuler }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc0.NgZone }, { type: ɵngcc3.Platform }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }]; }, { disablePagination: [{\n            type: Input\n        }] }); })();\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { animate, state, style, transition, trigger, } from '@angular/animations';\n/**\n * Animations used by the Material tabs.\n * @docs-private\n */\nexport const matTabsAnimations = {\n    /** Animation translates a tab along the X axis. */\n    translateTab: trigger('translateTab', [\n        // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n        state('center, void, left-origin-center, right-origin-center', style({ transform: 'none' })),\n        // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n        // in order to ensure that the element has a height before its state changes. This is\n        // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n        // not have a static height and is not rendered. See related issue: #9465\n        state('left', style({ transform: 'translate3d(-100%, 0, 0)', minHeight: '1px' })),\n        state('right', style({ transform: 'translate3d(100%, 0, 0)', minHeight: '1px' })),\n        transition('* => left, * => right, left => center, right => center', animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')),\n        transition('void => left-origin-center', [\n            style({ transform: 'translate3d(-100%, 0, 0)' }),\n            animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n        ]),\n        transition('void => right-origin-center', [\n            style({ transform: 'translate3d(100%, 0, 0)' }),\n            animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n        ])\n    ])\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFicy1hbmltYXRpb25zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vc3JjL21hdGVyaWFsL3RhYnMvdGFicy1hbmltYXRpb25zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRztBQUNILE9BQU8sRUFDTCxPQUFPLEVBQ1AsS0FBSyxFQUNMLEtBQUssRUFDTCxVQUFVLEVBQ1YsT0FBTyxHQUVSLE1BQU0scUJBQXFCLENBQUM7QUFFN0I7OztHQUdHO0FBQ0gsTUFBTSxDQUFDLE1BQU0saUJBQWlCLEdBRTFCO0lBQ0YsbURBQW1EO0lBQ25ELFlBQVksRUFBRSxPQUFPLENBQUMsY0FBYyxFQUFFO1FBQ3BDLDBGQUEwRjtRQUMxRixLQUFLLENBQUMsdURBQXVELEVBQUUsS0FBSyxDQUFDLEVBQUMsU0FBUyxFQUFFLE1BQU0sRUFBQyxDQUFDLENBQUM7UUFFMUYsdUZBQXVGO1FBQ3ZGLHFGQUFxRjtRQUNyRiw0RkFBNEY7UUFDNUYseUVBQXlFO1FBQ3pFLEtBQUssQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLEVBQUMsU0FBUyxFQUFFLDBCQUEwQixFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUMsQ0FBQyxDQUFDO1FBQy9FLEtBQUssQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLEVBQUMsU0FBUyxFQUFFLHlCQUF5QixFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUMsQ0FBQyxDQUFDO1FBRS9FLFVBQVUsQ0FBQyx3REFBd0QsRUFDL0QsT0FBTyxDQUFDLHNEQUFzRCxDQUFDLENBQUM7UUFDcEUsVUFBVSxDQUFDLDRCQUE0QixFQUFFO1lBQ3ZDLEtBQUssQ0FBQyxFQUFDLFNBQVMsRUFBRSwwQkFBMEIsRUFBQyxDQUFDO1lBQzlDLE9BQU8sQ0FBQyxzREFBc0QsQ0FBQztTQUNoRSxDQUFDO1FBQ0YsVUFBVSxDQUFDLDZCQUE2QixFQUFFO1lBQ3hDLEtBQUssQ0FBQyxFQUFDLFNBQVMsRUFBRSx5QkFBeUIsRUFBQyxDQUFDO1lBQzdDLE9BQU8sQ0FBQyxzREFBc0QsQ0FBQztTQUNoRSxDQUFDO0tBQ0gsQ0FBQztDQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbmltcG9ydCB7XG4gIGFuaW1hdGUsXG4gIHN0YXRlLFxuICBzdHlsZSxcbiAgdHJhbnNpdGlvbixcbiAgdHJpZ2dlcixcbiAgQW5pbWF0aW9uVHJpZ2dlck1ldGFkYXRhLFxufSBmcm9tICdAYW5ndWxhci9hbmltYXRpb25zJztcblxuLyoqXG4gKiBBbmltYXRpb25zIHVzZWQgYnkgdGhlIE1hdGVyaWFsIHRhYnMuXG4gKiBAZG9jcy1wcml2YXRlXG4gKi9cbmV4cG9ydCBjb25zdCBtYXRUYWJzQW5pbWF0aW9uczoge1xuICByZWFkb25seSB0cmFuc2xhdGVUYWI6IEFuaW1hdGlvblRyaWdnZXJNZXRhZGF0YTtcbn0gPSB7XG4gIC8qKiBBbmltYXRpb24gdHJhbnNsYXRlcyBhIHRhYiBhbG9uZyB0aGUgWCBheGlzLiAqL1xuICB0cmFuc2xhdGVUYWI6IHRyaWdnZXIoJ3RyYW5zbGF0ZVRhYicsIFtcbiAgICAvLyBOb3RlOiB0cmFuc2l0aW9ucyB0byBgbm9uZWAgaW5zdGVhZCBvZiAwLCBiZWNhdXNlIHNvbWUgYnJvd3NlcnMgbWlnaHQgYmx1ciB0aGUgY29udGVudC5cbiAgICBzdGF0ZSgnY2VudGVyLCB2b2lkLCBsZWZ0LW9yaWdpbi1jZW50ZXIsIHJpZ2h0LW9yaWdpbi1jZW50ZXInLCBzdHlsZSh7dHJhbnNmb3JtOiAnbm9uZSd9KSksXG5cbiAgICAvLyBJZiB0aGUgdGFiIGlzIGVpdGhlciBvbiB0aGUgbGVmdCBvciByaWdodCwgd2UgYWRkaXRpb25hbGx5IGFkZCBhIGBtaW4taGVpZ2h0YCBvZiAxcHhcbiAgICAvLyBpbiBvcmRlciB0byBlbnN1cmUgdGhhdCB0aGUgZWxlbWVudCBoYXMgYSBoZWlnaHQgYmVmb3JlIGl0cyBzdGF0ZSBjaGFuZ2VzLiBUaGlzIGlzXG4gICAgLy8gbmVjZXNzYXJ5IGJlY2F1c2UgQ2hyb21lIGRvZXMgc2VlbSB0byBza2lwIHRoZSB0cmFuc2l0aW9uIGluIFJUTCBtb2RlIGlmIHRoZSBlbGVtZW50IGRvZXNcbiAgICAvLyBub3QgaGF2ZSBhIHN0YXRpYyBoZWlnaHQgYW5kIGlzIG5vdCByZW5kZXJlZC4gU2VlIHJlbGF0ZWQgaXNzdWU6ICM5NDY1XG4gICAgc3RhdGUoJ2xlZnQnLCBzdHlsZSh7dHJhbnNmb3JtOiAndHJhbnNsYXRlM2QoLTEwMCUsIDAsIDApJywgbWluSGVpZ2h0OiAnMXB4J30pKSxcbiAgICBzdGF0ZSgncmlnaHQnLCBzdHlsZSh7dHJhbnNmb3JtOiAndHJhbnNsYXRlM2QoMTAwJSwgMCwgMCknLCBtaW5IZWlnaHQ6ICcxcHgnfSkpLFxuXG4gICAgdHJhbnNpdGlvbignKiA9PiBsZWZ0LCAqID0+IHJpZ2h0LCBsZWZ0ID0+IGNlbnRlciwgcmlnaHQgPT4gY2VudGVyJyxcbiAgICAgICAgYW5pbWF0ZSgne3thbmltYXRpb25EdXJhdGlvbn19IGN1YmljLWJlemllcigwLjM1LCAwLCAwLjI1LCAxKScpKSxcbiAgICB0cmFuc2l0aW9uKCd2b2lkID0+IGxlZnQtb3JpZ2luLWNlbnRlcicsIFtcbiAgICAgIHN0eWxlKHt0cmFuc2Zvcm06ICd0cmFuc2xhdGUzZCgtMTAwJSwgMCwgMCknfSksXG4gICAgICBhbmltYXRlKCd7e2FuaW1hdGlvbkR1cmF0aW9ufX0gY3ViaWMtYmV6aWVyKDAuMzUsIDAsIDAuMjUsIDEpJylcbiAgICBdKSxcbiAgICB0cmFuc2l0aW9uKCd2b2lkID0+IHJpZ2h0LW9yaWdpbi1jZW50ZXInLCBbXG4gICAgICBzdHlsZSh7dHJhbnNmb3JtOiAndHJhbnNsYXRlM2QoMTAwJSwgMCwgMCknfSksXG4gICAgICBhbmltYXRlKCd7e2FuaW1hdGlvbkR1cmF0aW9ufX0gY3ViaWMtYmV6aWVyKDAuMzUsIDAsIDAuMjUsIDEpJylcbiAgICBdKVxuICBdKVxufTtcbiJdfQ==","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Component, ChangeDetectorRef, Input, Inject, Output, EventEmitter, ElementRef, Directive, Optional, ViewEncapsulation, ChangeDetectionStrategy, ComponentFactoryResolver, ViewContainerRef, forwardRef, ViewChild, } from '@angular/core';\nimport { TemplatePortal, CdkPortalOutlet } from '@angular/cdk/portal';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { DOCUMENT } from '@angular/common';\nimport { Subscription, Subject } from 'rxjs';\nimport { matTabsAnimations } from './tabs-animations';\nimport { startWith, distinctUntilChanged } from 'rxjs/operators';\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/bidi';\n\nfunction MatTabBody_ng_template_2_Template(rf, ctx) { }\nconst _c0 = function (a0) { return { animationDuration: a0 }; };\nconst _c1 = function (a0, a1) { return { value: a0, params: a1 }; };\nexport class MatTabBodyPortal extends CdkPortalOutlet {\n    constructor(componentFactoryResolver, viewContainerRef, _host, _document) {\n        super(componentFactoryResolver, viewContainerRef, _document);\n        this._host = _host;\n        /** Subscription to events for when the tab body begins centering. */\n        this._centeringSub = Subscription.EMPTY;\n        /** Subscription to events for when the tab body finishes leaving from center position. */\n        this._leavingSub = Subscription.EMPTY;\n    }\n    /** Set initial visibility or set up subscription for changing visibility. */\n    ngOnInit() {\n        super.ngOnInit();\n        this._centeringSub = this._host._beforeCentering\n            .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n            .subscribe((isCentering) => {\n            if (isCentering && !this.hasAttached()) {\n                this.attach(this._host._content);\n            }\n        });\n        this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n            this.detach();\n        });\n    }\n    /** Clean up centering subscription. */\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        this._centeringSub.unsubscribe();\n        this._leavingSub.unsubscribe();\n    }\n}\nMatTabBodyPortal.ɵfac = function MatTabBodyPortal_Factory(t) { return new (t || MatTabBodyPortal)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(forwardRef(() => MatTabBody)), ɵngcc0.ɵɵdirectiveInject(DOCUMENT)); };\nMatTabBodyPortal.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatTabBodyPortal, selectors: [[\"\", \"matTabBodyHost\", \"\"]], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\nMatTabBodyPortal.ctorParameters = () => [\n    { type: ComponentFactoryResolver },\n    { type: ViewContainerRef },\n    { type: MatTabBody, decorators: [{ type: Inject, args: [forwardRef(() => MatTabBody),] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTabBodyPortal, [{\n        type: Directive,\n        args: [{\n                selector: '[matTabBodyHost]'\n            }]\n    }], function () { return [{ type: ɵngcc0.ComponentFactoryResolver }, { type: ɵngcc0.ViewContainerRef }, { type: MatTabBody, decorators: [{\n                type: Inject,\n                args: [forwardRef(() => MatTabBody)]\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n/**\n * Base class with all of the `MatTabBody` functionality.\n * @docs-private\n */\nexport class _MatTabBodyBase {\n    constructor(_elementRef, _dir, changeDetectorRef) {\n        this._elementRef = _elementRef;\n        this._dir = _dir;\n        /** Subscription to the directionality change observable. */\n        this._dirChangeSubscription = Subscription.EMPTY;\n        /** Emits when an animation on the tab is complete. */\n        this._translateTabComplete = new Subject();\n        /** Event emitted when the tab begins to animate towards the center as the active tab. */\n        this._onCentering = new EventEmitter();\n        /** Event emitted before the centering of the tab begins. */\n        this._beforeCentering = new EventEmitter();\n        /** Event emitted before the centering of the tab begins. */\n        this._afterLeavingCenter = new EventEmitter();\n        /** Event emitted when the tab completes its animation towards the center. */\n        this._onCentered = new EventEmitter(true);\n        // Note that the default value will always be overwritten by `MatTabBody`, but we need one\n        // anyway to prevent the animations module from throwing an error if the body is used on its own.\n        /** Duration for the tab's animation. */\n        this.animationDuration = '500ms';\n        if (_dir) {\n            this._dirChangeSubscription = _dir.change.subscribe((dir) => {\n                this._computePositionAnimationState(dir);\n                changeDetectorRef.markForCheck();\n            });\n        }\n        // Ensure that we get unique animation events, because the `.done` callback can get\n        // invoked twice in some browsers. See https://github.com/angular/angular/issues/24084.\n        this._translateTabComplete.pipe(distinctUntilChanged((x, y) => {\n            return x.fromState === y.fromState && x.toState === y.toState;\n        })).subscribe(event => {\n            // If the transition to the center is complete, emit an event.\n            if (this._isCenterPosition(event.toState) && this._isCenterPosition(this._position)) {\n                this._onCentered.emit();\n            }\n            if (this._isCenterPosition(event.fromState) && !this._isCenterPosition(this._position)) {\n                this._afterLeavingCenter.emit();\n            }\n        });\n    }\n    /** The shifted index position of the tab body, where zero represents the active center tab. */\n    set position(position) {\n        this._positionIndex = position;\n        this._computePositionAnimationState();\n    }\n    /**\n     * After initialized, check if the content is centered and has an origin. If so, set the\n     * special position states that transition the tab from the left or right before centering.\n     */\n    ngOnInit() {\n        if (this._position == 'center' && this.origin != null) {\n            this._position = this._computePositionFromOrigin(this.origin);\n        }\n    }\n    ngOnDestroy() {\n        this._dirChangeSubscription.unsubscribe();\n        this._translateTabComplete.complete();\n    }\n    _onTranslateTabStarted(event) {\n        const isCentering = this._isCenterPosition(event.toState);\n        this._beforeCentering.emit(isCentering);\n        if (isCentering) {\n            this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n        }\n    }\n    /** The text direction of the containing app. */\n    _getLayoutDirection() {\n        return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n    }\n    /** Whether the provided position state is considered center, regardless of origin. */\n    _isCenterPosition(position) {\n        return position == 'center' ||\n            position == 'left-origin-center' ||\n            position == 'right-origin-center';\n    }\n    /** Computes the position state that will be used for the tab-body animation trigger. */\n    _computePositionAnimationState(dir = this._getLayoutDirection()) {\n        if (this._positionIndex < 0) {\n            this._position = dir == 'ltr' ? 'left' : 'right';\n        }\n        else if (this._positionIndex > 0) {\n            this._position = dir == 'ltr' ? 'right' : 'left';\n        }\n        else {\n            this._position = 'center';\n        }\n    }\n    /**\n     * Computes the position state based on the specified origin position. This is used if the\n     * tab is becoming visible immediately after creation.\n     */\n    _computePositionFromOrigin(origin) {\n        const dir = this._getLayoutDirection();\n        if ((dir == 'ltr' && origin <= 0) || (dir == 'rtl' && origin > 0)) {\n            return 'left-origin-center';\n        }\n        return 'right-origin-center';\n    }\n}\n_MatTabBodyBase.ɵfac = function _MatTabBodyBase_Factory(t) { return new (t || _MatTabBodyBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };\n_MatTabBodyBase.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: _MatTabBodyBase, inputs: { animationDuration: \"animationDuration\", position: \"position\", _content: [\"content\", \"_content\"], origin: \"origin\" }, outputs: { _onCentering: \"_onCentering\", _beforeCentering: \"_beforeCentering\", _afterLeavingCenter: \"_afterLeavingCenter\", _onCentered: \"_onCentered\" } });\n_MatTabBodyBase.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: ChangeDetectorRef }\n];\n_MatTabBodyBase.propDecorators = {\n    _onCentering: [{ type: Output }],\n    _beforeCentering: [{ type: Output }],\n    _afterLeavingCenter: [{ type: Output }],\n    _onCentered: [{ type: Output }],\n    _content: [{ type: Input, args: ['content',] }],\n    origin: [{ type: Input }],\n    animationDuration: [{ type: Input }],\n    position: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatTabBodyBase, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc0.ChangeDetectorRef }]; }, { _onCentering: [{\n            type: Output\n        }], _beforeCentering: [{\n            type: Output\n        }], _afterLeavingCenter: [{\n            type: Output\n        }], _onCentered: [{\n            type: Output\n        }], animationDuration: [{\n            type: Input\n        }], position: [{\n            type: Input\n        }], _content: [{\n            type: Input,\n            args: ['content']\n        }], origin: [{\n            type: Input\n        }] }); })();\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\nexport class MatTabBody extends _MatTabBodyBase {\n    constructor(elementRef, dir, changeDetectorRef) {\n        super(elementRef, dir, changeDetectorRef);\n    }\n}\nMatTabBody.ɵfac = function MatTabBody_Factory(t) { return new (t || MatTabBody)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };\nMatTabBody.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatTabBody, selectors: [[\"mat-tab-body\"]], viewQuery: function MatTabBody_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(CdkPortalOutlet, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._portalHost = _t.first);\n    } }, hostAttrs: [1, \"mat-tab-body\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 3, vars: 6, consts: [[\"cdkScrollable\", \"\", 1, \"mat-tab-body-content\"], [\"content\", \"\"], [\"matTabBodyHost\", \"\"]], template: function MatTabBody_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n        ɵngcc0.ɵɵlistener(\"@translateTab.start\", function MatTabBody_Template_div_animation_translateTab_start_0_listener($event) { return ctx._onTranslateTabStarted($event); })(\"@translateTab.done\", function MatTabBody_Template_div_animation_translateTab_done_0_listener($event) { return ctx._translateTabComplete.next($event); });\n        ɵngcc0.ɵɵtemplate(2, MatTabBody_ng_template_2_Template, 0, 0, \"ng-template\", 2);\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"@translateTab\", ɵngcc0.ɵɵpureFunction2(3, _c1, ctx._position, ɵngcc0.ɵɵpureFunction1(1, _c0, ctx.animationDuration)));\n    } }, directives: [MatTabBodyPortal], styles: [\".mat-tab-body-content{height:100%;overflow:auto}.mat-tab-group-dynamic-height .mat-tab-body-content{overflow:hidden}\\n\"], encapsulation: 2, data: { animation: [matTabsAnimations.translateTab] } });\nMatTabBody.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: ChangeDetectorRef }\n];\nMatTabBody.propDecorators = {\n    _portalHost: [{ type: ViewChild, args: [CdkPortalOutlet,] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTabBody, [{\n        type: Component,\n        args: [{\n                selector: 'mat-tab-body',\n                template: \"<div class=\\\"mat-tab-body-content\\\" #content\\n     [@translateTab]=\\\"{\\n        value: _position,\\n        params: {animationDuration: animationDuration}\\n     }\\\"\\n     (@translateTab.start)=\\\"_onTranslateTabStarted($event)\\\"\\n     (@translateTab.done)=\\\"_translateTabComplete.next($event)\\\"\\n     cdkScrollable>\\n  <ng-template matTabBodyHost></ng-template>\\n</div>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                animations: [matTabsAnimations.translateTab],\n                host: {\n                    'class': 'mat-tab-body'\n                },\n                styles: [\".mat-tab-body-content{height:100%;overflow:auto}.mat-tab-group-dynamic-height .mat-tab-body-content{overflow:hidden}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc0.ChangeDetectorRef }]; }, { _portalHost: [{\n            type: ViewChild,\n            args: [CdkPortalOutlet]\n        }] }); })();\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Directive, InjectionToken, TemplateRef } from '@angular/core';\n/**\n * Injection token that can be used to reference instances of `MatTabContent`. It serves as\n * alternative token to the actual `MatTabContent` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nimport * as ɵngcc0 from '@angular/core';\nexport const MAT_TAB_CONTENT = new InjectionToken('MatTabContent');\n/** Decorates the `ng-template` tags and reads out the template from it. */\nexport class MatTabContent {\n    constructor(\n    /** Content for the tab. */ template) {\n        this.template = template;\n    }\n}\nMatTabContent.ɵfac = function MatTabContent_Factory(t) { return new (t || MatTabContent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nMatTabContent.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatTabContent, selectors: [[\"\", \"matTabContent\", \"\"]], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MAT_TAB_CONTENT, useExisting: MatTabContent }])] });\nMatTabContent.ctorParameters = () => [\n    { type: TemplateRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTabContent, [{\n        type: Directive,\n        args: [{\n                selector: '[matTabContent]',\n                providers: [{ provide: MAT_TAB_CONTENT, useExisting: MatTabContent }]\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFiLWNvbnRlbnQuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9tYXRlcmlhbC90YWJzL3RhYi1jb250ZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFFSCxPQUFPLEVBQUMsU0FBUyxFQUFFLGNBQWMsRUFBRSxXQUFXLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFFckU7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUNILE1BQU0sQ0FBQyxNQUFNLGVBQWUsR0FBRyxJQUFJLGNBQWMsQ0FBZ0IsZUFBZSxDQUFDLENBQUM7QUFFbEYsMkVBQTJFO0FBSzNFLE1BQU0sT0FBTyxhQUFhO0FBQzFCLElBQUU7QUFDRixJQUFJLDJCQUEyQixDQUFRLFFBQTBCO0FBQUksUUFBOUIsYUFBUSxHQUFSLFFBQVEsQ0FBa0I7QUFBQyxJQUFFLENBQUM7QUFDckU7eUNBUEMsU0FBUyxTQUFDLGtCQUNULFFBQVEsRUFBRSxpQkFBaUIsa0JBQzNCLFNBQVMsRUFBRSxDQUFDLEVBQUM7SUFBTyxFQUFFLGVBQWUsRUFBRSxXQUFXLEVBQUUsYUFBYSxFQUFDLENBQUMsZUFDcEUsNkpBQ0k7QUFBQztBQUVMLFlBaEJrQyxXQUFXO0FBQUc7Ozs7Ozs7NEVBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5pbXBvcnQge0RpcmVjdGl2ZSwgSW5qZWN0aW9uVG9rZW4sIFRlbXBsYXRlUmVmfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuLyoqXG4gKiBJbmplY3Rpb24gdG9rZW4gdGhhdCBjYW4gYmUgdXNlZCB0byByZWZlcmVuY2UgaW5zdGFuY2VzIG9mIGBNYXRUYWJDb250ZW50YC4gSXQgc2VydmVzIGFzXG4gKiBhbHRlcm5hdGl2ZSB0b2tlbiB0byB0aGUgYWN0dWFsIGBNYXRUYWJDb250ZW50YCBjbGFzcyB3aGljaCBjb3VsZCBjYXVzZSB1bm5lY2Vzc2FyeVxuICogcmV0ZW50aW9uIG9mIHRoZSBjbGFzcyBhbmQgaXRzIGRpcmVjdGl2ZSBtZXRhZGF0YS5cbiAqL1xuZXhwb3J0IGNvbnN0IE1BVF9UQUJfQ09OVEVOVCA9IG5ldyBJbmplY3Rpb25Ub2tlbjxNYXRUYWJDb250ZW50PignTWF0VGFiQ29udGVudCcpO1xuXG4vKiogRGVjb3JhdGVzIHRoZSBgbmctdGVtcGxhdGVgIHRhZ3MgYW5kIHJlYWRzIG91dCB0aGUgdGVtcGxhdGUgZnJvbSBpdC4gKi9cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1ttYXRUYWJDb250ZW50XScsXG4gIHByb3ZpZGVyczogW3twcm92aWRlOiBNQVRfVEFCX0NPTlRFTlQsIHVzZUV4aXN0aW5nOiBNYXRUYWJDb250ZW50fV0sXG59KVxuZXhwb3J0IGNsYXNzIE1hdFRhYkNvbnRlbnQge1xuICBjb25zdHJ1Y3RvcihcbiAgICAvKiogQ29udGVudCBmb3IgdGhlIHRhYi4gKi8gcHVibGljIHRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+KSB7fVxufVxuIl19","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from '@angular/core';\n/** Injection token that can be used to provide the default options the tabs module. */\nexport const MAT_TABS_CONFIG = new InjectionToken('MAT_TABS_CONFIG');\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFiLWNvbmZpZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9tYXRlcmlhbC90YWJzL3RhYi1jb25maWcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBQ0gsT0FBTyxFQUFDLGNBQWMsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQTBCN0MsdUZBQXVGO0FBQ3ZGLE1BQU0sQ0FBQyxNQUFNLGVBQWUsR0FBRyxJQUFJLGNBQWMsQ0FBZ0IsaUJBQWlCLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuaW1wb3J0IHtJbmplY3Rpb25Ub2tlbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8qKiBPYmplY3QgdGhhdCBjYW4gYmUgdXNlZCB0byBjb25maWd1cmUgdGhlIGRlZmF1bHQgb3B0aW9ucyBmb3IgdGhlIHRhYnMgbW9kdWxlLiAqL1xuZXhwb3J0IGludGVyZmFjZSBNYXRUYWJzQ29uZmlnIHtcbiAgLyoqIER1cmF0aW9uIGZvciB0aGUgdGFiIGFuaW1hdGlvbi4gTXVzdCBiZSBhIHZhbGlkIENTUyB2YWx1ZSAoZS5nLiA2MDBtcykuICovXG4gIGFuaW1hdGlvbkR1cmF0aW9uPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHBhZ2luYXRpb24gc2hvdWxkIGJlIGRpc2FibGVkLiBUaGlzIGNhbiBiZSB1c2VkIHRvIGF2b2lkIHVubmVjZXNzYXJ5XG4gICAqIGxheW91dCByZWNhbGN1bGF0aW9ucyBpZiBpdCdzIGtub3duIHRoYXQgcGFnaW5hdGlvbiB3b24ndCBiZSByZXF1aXJlZC5cbiAgICovXG4gIGRpc2FibGVQYWdpbmF0aW9uPzogYm9vbGVhbjtcblxuICAvKipcbiAgICogV2hldGhlciB0aGUgaW5rIGJhciBzaG91bGQgZml0IGl0cyB3aWR0aCB0byB0aGUgc2l6ZSBvZiB0aGUgdGFiIGxhYmVsIGNvbnRlbnQuXG4gICAqIFRoaXMgb25seSBhcHBsaWVzIHRvIHRoZSBNREMtYmFzZWQgdGFicy5cbiAgICovXG4gIGZpdElua0JhclRvQ29udGVudD86IGJvb2xlYW47XG5cbiAgLyoqIFdoZXRoZXIgdGhlIHRhYiBncm91cCBzaG91bGQgZ3JvdyB0byB0aGUgc2l6ZSBvZiB0aGUgYWN0aXZlIHRhYi4gKi9cbiAgZHluYW1pY0hlaWdodD86IGJvb2xlYW47XG5cbiAgLyoqIGB0YWJpbmRleGAgdG8gYmUgc2V0IG9uIHRoZSBpbm5lciBlbGVtZW50IHRoYXQgd3JhcHMgdGhlIHRhYiBjb250ZW50LiAqL1xuICBjb250ZW50VGFiSW5kZXg/OiBudW1iZXI7XG59XG5cbi8qKiBJbmplY3Rpb24gdG9rZW4gdGhhdCBjYW4gYmUgdXNlZCB0byBwcm92aWRlIHRoZSBkZWZhdWx0IG9wdGlvbnMgdGhlIHRhYnMgbW9kdWxlLiAqL1xuZXhwb3J0IGNvbnN0IE1BVF9UQUJTX0NPTkZJRyA9IG5ldyBJbmplY3Rpb25Ub2tlbjxNYXRUYWJzQ29uZmlnPignTUFUX1RBQlNfQ09ORklHJyk7XG4iXX0=","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, Directive, ElementRef, EventEmitter, Inject, Input, Optional, Output, QueryList, ViewChild, ViewEncapsulation, } from '@angular/core';\nimport { mixinColor, mixinDisableRipple, } from '@angular/material/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { merge, Subscription } from 'rxjs';\nimport { startWith } from 'rxjs/operators';\nimport { MAT_TAB_GROUP, MatTab } from './tab';\nimport { MAT_TABS_CONFIG } from './tab-config';\n/** Used to generate unique ID's for each tab component */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from './tab-header';\nimport * as ɵngcc2 from '@angular/common';\nimport * as ɵngcc3 from './tab-label-wrapper';\nimport * as ɵngcc4 from '@angular/material/core';\nimport * as ɵngcc5 from '@angular/cdk/a11y';\nimport * as ɵngcc6 from '@angular/cdk/portal';\nimport * as ɵngcc7 from './tab-body';\n\nconst _c0 = [\"tabBodyWrapper\"];\nconst _c1 = [\"tabHeader\"];\nfunction MatTabGroup_div_2_ng_template_2_ng_template_0_Template(rf, ctx) { }\nfunction MatTabGroup_div_2_ng_template_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵtemplate(0, MatTabGroup_div_2_ng_template_2_ng_template_0_Template, 0, 0, \"ng-template\", 9);\n} if (rf & 2) {\n    const tab_r4 = ɵngcc0.ɵɵnextContext().$implicit;\n    ɵngcc0.ɵɵproperty(\"cdkPortalOutlet\", tab_r4.templateLabel);\n} }\nfunction MatTabGroup_div_2_ng_template_3_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵtext(0);\n} if (rf & 2) {\n    const tab_r4 = ɵngcc0.ɵɵnextContext().$implicit;\n    ɵngcc0.ɵɵtextInterpolate(tab_r4.textLabel);\n} }\nfunction MatTabGroup_div_2_Template(rf, ctx) { if (rf & 1) {\n    const _r12 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"div\", 6);\n    ɵngcc0.ɵɵlistener(\"click\", function MatTabGroup_div_2_Template_div_click_0_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r12); const tab_r4 = restoredCtx.$implicit; const i_r5 = restoredCtx.index; const ctx_r11 = ɵngcc0.ɵɵnextContext(); const _r0 = ɵngcc0.ɵɵreference(1); return ctx_r11._handleClick(tab_r4, _r0, i_r5); })(\"cdkFocusChange\", function MatTabGroup_div_2_Template_div_cdkFocusChange_0_listener($event) { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r12); const i_r5 = restoredCtx.index; const ctx_r13 = ɵngcc0.ɵɵnextContext(); return ctx_r13._tabFocusChanged($event, i_r5); });\n    ɵngcc0.ɵɵelementStart(1, \"div\", 7);\n    ɵngcc0.ɵɵtemplate(2, MatTabGroup_div_2_ng_template_2_Template, 1, 1, \"ng-template\", 8);\n    ɵngcc0.ɵɵtemplate(3, MatTabGroup_div_2_ng_template_3_Template, 1, 1, \"ng-template\", 8);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const tab_r4 = ctx.$implicit;\n    const i_r5 = ctx.index;\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassProp(\"mat-tab-label-active\", ctx_r1.selectedIndex == i_r5);\n    ɵngcc0.ɵɵproperty(\"id\", ctx_r1._getTabLabelId(i_r5))(\"disabled\", tab_r4.disabled)(\"matRippleDisabled\", tab_r4.disabled || ctx_r1.disableRipple);\n    ɵngcc0.ɵɵattribute(\"tabIndex\", ctx_r1._getTabIndex(tab_r4, i_r5))(\"aria-posinset\", i_r5 + 1)(\"aria-setsize\", ctx_r1._tabs.length)(\"aria-controls\", ctx_r1._getTabContentId(i_r5))(\"aria-selected\", ctx_r1.selectedIndex == i_r5)(\"aria-label\", tab_r4.ariaLabel || null)(\"aria-labelledby\", !tab_r4.ariaLabel && tab_r4.ariaLabelledby ? tab_r4.ariaLabelledby : null);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngIf\", tab_r4.templateLabel);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !tab_r4.templateLabel);\n} }\nfunction MatTabGroup_mat_tab_body_5_Template(rf, ctx) { if (rf & 1) {\n    const _r17 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"mat-tab-body\", 10);\n    ɵngcc0.ɵɵlistener(\"_onCentered\", function MatTabGroup_mat_tab_body_5_Template_mat_tab_body__onCentered_0_listener() { ɵngcc0.ɵɵrestoreView(_r17); const ctx_r16 = ɵngcc0.ɵɵnextContext(); return ctx_r16._removeTabBodyWrapperHeight(); })(\"_onCentering\", function MatTabGroup_mat_tab_body_5_Template_mat_tab_body__onCentering_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r17); const ctx_r18 = ɵngcc0.ɵɵnextContext(); return ctx_r18._setTabBodyWrapperHeight($event); });\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const tab_r14 = ctx.$implicit;\n    const i_r15 = ctx.index;\n    const ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassProp(\"mat-tab-body-active\", ctx_r3.selectedIndex === i_r15);\n    ɵngcc0.ɵɵproperty(\"id\", ctx_r3._getTabContentId(i_r15))(\"content\", tab_r14.content)(\"position\", tab_r14.position)(\"origin\", tab_r14.origin)(\"animationDuration\", ctx_r3.animationDuration);\n    ɵngcc0.ɵɵattribute(\"tabindex\", ctx_r3.contentTabIndex != null && ctx_r3.selectedIndex === i_r15 ? ctx_r3.contentTabIndex : null)(\"aria-labelledby\", ctx_r3._getTabLabelId(i_r15));\n} }\nlet nextId = 0;\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n}\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nconst _MatTabGroupMixinBase = mixinColor(mixinDisableRipple(class {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}), 'primary');\n/**\n * Base class with all of the `MatTabGroupBase` functionality.\n * @docs-private\n */\nexport class _MatTabGroupBase extends _MatTabGroupMixinBase {\n    constructor(elementRef, _changeDetectorRef, defaultConfig, _animationMode) {\n        var _a;\n        super(elementRef);\n        this._changeDetectorRef = _changeDetectorRef;\n        this._animationMode = _animationMode;\n        /** All of the tabs that belong to the group. */\n        this._tabs = new QueryList();\n        /** The tab index that should be selected after the content has been checked. */\n        this._indexToSelect = 0;\n        /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n        this._tabBodyWrapperHeight = 0;\n        /** Subscription to tabs being added/removed. */\n        this._tabsSubscription = Subscription.EMPTY;\n        /** Subscription to changes in the tab labels. */\n        this._tabLabelSubscription = Subscription.EMPTY;\n        this._selectedIndex = null;\n        /** Position of the tab header. */\n        this.headerPosition = 'above';\n        /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n        this.selectedIndexChange = new EventEmitter();\n        /** Event emitted when focus has changed within a tab group. */\n        this.focusChange = new EventEmitter();\n        /** Event emitted when the body animation has completed */\n        this.animationDone = new EventEmitter();\n        /** Event emitted when the tab selection has changed. */\n        this.selectedTabChange = new EventEmitter(true);\n        this._groupId = nextId++;\n        this.animationDuration = defaultConfig && defaultConfig.animationDuration ?\n            defaultConfig.animationDuration : '500ms';\n        this.disablePagination = defaultConfig && defaultConfig.disablePagination != null ?\n            defaultConfig.disablePagination : false;\n        this.dynamicHeight = defaultConfig && defaultConfig.dynamicHeight != null ?\n            defaultConfig.dynamicHeight : false;\n        this.contentTabIndex = (_a = defaultConfig === null || defaultConfig === void 0 ? void 0 : defaultConfig.contentTabIndex) !== null && _a !== void 0 ? _a : null;\n    }\n    /** Whether the tab group should grow to the size of the active tab. */\n    get dynamicHeight() { return this._dynamicHeight; }\n    set dynamicHeight(value) { this._dynamicHeight = coerceBooleanProperty(value); }\n    /** The index of the active tab. */\n    get selectedIndex() { return this._selectedIndex; }\n    set selectedIndex(value) {\n        this._indexToSelect = coerceNumberProperty(value, null);\n    }\n    /** Duration for the tab animation. Will be normalized to milliseconds if no units are set. */\n    get animationDuration() { return this._animationDuration; }\n    set animationDuration(value) {\n        this._animationDuration = /^\\d+$/.test(value) ? value + 'ms' : value;\n    }\n    /**\n     * `tabindex` to be set on the inner element that wraps the tab content. Can be used for improved\n     * accessibility when the tab does not have focusable elements or if it has scrollable content.\n     * The `tabindex` will be removed automatically for inactive tabs.\n     * Read more at https://www.w3.org/TR/wai-aria-practices/examples/tabs/tabs-2/tabs.html\n     */\n    get contentTabIndex() { return this._contentTabIndex; }\n    set contentTabIndex(value) {\n        this._contentTabIndex = coerceNumberProperty(value, null);\n    }\n    /** Background color of the tab group. */\n    get backgroundColor() { return this._backgroundColor; }\n    set backgroundColor(value) {\n        const nativeElement = this._elementRef.nativeElement;\n        nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n        if (value) {\n            nativeElement.classList.add(`mat-background-${value}`);\n        }\n        this._backgroundColor = value;\n    }\n    /**\n     * After the content is checked, this component knows what tabs have been defined\n     * and what the selected index should be. This is where we can know exactly what position\n     * each tab should be in according to the new selected index, and additionally we know how\n     * a new selected tab should transition in (from the left or right).\n     */\n    ngAfterContentChecked() {\n        // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n        // the amount of tabs changes before the actual change detection runs.\n        const indexToSelect = this._indexToSelect = this._clampTabIndex(this._indexToSelect);\n        // If there is a change in selected index, emit a change event. Should not trigger if\n        // the selected index has not yet been initialized.\n        if (this._selectedIndex != indexToSelect) {\n            const isFirstRun = this._selectedIndex == null;\n            if (!isFirstRun) {\n                this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\n                // Preserve the height so page doesn't scroll up during tab change.\n                // Fixes https://stackblitz.com/edit/mat-tabs-scroll-page-top-on-tab-change\n                const wrapper = this._tabBodyWrapper.nativeElement;\n                wrapper.style.minHeight = wrapper.clientHeight + 'px';\n            }\n            // Changing these values after change detection has run\n            // since the checked content may contain references to them.\n            Promise.resolve().then(() => {\n                this._tabs.forEach((tab, index) => tab.isActive = index === indexToSelect);\n                if (!isFirstRun) {\n                    this.selectedIndexChange.emit(indexToSelect);\n                    // Clear the min-height, this was needed during tab change to avoid\n                    // unnecessary scrolling.\n                    this._tabBodyWrapper.nativeElement.style.minHeight = '';\n                }\n            });\n        }\n        // Setup the position for each tab and optionally setup an origin on the next selected tab.\n        this._tabs.forEach((tab, index) => {\n            tab.position = index - indexToSelect;\n            // If there is already a selected tab, then set up an origin for the next selected tab\n            // if it doesn't have one already.\n            if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n                tab.origin = indexToSelect - this._selectedIndex;\n            }\n        });\n        if (this._selectedIndex !== indexToSelect) {\n            this._selectedIndex = indexToSelect;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    ngAfterContentInit() {\n        this._subscribeToAllTabChanges();\n        this._subscribeToTabLabels();\n        // Subscribe to changes in the amount of tabs, in order to be\n        // able to re-render the content as new tabs are added or removed.\n        this._tabsSubscription = this._tabs.changes.subscribe(() => {\n            const indexToSelect = this._clampTabIndex(this._indexToSelect);\n            // Maintain the previously-selected tab if a new tab is added or removed and there is no\n            // explicit change that selects a different tab.\n            if (indexToSelect === this._selectedIndex) {\n                const tabs = this._tabs.toArray();\n                for (let i = 0; i < tabs.length; i++) {\n                    if (tabs[i].isActive) {\n                        // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n                        // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n                        // adding a tab within the `selectedIndexChange` event.\n                        this._indexToSelect = this._selectedIndex = i;\n                        break;\n                    }\n                }\n            }\n            this._changeDetectorRef.markForCheck();\n        });\n    }\n    /** Listens to changes in all of the tabs. */\n    _subscribeToAllTabChanges() {\n        // Since we use a query with `descendants: true` to pick up the tabs, we may end up catching\n        // some that are inside of nested tab groups. We filter them out manually by checking that\n        // the closest group to the tab is the current one.\n        this._allTabs.changes\n            .pipe(startWith(this._allTabs))\n            .subscribe((tabs) => {\n            this._tabs.reset(tabs.filter(tab => {\n                return tab._closestTabGroup === this || !tab._closestTabGroup;\n            }));\n            this._tabs.notifyOnChanges();\n        });\n    }\n    ngOnDestroy() {\n        this._tabs.destroy();\n        this._tabsSubscription.unsubscribe();\n        this._tabLabelSubscription.unsubscribe();\n    }\n    /** Re-aligns the ink bar to the selected tab element. */\n    realignInkBar() {\n        if (this._tabHeader) {\n            this._tabHeader._alignInkBarToSelectedTab();\n        }\n    }\n    /**\n     * Sets focus to a particular tab.\n     * @param index Index of the tab to be focused.\n     */\n    focusTab(index) {\n        const header = this._tabHeader;\n        if (header) {\n            header.focusIndex = index;\n        }\n    }\n    _focusChanged(index) {\n        this.focusChange.emit(this._createChangeEvent(index));\n    }\n    _createChangeEvent(index) {\n        const event = new MatTabChangeEvent;\n        event.index = index;\n        if (this._tabs && this._tabs.length) {\n            event.tab = this._tabs.toArray()[index];\n        }\n        return event;\n    }\n    /**\n     * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n     * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n     * binding to be updated, we need to subscribe to changes in it and trigger change detection\n     * manually.\n     */\n    _subscribeToTabLabels() {\n        if (this._tabLabelSubscription) {\n            this._tabLabelSubscription.unsubscribe();\n        }\n        this._tabLabelSubscription = merge(...this._tabs.map(tab => tab._stateChanges))\n            .subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n    /** Clamps the given index to the bounds of 0 and the tabs length. */\n    _clampTabIndex(index) {\n        // Note the `|| 0`, which ensures that values like NaN can't get through\n        // and which would otherwise throw the component into an infinite loop\n        // (since Math.max(NaN, 0) === NaN).\n        return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));\n    }\n    /** Returns a unique id for each tab label element */\n    _getTabLabelId(i) {\n        return `mat-tab-label-${this._groupId}-${i}`;\n    }\n    /** Returns a unique id for each tab content element */\n    _getTabContentId(i) {\n        return `mat-tab-content-${this._groupId}-${i}`;\n    }\n    /**\n     * Sets the height of the body wrapper to the height of the activating tab if dynamic\n     * height property is true.\n     */\n    _setTabBodyWrapperHeight(tabHeight) {\n        if (!this._dynamicHeight || !this._tabBodyWrapperHeight) {\n            return;\n        }\n        const wrapper = this._tabBodyWrapper.nativeElement;\n        wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n        // This conditional forces the browser to paint the height so that\n        // the animation to the new height can have an origin.\n        if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n            wrapper.style.height = tabHeight + 'px';\n        }\n    }\n    /** Removes the height of the tab body wrapper. */\n    _removeTabBodyWrapperHeight() {\n        const wrapper = this._tabBodyWrapper.nativeElement;\n        this._tabBodyWrapperHeight = wrapper.clientHeight;\n        wrapper.style.height = '';\n        this.animationDone.emit();\n    }\n    /** Handle click events, setting new selected index if appropriate. */\n    _handleClick(tab, tabHeader, index) {\n        if (!tab.disabled) {\n            this.selectedIndex = tabHeader.focusIndex = index;\n        }\n    }\n    /** Retrieves the tabindex for the tab. */\n    _getTabIndex(tab, idx) {\n        if (tab.disabled) {\n            return null;\n        }\n        return this.selectedIndex === idx ? 0 : -1;\n    }\n    /** Callback for when the focused state of a tab has changed. */\n    _tabFocusChanged(focusOrigin, index) {\n        if (focusOrigin) {\n            this._tabHeader.focusIndex = index;\n        }\n    }\n}\n_MatTabGroupBase.ɵfac = function _MatTabGroupBase_Factory(t) { return new (t || _MatTabGroupBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MAT_TABS_CONFIG, 8), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8)); };\n_MatTabGroupBase.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: _MatTabGroupBase, inputs: { headerPosition: \"headerPosition\", animationDuration: \"animationDuration\", disablePagination: \"disablePagination\", dynamicHeight: \"dynamicHeight\", contentTabIndex: \"contentTabIndex\", selectedIndex: \"selectedIndex\", backgroundColor: \"backgroundColor\" }, outputs: { selectedIndexChange: \"selectedIndexChange\", focusChange: \"focusChange\", animationDone: \"animationDone\", selectedTabChange: \"selectedTabChange\" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n_MatTabGroupBase.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_TABS_CONFIG,] }, { type: Optional }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\n_MatTabGroupBase.propDecorators = {\n    dynamicHeight: [{ type: Input }],\n    selectedIndex: [{ type: Input }],\n    headerPosition: [{ type: Input }],\n    animationDuration: [{ type: Input }],\n    contentTabIndex: [{ type: Input }],\n    disablePagination: [{ type: Input }],\n    backgroundColor: [{ type: Input }],\n    selectedIndexChange: [{ type: Output }],\n    focusChange: [{ type: Output }],\n    animationDone: [{ type: Output }],\n    selectedTabChange: [{ type: Output }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatTabGroupBase, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_TABS_CONFIG]\n            }, {\n                type: Optional\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }]; }, { headerPosition: [{\n            type: Input\n        }], selectedIndexChange: [{\n            type: Output\n        }], focusChange: [{\n            type: Output\n        }], animationDone: [{\n            type: Output\n        }], selectedTabChange: [{\n            type: Output\n        }], animationDuration: [{\n            type: Input\n        }], disablePagination: [{\n            type: Input\n        }], dynamicHeight: [{\n            type: Input\n        }], contentTabIndex: [{\n            type: Input\n        }], selectedIndex: [{\n            type: Input\n        }], backgroundColor: [{\n            type: Input\n        }] }); })();\n/**\n * Material design tab-group component. Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\nexport class MatTabGroup extends _MatTabGroupBase {\n    constructor(elementRef, changeDetectorRef, defaultConfig, animationMode) {\n        super(elementRef, changeDetectorRef, defaultConfig, animationMode);\n    }\n}\nMatTabGroup.ɵfac = function MatTabGroup_Factory(t) { return new (t || MatTabGroup)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MAT_TABS_CONFIG, 8), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8)); };\nMatTabGroup.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatTabGroup, selectors: [[\"mat-tab-group\"]], contentQueries: function MatTabGroup_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatTab, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._allTabs = _t);\n    } }, viewQuery: function MatTabGroup_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n        ɵngcc0.ɵɵviewQuery(_c1, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._tabBodyWrapper = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._tabHeader = _t.first);\n    } }, hostAttrs: [1, \"mat-tab-group\"], hostVars: 4, hostBindings: function MatTabGroup_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-tab-group-dynamic-height\", ctx.dynamicHeight)(\"mat-tab-group-inverted-header\", ctx.headerPosition === \"below\");\n    } }, inputs: { color: \"color\", disableRipple: \"disableRipple\" }, exportAs: [\"matTabGroup\"], features: [ɵngcc0.ɵɵProvidersFeature([{\n                provide: MAT_TAB_GROUP,\n                useExisting: MatTabGroup\n            }]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 6, vars: 7, consts: [[3, \"selectedIndex\", \"disableRipple\", \"disablePagination\", \"indexFocused\", \"selectFocusedIndex\"], [\"tabHeader\", \"\"], [\"class\", \"mat-tab-label mat-focus-indicator\", \"role\", \"tab\", \"matTabLabelWrapper\", \"\", \"mat-ripple\", \"\", \"cdkMonitorElementFocus\", \"\", 3, \"id\", \"mat-tab-label-active\", \"disabled\", \"matRippleDisabled\", \"click\", \"cdkFocusChange\", 4, \"ngFor\", \"ngForOf\"], [1, \"mat-tab-body-wrapper\"], [\"tabBodyWrapper\", \"\"], [\"role\", \"tabpanel\", 3, \"id\", \"mat-tab-body-active\", \"content\", \"position\", \"origin\", \"animationDuration\", \"_onCentered\", \"_onCentering\", 4, \"ngFor\", \"ngForOf\"], [\"role\", \"tab\", \"matTabLabelWrapper\", \"\", \"mat-ripple\", \"\", \"cdkMonitorElementFocus\", \"\", 1, \"mat-tab-label\", \"mat-focus-indicator\", 3, \"id\", \"disabled\", \"matRippleDisabled\", \"click\", \"cdkFocusChange\"], [1, \"mat-tab-label-content\"], [3, \"ngIf\"], [3, \"cdkPortalOutlet\"], [\"role\", \"tabpanel\", 3, \"id\", \"content\", \"position\", \"origin\", \"animationDuration\", \"_onCentered\", \"_onCentering\"]], template: function MatTabGroup_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"mat-tab-header\", 0, 1);\n        ɵngcc0.ɵɵlistener(\"indexFocused\", function MatTabGroup_Template_mat_tab_header_indexFocused_0_listener($event) { return ctx._focusChanged($event); })(\"selectFocusedIndex\", function MatTabGroup_Template_mat_tab_header_selectFocusedIndex_0_listener($event) { return ctx.selectedIndex = $event; });\n        ɵngcc0.ɵɵtemplate(2, MatTabGroup_div_2_Template, 4, 14, \"div\", 2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(3, \"div\", 3, 4);\n        ɵngcc0.ɵɵtemplate(5, MatTabGroup_mat_tab_body_5_Template, 1, 9, \"mat-tab-body\", 5);\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"selectedIndex\", ctx.selectedIndex || 0)(\"disableRipple\", ctx.disableRipple)(\"disablePagination\", ctx.disablePagination);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx._tabs);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵclassProp(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx._tabs);\n    } }, directives: [ɵngcc1.MatTabHeader, ɵngcc2.NgForOf, ɵngcc3.MatTabLabelWrapper, ɵngcc4.MatRipple, ɵngcc5.CdkMonitorFocus, ɵngcc2.NgIf, ɵngcc6.CdkPortalOutlet, ɵngcc7.MatTabBody], styles: [\".mat-tab-group{display:flex;flex-direction:column}.mat-tab-group.mat-tab-group-inverted-header{flex-direction:column-reverse}.mat-tab-label{height:48px;padding:0 24px;cursor:pointer;box-sizing:border-box;opacity:.6;min-width:160px;text-align:center;display:inline-flex;justify-content:center;align-items:center;white-space:nowrap;position:relative}.mat-tab-label:focus{outline:none}.mat-tab-label:focus:not(.mat-tab-disabled){opacity:1}.cdk-high-contrast-active .mat-tab-label:focus{outline:dotted 2px;outline-offset:-2px}.mat-tab-label.mat-tab-disabled{cursor:default}.cdk-high-contrast-active .mat-tab-label.mat-tab-disabled{opacity:.5}.mat-tab-label .mat-tab-label-content{display:inline-flex;justify-content:center;align-items:center;white-space:nowrap}.cdk-high-contrast-active .mat-tab-label{opacity:1}@media(max-width: 599px){.mat-tab-label{padding:0 12px}}@media(max-width: 959px){.mat-tab-label{padding:0 12px}}.mat-tab-group[mat-stretch-tabs]>.mat-tab-header .mat-tab-label{flex-basis:0;flex-grow:1}.mat-tab-body-wrapper{position:relative;overflow:hidden;display:flex;transition:height 500ms cubic-bezier(0.35, 0, 0.25, 1)}._mat-animation-noopable.mat-tab-body-wrapper{transition:none;animation:none}.mat-tab-body{top:0;left:0;right:0;bottom:0;position:absolute;display:block;overflow:hidden;outline:0;flex-basis:100%}.mat-tab-body.mat-tab-body-active{position:relative;overflow-x:hidden;overflow-y:auto;z-index:1;flex-grow:1}.mat-tab-group.mat-tab-group-dynamic-height .mat-tab-body.mat-tab-body-active{overflow-y:hidden}\\n\"], encapsulation: 2 });\nMatTabGroup.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_TABS_CONFIG,] }, { type: Optional }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\nMatTabGroup.propDecorators = {\n    _allTabs: [{ type: ContentChildren, args: [MatTab, { descendants: true },] }],\n    _tabBodyWrapper: [{ type: ViewChild, args: ['tabBodyWrapper',] }],\n    _tabHeader: [{ type: ViewChild, args: ['tabHeader',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTabGroup, [{\n        type: Component,\n        args: [{\n                selector: 'mat-tab-group',\n                exportAs: 'matTabGroup',\n                template: \"<mat-tab-header #tabHeader\\n               [selectedIndex]=\\\"selectedIndex || 0\\\"\\n               [disableRipple]=\\\"disableRipple\\\"\\n               [disablePagination]=\\\"disablePagination\\\"\\n               (indexFocused)=\\\"_focusChanged($event)\\\"\\n               (selectFocusedIndex)=\\\"selectedIndex = $event\\\">\\n  <div class=\\\"mat-tab-label mat-focus-indicator\\\" role=\\\"tab\\\" matTabLabelWrapper mat-ripple cdkMonitorElementFocus\\n       *ngFor=\\\"let tab of _tabs; let i = index\\\"\\n       [id]=\\\"_getTabLabelId(i)\\\"\\n       [attr.tabIndex]=\\\"_getTabIndex(tab, i)\\\"\\n       [attr.aria-posinset]=\\\"i + 1\\\"\\n       [attr.aria-setsize]=\\\"_tabs.length\\\"\\n       [attr.aria-controls]=\\\"_getTabContentId(i)\\\"\\n       [attr.aria-selected]=\\\"selectedIndex == i\\\"\\n       [attr.aria-label]=\\\"tab.ariaLabel || null\\\"\\n       [attr.aria-labelledby]=\\\"(!tab.ariaLabel && tab.ariaLabelledby) ? tab.ariaLabelledby : null\\\"\\n       [class.mat-tab-label-active]=\\\"selectedIndex == i\\\"\\n       [disabled]=\\\"tab.disabled\\\"\\n       [matRippleDisabled]=\\\"tab.disabled || disableRipple\\\"\\n       (click)=\\\"_handleClick(tab, tabHeader, i)\\\"\\n       (cdkFocusChange)=\\\"_tabFocusChanged($event, i)\\\">\\n\\n\\n    <div class=\\\"mat-tab-label-content\\\">\\n      <!-- If there is a label template, use it. -->\\n      <ng-template [ngIf]=\\\"tab.templateLabel\\\">\\n        <ng-template [cdkPortalOutlet]=\\\"tab.templateLabel\\\"></ng-template>\\n      </ng-template>\\n\\n      <!-- If there is not a label template, fall back to the text label. -->\\n      <ng-template [ngIf]=\\\"!tab.templateLabel\\\">{{tab.textLabel}}</ng-template>\\n    </div>\\n  </div>\\n</mat-tab-header>\\n\\n<div\\n  class=\\\"mat-tab-body-wrapper\\\"\\n  [class._mat-animation-noopable]=\\\"_animationMode === 'NoopAnimations'\\\"\\n  #tabBodyWrapper>\\n  <mat-tab-body role=\\\"tabpanel\\\"\\n               *ngFor=\\\"let tab of _tabs; let i = index\\\"\\n               [id]=\\\"_getTabContentId(i)\\\"\\n               [attr.tabindex]=\\\"(contentTabIndex != null && selectedIndex === i) ? contentTabIndex : null\\\"\\n               [attr.aria-labelledby]=\\\"_getTabLabelId(i)\\\"\\n               [class.mat-tab-body-active]=\\\"selectedIndex === i\\\"\\n               [content]=\\\"tab.content!\\\"\\n               [position]=\\\"tab.position!\\\"\\n               [origin]=\\\"tab.origin\\\"\\n               [animationDuration]=\\\"animationDuration\\\"\\n               (_onCentered)=\\\"_removeTabBodyWrapperHeight()\\\"\\n               (_onCentering)=\\\"_setTabBodyWrapperHeight($event)\\\">\\n  </mat-tab-body>\\n</div>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                inputs: ['color', 'disableRipple'],\n                providers: [{\n                        provide: MAT_TAB_GROUP,\n                        useExisting: MatTabGroup\n                    }],\n                host: {\n                    'class': 'mat-tab-group',\n                    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n                    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"'\n                },\n                styles: [\".mat-tab-group{display:flex;flex-direction:column}.mat-tab-group.mat-tab-group-inverted-header{flex-direction:column-reverse}.mat-tab-label{height:48px;padding:0 24px;cursor:pointer;box-sizing:border-box;opacity:.6;min-width:160px;text-align:center;display:inline-flex;justify-content:center;align-items:center;white-space:nowrap;position:relative}.mat-tab-label:focus{outline:none}.mat-tab-label:focus:not(.mat-tab-disabled){opacity:1}.cdk-high-contrast-active .mat-tab-label:focus{outline:dotted 2px;outline-offset:-2px}.mat-tab-label.mat-tab-disabled{cursor:default}.cdk-high-contrast-active .mat-tab-label.mat-tab-disabled{opacity:.5}.mat-tab-label .mat-tab-label-content{display:inline-flex;justify-content:center;align-items:center;white-space:nowrap}.cdk-high-contrast-active .mat-tab-label{opacity:1}@media(max-width: 599px){.mat-tab-label{padding:0 12px}}@media(max-width: 959px){.mat-tab-label{padding:0 12px}}.mat-tab-group[mat-stretch-tabs]>.mat-tab-header .mat-tab-label{flex-basis:0;flex-grow:1}.mat-tab-body-wrapper{position:relative;overflow:hidden;display:flex;transition:height 500ms cubic-bezier(0.35, 0, 0.25, 1)}._mat-animation-noopable.mat-tab-body-wrapper{transition:none;animation:none}.mat-tab-body{top:0;left:0;right:0;bottom:0;position:absolute;display:block;overflow:hidden;outline:0;flex-basis:100%}.mat-tab-body.mat-tab-body-active{position:relative;overflow-x:hidden;overflow-y:auto;z-index:1;flex-grow:1}.mat-tab-group.mat-tab-group-dynamic-height .mat-tab-body.mat-tab-body-active{overflow-y:hidden}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_TABS_CONFIG]\n            }, {\n                type: Optional\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }]; }, { _allTabs: [{\n            type: ContentChildren,\n            args: [MatTab, { descendants: true }]\n        }], _tabBodyWrapper: [{\n            type: ViewChild,\n            args: ['tabBodyWrapper']\n        }], _tabHeader: [{\n            type: ViewChild,\n            args: ['tabHeader']\n        }] }); })();\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Directionality } from '@angular/cdk/bidi';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, ElementRef, NgZone, Optional, QueryList, ViewChild, ViewEncapsulation, Input, Inject, Directive, } from '@angular/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { MatInkBar } from './ink-bar';\nimport { MatTabLabelWrapper } from './tab-label-wrapper';\nimport { Platform } from '@angular/cdk/platform';\nimport { MatPaginatedTabHeader } from './paginated-tab-header';\n/**\n * Base class with all of the `MatTabHeader` functionality.\n * @docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nimport * as ɵngcc3 from '@angular/cdk/platform';\nimport * as ɵngcc4 from '@angular/material/core';\nimport * as ɵngcc5 from '@angular/cdk/observers';\nimport * as ɵngcc6 from './ink-bar';\n\nconst _c0 = [\"tabListContainer\"];\nconst _c1 = [\"tabList\"];\nconst _c2 = [\"nextPaginator\"];\nconst _c3 = [\"previousPaginator\"];\nconst _c4 = [\"*\"];\nexport class _MatTabHeaderBase extends MatPaginatedTabHeader {\n    constructor(elementRef, changeDetectorRef, viewportRuler, dir, ngZone, platform, animationMode) {\n        super(elementRef, changeDetectorRef, viewportRuler, dir, ngZone, platform, animationMode);\n        this._disableRipple = false;\n    }\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value) { this._disableRipple = coerceBooleanProperty(value); }\n    _itemSelected(event) {\n        event.preventDefault();\n    }\n}\n_MatTabHeaderBase.ɵfac = function _MatTabHeaderBase_Factory(t) { return new (t || _MatTabHeaderBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Platform), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8)); };\n_MatTabHeaderBase.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: _MatTabHeaderBase, inputs: { disableRipple: \"disableRipple\" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n_MatTabHeaderBase.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: ViewportRuler },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: NgZone },\n    { type: Platform },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\n_MatTabHeaderBase.propDecorators = {\n    disableRipple: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatTabHeaderBase, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.ViewportRuler }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc0.NgZone }, { type: ɵngcc3.Platform }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }]; }, { disableRipple: [{\n            type: Input\n        }] }); })();\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\nexport class MatTabHeader extends _MatTabHeaderBase {\n    constructor(elementRef, changeDetectorRef, viewportRuler, dir, ngZone, platform, animationMode) {\n        super(elementRef, changeDetectorRef, viewportRuler, dir, ngZone, platform, animationMode);\n    }\n}\nMatTabHeader.ɵfac = function MatTabHeader_Factory(t) { return new (t || MatTabHeader)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Platform), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8)); };\nMatTabHeader.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatTabHeader, selectors: [[\"mat-tab-header\"]], contentQueries: function MatTabHeader_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatTabLabelWrapper, 4);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._items = _t);\n    } }, viewQuery: function MatTabHeader_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(MatInkBar, 7);\n        ɵngcc0.ɵɵviewQuery(_c0, 7);\n        ɵngcc0.ɵɵviewQuery(_c1, 7);\n        ɵngcc0.ɵɵviewQuery(_c2, 5);\n        ɵngcc0.ɵɵviewQuery(_c3, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._inkBar = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._tabListContainer = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._tabList = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._nextPaginator = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._previousPaginator = _t.first);\n    } }, hostAttrs: [1, \"mat-tab-header\"], hostVars: 4, hostBindings: function MatTabHeader_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-tab-header-pagination-controls-enabled\", ctx._showPaginationControls)(\"mat-tab-header-rtl\", ctx._getLayoutDirection() == \"rtl\");\n    } }, inputs: { selectedIndex: \"selectedIndex\" }, outputs: { selectFocusedIndex: \"selectFocusedIndex\", indexFocused: \"indexFocused\" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c4, decls: 13, vars: 8, consts: [[\"aria-hidden\", \"true\", \"mat-ripple\", \"\", 1, \"mat-tab-header-pagination\", \"mat-tab-header-pagination-before\", \"mat-elevation-z4\", 3, \"matRippleDisabled\", \"click\", \"mousedown\", \"touchend\"], [\"previousPaginator\", \"\"], [1, \"mat-tab-header-pagination-chevron\"], [1, \"mat-tab-label-container\", 3, \"keydown\"], [\"tabListContainer\", \"\"], [\"role\", \"tablist\", 1, \"mat-tab-list\", 3, \"cdkObserveContent\"], [\"tabList\", \"\"], [1, \"mat-tab-labels\"], [\"aria-hidden\", \"true\", \"mat-ripple\", \"\", 1, \"mat-tab-header-pagination\", \"mat-tab-header-pagination-after\", \"mat-elevation-z4\", 3, \"matRippleDisabled\", \"mousedown\", \"click\", \"touchend\"], [\"nextPaginator\", \"\"]], template: function MatTabHeader_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n        ɵngcc0.ɵɵlistener(\"click\", function MatTabHeader_Template_div_click_0_listener() { return ctx._handlePaginatorClick(\"before\"); })(\"mousedown\", function MatTabHeader_Template_div_mousedown_0_listener($event) { return ctx._handlePaginatorPress(\"before\", $event); })(\"touchend\", function MatTabHeader_Template_div_touchend_0_listener() { return ctx._stopInterval(); });\n        ɵngcc0.ɵɵelement(2, \"div\", 2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(3, \"div\", 3, 4);\n        ɵngcc0.ɵɵlistener(\"keydown\", function MatTabHeader_Template_div_keydown_3_listener($event) { return ctx._handleKeydown($event); });\n        ɵngcc0.ɵɵelementStart(5, \"div\", 5, 6);\n        ɵngcc0.ɵɵlistener(\"cdkObserveContent\", function MatTabHeader_Template_div_cdkObserveContent_5_listener() { return ctx._onContentChanges(); });\n        ɵngcc0.ɵɵelementStart(7, \"div\", 7);\n        ɵngcc0.ɵɵprojection(8);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(9, \"mat-ink-bar\");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(10, \"div\", 8, 9);\n        ɵngcc0.ɵɵlistener(\"mousedown\", function MatTabHeader_Template_div_mousedown_10_listener($event) { return ctx._handlePaginatorPress(\"after\", $event); })(\"click\", function MatTabHeader_Template_div_click_10_listener() { return ctx._handlePaginatorClick(\"after\"); })(\"touchend\", function MatTabHeader_Template_div_touchend_10_listener() { return ctx._stopInterval(); });\n        ɵngcc0.ɵɵelement(12, \"div\", 2);\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-tab-header-pagination-disabled\", ctx._disableScrollBefore);\n        ɵngcc0.ɵɵproperty(\"matRippleDisabled\", ctx._disableScrollBefore || ctx.disableRipple);\n        ɵngcc0.ɵɵadvance(5);\n        ɵngcc0.ɵɵclassProp(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n        ɵngcc0.ɵɵadvance(5);\n        ɵngcc0.ɵɵclassProp(\"mat-tab-header-pagination-disabled\", ctx._disableScrollAfter);\n        ɵngcc0.ɵɵproperty(\"matRippleDisabled\", ctx._disableScrollAfter || ctx.disableRipple);\n    } }, directives: [ɵngcc4.MatRipple, ɵngcc5.CdkObserveContent, ɵngcc6.MatInkBar], styles: [\".mat-tab-header{display:flex;overflow:hidden;position:relative;flex-shrink:0}.mat-tab-header-pagination{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;position:relative;display:none;justify-content:center;align-items:center;min-width:32px;cursor:pointer;z-index:2;-webkit-tap-highlight-color:transparent;touch-action:none}.mat-tab-header-pagination-controls-enabled .mat-tab-header-pagination{display:flex}.mat-tab-header-pagination-before,.mat-tab-header-rtl .mat-tab-header-pagination-after{padding-left:4px}.mat-tab-header-pagination-before .mat-tab-header-pagination-chevron,.mat-tab-header-rtl .mat-tab-header-pagination-after .mat-tab-header-pagination-chevron{transform:rotate(-135deg)}.mat-tab-header-rtl .mat-tab-header-pagination-before,.mat-tab-header-pagination-after{padding-right:4px}.mat-tab-header-rtl .mat-tab-header-pagination-before .mat-tab-header-pagination-chevron,.mat-tab-header-pagination-after .mat-tab-header-pagination-chevron{transform:rotate(45deg)}.mat-tab-header-pagination-chevron{border-style:solid;border-width:2px 2px 0 0;content:\\\"\\\";height:8px;width:8px}.mat-tab-header-pagination-disabled{box-shadow:none;cursor:default}.mat-tab-list{flex-grow:1;position:relative;transition:transform 500ms cubic-bezier(0.35, 0, 0.25, 1)}.mat-ink-bar{position:absolute;bottom:0;height:2px;transition:500ms cubic-bezier(0.35, 0, 0.25, 1)}._mat-animation-noopable.mat-ink-bar{transition:none;animation:none}.mat-tab-group-inverted-header .mat-ink-bar{bottom:auto;top:0}.cdk-high-contrast-active .mat-ink-bar{outline:solid 2px;height:0}.mat-tab-labels{display:flex}[mat-align-tabs=center]>.mat-tab-header .mat-tab-labels{justify-content:center}[mat-align-tabs=end]>.mat-tab-header .mat-tab-labels{justify-content:flex-end}.mat-tab-label-container{display:flex;flex-grow:1;overflow:hidden;z-index:1}._mat-animation-noopable.mat-tab-list{transition:none;animation:none}.mat-tab-label{height:48px;padding:0 24px;cursor:pointer;box-sizing:border-box;opacity:.6;min-width:160px;text-align:center;display:inline-flex;justify-content:center;align-items:center;white-space:nowrap;position:relative}.mat-tab-label:focus{outline:none}.mat-tab-label:focus:not(.mat-tab-disabled){opacity:1}.cdk-high-contrast-active .mat-tab-label:focus{outline:dotted 2px;outline-offset:-2px}.mat-tab-label.mat-tab-disabled{cursor:default}.cdk-high-contrast-active .mat-tab-label.mat-tab-disabled{opacity:.5}.mat-tab-label .mat-tab-label-content{display:inline-flex;justify-content:center;align-items:center;white-space:nowrap}.cdk-high-contrast-active .mat-tab-label{opacity:1}@media(max-width: 599px){.mat-tab-label{min-width:72px}}\\n\"], encapsulation: 2 });\nMatTabHeader.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: ViewportRuler },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: NgZone },\n    { type: Platform },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\nMatTabHeader.propDecorators = {\n    _items: [{ type: ContentChildren, args: [MatTabLabelWrapper, { descendants: false },] }],\n    _inkBar: [{ type: ViewChild, args: [MatInkBar, { static: true },] }],\n    _tabListContainer: [{ type: ViewChild, args: ['tabListContainer', { static: true },] }],\n    _tabList: [{ type: ViewChild, args: ['tabList', { static: true },] }],\n    _nextPaginator: [{ type: ViewChild, args: ['nextPaginator',] }],\n    _previousPaginator: [{ type: ViewChild, args: ['previousPaginator',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTabHeader, [{\n        type: Component,\n        args: [{\n                selector: 'mat-tab-header',\n                template: \"<div class=\\\"mat-tab-header-pagination mat-tab-header-pagination-before mat-elevation-z4\\\"\\n     #previousPaginator\\n     aria-hidden=\\\"true\\\"\\n     mat-ripple [matRippleDisabled]=\\\"_disableScrollBefore || disableRipple\\\"\\n     [class.mat-tab-header-pagination-disabled]=\\\"_disableScrollBefore\\\"\\n     (click)=\\\"_handlePaginatorClick('before')\\\"\\n     (mousedown)=\\\"_handlePaginatorPress('before', $event)\\\"\\n     (touchend)=\\\"_stopInterval()\\\">\\n  <div class=\\\"mat-tab-header-pagination-chevron\\\"></div>\\n</div>\\n\\n<div class=\\\"mat-tab-label-container\\\" #tabListContainer (keydown)=\\\"_handleKeydown($event)\\\">\\n  <div\\n    #tabList\\n    class=\\\"mat-tab-list\\\"\\n    [class._mat-animation-noopable]=\\\"_animationMode === 'NoopAnimations'\\\"\\n    role=\\\"tablist\\\"\\n    (cdkObserveContent)=\\\"_onContentChanges()\\\">\\n    <div class=\\\"mat-tab-labels\\\">\\n      <ng-content></ng-content>\\n    </div>\\n    <mat-ink-bar></mat-ink-bar>\\n  </div>\\n</div>\\n\\n<div class=\\\"mat-tab-header-pagination mat-tab-header-pagination-after mat-elevation-z4\\\"\\n     #nextPaginator\\n     aria-hidden=\\\"true\\\"\\n     mat-ripple [matRippleDisabled]=\\\"_disableScrollAfter || disableRipple\\\"\\n     [class.mat-tab-header-pagination-disabled]=\\\"_disableScrollAfter\\\"\\n     (mousedown)=\\\"_handlePaginatorPress('after', $event)\\\"\\n     (click)=\\\"_handlePaginatorClick('after')\\\"\\n     (touchend)=\\\"_stopInterval()\\\">\\n  <div class=\\\"mat-tab-header-pagination-chevron\\\"></div>\\n</div>\\n\",\n                inputs: ['selectedIndex'],\n                outputs: ['selectFocusedIndex', 'indexFocused'],\n                encapsulation: ViewEncapsulation.None,\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                host: {\n                    'class': 'mat-tab-header',\n                    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n                    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\"\n                },\n                styles: [\".mat-tab-header{display:flex;overflow:hidden;position:relative;flex-shrink:0}.mat-tab-header-pagination{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;position:relative;display:none;justify-content:center;align-items:center;min-width:32px;cursor:pointer;z-index:2;-webkit-tap-highlight-color:transparent;touch-action:none}.mat-tab-header-pagination-controls-enabled .mat-tab-header-pagination{display:flex}.mat-tab-header-pagination-before,.mat-tab-header-rtl .mat-tab-header-pagination-after{padding-left:4px}.mat-tab-header-pagination-before .mat-tab-header-pagination-chevron,.mat-tab-header-rtl .mat-tab-header-pagination-after .mat-tab-header-pagination-chevron{transform:rotate(-135deg)}.mat-tab-header-rtl .mat-tab-header-pagination-before,.mat-tab-header-pagination-after{padding-right:4px}.mat-tab-header-rtl .mat-tab-header-pagination-before .mat-tab-header-pagination-chevron,.mat-tab-header-pagination-after .mat-tab-header-pagination-chevron{transform:rotate(45deg)}.mat-tab-header-pagination-chevron{border-style:solid;border-width:2px 2px 0 0;content:\\\"\\\";height:8px;width:8px}.mat-tab-header-pagination-disabled{box-shadow:none;cursor:default}.mat-tab-list{flex-grow:1;position:relative;transition:transform 500ms cubic-bezier(0.35, 0, 0.25, 1)}.mat-ink-bar{position:absolute;bottom:0;height:2px;transition:500ms cubic-bezier(0.35, 0, 0.25, 1)}._mat-animation-noopable.mat-ink-bar{transition:none;animation:none}.mat-tab-group-inverted-header .mat-ink-bar{bottom:auto;top:0}.cdk-high-contrast-active .mat-ink-bar{outline:solid 2px;height:0}.mat-tab-labels{display:flex}[mat-align-tabs=center]>.mat-tab-header .mat-tab-labels{justify-content:center}[mat-align-tabs=end]>.mat-tab-header .mat-tab-labels{justify-content:flex-end}.mat-tab-label-container{display:flex;flex-grow:1;overflow:hidden;z-index:1}._mat-animation-noopable.mat-tab-list{transition:none;animation:none}.mat-tab-label{height:48px;padding:0 24px;cursor:pointer;box-sizing:border-box;opacity:.6;min-width:160px;text-align:center;display:inline-flex;justify-content:center;align-items:center;white-space:nowrap;position:relative}.mat-tab-label:focus{outline:none}.mat-tab-label:focus:not(.mat-tab-disabled){opacity:1}.cdk-high-contrast-active .mat-tab-label:focus{outline:dotted 2px;outline-offset:-2px}.mat-tab-label.mat-tab-disabled{cursor:default}.cdk-high-contrast-active .mat-tab-label.mat-tab-disabled{opacity:.5}.mat-tab-label .mat-tab-label-content{display:inline-flex;justify-content:center;align-items:center;white-space:nowrap}.cdk-high-contrast-active .mat-tab-label{opacity:1}@media(max-width: 599px){.mat-tab-label{min-width:72px}}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.ViewportRuler }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc0.NgZone }, { type: ɵngcc3.Platform }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }]; }, { _items: [{\n            type: ContentChildren,\n            args: [MatTabLabelWrapper, { descendants: false }]\n        }], _inkBar: [{\n            type: ViewChild,\n            args: [MatInkBar, { static: true }]\n        }], _tabListContainer: [{\n            type: ViewChild,\n            args: ['tabListContainer', { static: true }]\n        }], _tabList: [{\n            type: ViewChild,\n            args: ['tabList', { static: true }]\n        }], _nextPaginator: [{\n            type: ViewChild,\n            args: ['nextPaginator']\n        }], _previousPaginator: [{\n            type: ViewChild,\n            args: ['previousPaginator']\n        }] }); })();\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Directive, ElementRef } from '@angular/core';\nimport { mixinDisabled } from '@angular/material/core';\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nimport * as ɵngcc0 from '@angular/core';\nconst _MatTabLabelWrapperBase = mixinDisabled(class {\n});\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperBase {\n    constructor(elementRef) {\n        super();\n        this.elementRef = elementRef;\n    }\n    /** Sets focus on the wrapper element */\n    focus() {\n        this.elementRef.nativeElement.focus();\n    }\n    getOffsetLeft() {\n        return this.elementRef.nativeElement.offsetLeft;\n    }\n    getOffsetWidth() {\n        return this.elementRef.nativeElement.offsetWidth;\n    }\n}\nMatTabLabelWrapper.ɵfac = function MatTabLabelWrapper_Factory(t) { return new (t || MatTabLabelWrapper)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nMatTabLabelWrapper.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatTabLabelWrapper, selectors: [[\"\", \"matTabLabelWrapper\", \"\"]], hostVars: 3, hostBindings: function MatTabLabelWrapper_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-disabled\", !!ctx.disabled);\n        ɵngcc0.ɵɵclassProp(\"mat-tab-disabled\", ctx.disabled);\n    } }, inputs: { disabled: \"disabled\" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\nMatTabLabelWrapper.ctorParameters = () => [\n    { type: ElementRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTabLabelWrapper, [{\n        type: Directive,\n        args: [{\n                selector: '[matTabLabelWrapper]',\n                inputs: ['disabled'],\n                host: {\n                    '[class.mat-tab-disabled]': 'disabled',\n                    '[attr.aria-disabled]': '!!disabled'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, null); })();\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFiLWxhYmVsLXdyYXBwZXIuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9tYXRlcmlhbC90YWJzL3RhYi1sYWJlbC13cmFwcGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFHSCxPQUFPLEVBQUMsU0FBUyxFQUFFLFVBQVUsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNwRCxPQUFPLEVBQWEsYUFBYSxFQUFDLE1BQU0sd0JBQXdCLENBQUM7QUFHakUseURBQXlEO0FBQ3pELG9CQUFvQjs7QUFDcEIsTUFBTSx1QkFBdUIsR0FBRyxhQUFhLENBQUM7QUFBUSxDQUFBLENBQUMsQ0FBQztBQUV4RDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBU0gsTUFBTSxPQUFPLGtCQUFtQixTQUFRLHVCQUF1QjtBQUFHLElBQ2hFLFlBQW1CLFVBQXNCO0FBQzNDLFFBQUksS0FBSyxFQUFFLENBQUM7QUFDWixRQUZxQixlQUFVLEdBQVYsVUFBVSxDQUFZO0FBQUMsSUFFMUMsQ0FBQztBQUNILElBQ0Usd0NBQXdDO0FBQzFDLElBQUUsS0FBSztBQUFLLFFBQ1IsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsS0FBSyxFQUFFLENBQUM7QUFDMUMsSUFBRSxDQUFDO0FBQ0gsSUFDRSxhQUFhO0FBQUssUUFDaEIsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUM7QUFDcEQsSUFBRSxDQUFDO0FBQ0gsSUFDRSxjQUFjO0FBQUssUUFDakIsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUM7QUFDckQsSUFBRSxDQUFDO0FBQ0g7OENBekJDLFNBQVMsU0FBQyxrQkFDVCxRQUFRLEVBQUUsc0JBQXNCLGtCQUNoQyxNQUFNLEVBQUUsQ0FBQyxVQUFVLENBQUM7aUJBQ3BCLElBQUksRUFBRSxzQkFDSiwwQkFBMEIsRUFBRSxVQUFVLHNCQUN0QyxzQkFBc0IsRUFBRSxZQUFZLG1CQUNyQyxjQUNGOzs7NEZBQ0k7QUFBQztBQUE0QyxZQXBCL0IsVUFBVTtBQUFHOzs7Ozs7Ozs7OzsyRUFBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB7Qm9vbGVhbklucHV0fSBmcm9tICdAYW5ndWxhci9jZGsvY29lcmNpb24nO1xuaW1wb3J0IHtEaXJlY3RpdmUsIEVsZW1lbnRSZWZ9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtDYW5EaXNhYmxlLCBtaXhpbkRpc2FibGVkfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9jb3JlJztcblxuXG4vLyBCb2lsZXJwbGF0ZSBmb3IgYXBwbHlpbmcgbWl4aW5zIHRvIE1hdFRhYkxhYmVsV3JhcHBlci5cbi8qKiBAZG9jcy1wcml2YXRlICovXG5jb25zdCBfTWF0VGFiTGFiZWxXcmFwcGVyQmFzZSA9IG1peGluRGlzYWJsZWQoY2xhc3Mge30pO1xuXG4vKipcbiAqIFVzZWQgaW4gdGhlIGBtYXQtdGFiLWdyb3VwYCB2aWV3IHRvIGRpc3BsYXkgdGFiIGxhYmVscy5cbiAqIEBkb2NzLXByaXZhdGVcbiAqL1xuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW21hdFRhYkxhYmVsV3JhcHBlcl0nLFxuICBpbnB1dHM6IFsnZGlzYWJsZWQnXSxcbiAgaG9zdDoge1xuICAgICdbY2xhc3MubWF0LXRhYi1kaXNhYmxlZF0nOiAnZGlzYWJsZWQnLFxuICAgICdbYXR0ci5hcmlhLWRpc2FibGVkXSc6ICchIWRpc2FibGVkJyxcbiAgfVxufSlcbmV4cG9ydCBjbGFzcyBNYXRUYWJMYWJlbFdyYXBwZXIgZXh0ZW5kcyBfTWF0VGFiTGFiZWxXcmFwcGVyQmFzZSBpbXBsZW1lbnRzIENhbkRpc2FibGUge1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgZWxlbWVudFJlZjogRWxlbWVudFJlZikge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICAvKiogU2V0cyBmb2N1cyBvbiB0aGUgd3JhcHBlciBlbGVtZW50ICovXG4gIGZvY3VzKCk6IHZvaWQge1xuICAgIHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LmZvY3VzKCk7XG4gIH1cblxuICBnZXRPZmZzZXRMZWZ0KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50Lm9mZnNldExlZnQ7XG4gIH1cblxuICBnZXRPZmZzZXRXaWR0aCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5vZmZzZXRXaWR0aDtcbiAgfVxuXG4gIHN0YXRpYyBuZ0FjY2VwdElucHV0VHlwZV9kaXNhYmxlZDogQm9vbGVhbklucHV0O1xufVxuIl19","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Directive, InjectionToken } from '@angular/core';\nimport { CdkPortal } from '@angular/cdk/portal';\n/**\n * Injection token that can be used to reference instances of `MatTabLabel`. It serves as\n * alternative token to the actual `MatTabLabel` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nimport * as ɵngcc0 from '@angular/core';\nexport const MAT_TAB_LABEL = new InjectionToken('MatTabLabel');\n/** Used to flag tab labels for use with the portal directive */\nexport class MatTabLabel extends CdkPortal {\n}\nMatTabLabel.ɵfac = /*@__PURE__*/ function () { let ɵMatTabLabel_BaseFactory; return function MatTabLabel_Factory(t) { return (ɵMatTabLabel_BaseFactory || (ɵMatTabLabel_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTabLabel)))(t || MatTabLabel); }; }();\nMatTabLabel.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatTabLabel, selectors: [[\"\", \"mat-tab-label\", \"\"], [\"\", \"matTabLabel\", \"\"]], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MAT_TAB_LABEL, useExisting: MatTabLabel }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTabLabel, [{\n        type: Directive,\n        args: [{\n                selector: '[mat-tab-label], [matTabLabel]',\n                providers: [{ provide: MAT_TAB_LABEL, useExisting: MatTabLabel }]\n            }]\n    }], null, null); })();\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFiLWxhYmVsLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvbWF0ZXJpYWwvdGFicy90YWItbGFiZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUVILE9BQU8sRUFBQyxTQUFTLEVBQUUsY0FBYyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3hELE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxxQkFBcUIsQ0FBQztBQUU5QztBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBQ0gsTUFBTSxDQUFDLE1BQU0sYUFBYSxHQUFHLElBQUksY0FBYyxDQUFjLGFBQWEsQ0FBQyxDQUFDO0FBRTVFLGdFQUFnRTtBQUtoRSxNQUFNLE9BQU8sV0FBWSxTQUFRLFNBQVM7QUFBRzt1Q0FKNUMsU0FBUyxTQUFDLGtCQUNULFFBQVEsRUFBRSxnQ0FBZ0Msa0JBQzFDLFNBQVMsRUFBRSxDQUFDLEVBQUMsT0FBTyxFQUFFLGFBQWEsRUFBRSxXQUFXLEVBQUUsV0FBVyxFQUFDLENBQUMsZUFDaEU7Ozs7Ozs7OzBCQUNJO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuaW1wb3J0IHtEaXJlY3RpdmUsIEluamVjdGlvblRva2VufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7Q2RrUG9ydGFsfSBmcm9tICdAYW5ndWxhci9jZGsvcG9ydGFsJztcblxuLyoqXG4gKiBJbmplY3Rpb24gdG9rZW4gdGhhdCBjYW4gYmUgdXNlZCB0byByZWZlcmVuY2UgaW5zdGFuY2VzIG9mIGBNYXRUYWJMYWJlbGAuIEl0IHNlcnZlcyBhc1xuICogYWx0ZXJuYXRpdmUgdG9rZW4gdG8gdGhlIGFjdHVhbCBgTWF0VGFiTGFiZWxgIGNsYXNzIHdoaWNoIGNvdWxkIGNhdXNlIHVubmVjZXNzYXJ5XG4gKiByZXRlbnRpb24gb2YgdGhlIGNsYXNzIGFuZCBpdHMgZGlyZWN0aXZlIG1ldGFkYXRhLlxuICovXG5leHBvcnQgY29uc3QgTUFUX1RBQl9MQUJFTCA9IG5ldyBJbmplY3Rpb25Ub2tlbjxNYXRUYWJMYWJlbD4oJ01hdFRhYkxhYmVsJyk7XG5cbi8qKiBVc2VkIHRvIGZsYWcgdGFiIGxhYmVscyBmb3IgdXNlIHdpdGggdGhlIHBvcnRhbCBkaXJlY3RpdmUgKi9cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1ttYXQtdGFiLWxhYmVsXSwgW21hdFRhYkxhYmVsXScsXG4gIHByb3ZpZGVyczogW3twcm92aWRlOiBNQVRfVEFCX0xBQkVMLCB1c2VFeGlzdGluZzogTWF0VGFiTGFiZWx9XSxcbn0pXG5leHBvcnQgY2xhc3MgTWF0VGFiTGFiZWwgZXh0ZW5kcyBDZGtQb3J0YWwge31cbiJdfQ==","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { ChangeDetectionStrategy, Component, ContentChild, Input, TemplateRef, ViewChild, ViewContainerRef, ViewEncapsulation, InjectionToken, Inject, Optional, } from '@angular/core';\nimport { mixinDisabled } from '@angular/material/core';\nimport { Subject } from 'rxjs';\nimport { MAT_TAB_CONTENT } from './tab-content';\nimport { MAT_TAB_LABEL, MatTabLabel } from './tab-label';\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nimport * as ɵngcc0 from '@angular/core';\n\nfunction MatTab_ng_template_0_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0);\n} }\nconst _c0 = [\"*\"];\nconst _MatTabBase = mixinDisabled(class {\n});\n/**\n * Used to provide a tab group to a tab without causing a circular dependency.\n * @docs-private\n */\nexport const MAT_TAB_GROUP = new InjectionToken('MAT_TAB_GROUP');\nexport class MatTab extends _MatTabBase {\n    constructor(_viewContainerRef, _closestTabGroup) {\n        super();\n        this._viewContainerRef = _viewContainerRef;\n        this._closestTabGroup = _closestTabGroup;\n        /** Plain text label for the tab, used when there is no template label. */\n        this.textLabel = '';\n        /** Portal that will be the hosted content of the tab */\n        this._contentPortal = null;\n        /** Emits whenever the internal state of the tab changes. */\n        this._stateChanges = new Subject();\n        /**\n         * The relatively indexed position where 0 represents the center, negative is left, and positive\n         * represents the right.\n         */\n        this.position = null;\n        /**\n         * The initial relatively index origin of the tab if it was created and selected after there\n         * was already a selected tab. Provides context of what position the tab should originate from.\n         */\n        this.origin = null;\n        /**\n         * Whether the tab is currently active.\n         */\n        this.isActive = false;\n    }\n    /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n    get templateLabel() { return this._templateLabel; }\n    set templateLabel(value) { this._setTemplateLabelInput(value); }\n    /** @docs-private */\n    get content() {\n        return this._contentPortal;\n    }\n    ngOnChanges(changes) {\n        if (changes.hasOwnProperty('textLabel') || changes.hasOwnProperty('disabled')) {\n            this._stateChanges.next();\n        }\n    }\n    ngOnDestroy() {\n        this._stateChanges.complete();\n    }\n    ngOnInit() {\n        this._contentPortal = new TemplatePortal(this._explicitContent || this._implicitContent, this._viewContainerRef);\n    }\n    /**\n     * This has been extracted to a util because of TS 4 and VE.\n     * View Engine doesn't support property rename inheritance.\n     * TS 4.0 doesn't allow properties to override accessors or vice-versa.\n     * @docs-private\n     */\n    _setTemplateLabelInput(value) {\n        // Only update the templateLabel via query if there is actually\n        // a MatTabLabel found. This works around an issue where a user may have\n        // manually set `templateLabel` during creation mode, which would then get clobbered\n        // by `undefined` when this query resolves.\n        if (value) {\n            this._templateLabel = value;\n        }\n    }\n}\nMatTab.ɵfac = function MatTab_Factory(t) { return new (t || MatTab)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(MAT_TAB_GROUP, 8)); };\nMatTab.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatTab, selectors: [[\"mat-tab\"]], contentQueries: function MatTab_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_TAB_LABEL, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_TAB_CONTENT, 7, TemplateRef);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.templateLabel = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._explicitContent = _t.first);\n    } }, viewQuery: function MatTab_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(TemplateRef, 7);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._implicitContent = _t.first);\n    } }, inputs: { disabled: \"disabled\", textLabel: [\"label\", \"textLabel\"], ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"] }, exportAs: [\"matTab\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c0, decls: 1, vars: 0, template: function MatTab_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, MatTab_ng_template_0_Template, 1, 0, \"ng-template\");\n    } }, encapsulation: 2 });\nMatTab.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_TAB_GROUP,] }, { type: Optional }] }\n];\nMatTab.propDecorators = {\n    templateLabel: [{ type: ContentChild, args: [MAT_TAB_LABEL,] }],\n    _explicitContent: [{ type: ContentChild, args: [MAT_TAB_CONTENT, { read: TemplateRef, static: true },] }],\n    _implicitContent: [{ type: ViewChild, args: [TemplateRef, { static: true },] }],\n    textLabel: [{ type: Input, args: ['label',] }],\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTab, [{\n        type: Component,\n        args: [{\n                selector: 'mat-tab',\n                template: \"<!-- Create a template for the content of the <mat-tab> so that we can grab a reference to this\\n    TemplateRef and use it in a Portal to render the tab content in the appropriate place in the\\n    tab-group. -->\\n<ng-template><ng-content></ng-content></ng-template>\\n\",\n                inputs: ['disabled'],\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None,\n                exportAs: 'matTab'\n            }]\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_TAB_GROUP]\n            }, {\n                type: Optional\n            }] }]; }, { textLabel: [{\n            type: Input,\n            args: ['label']\n        }], templateLabel: [{\n            type: ContentChild,\n            args: [MAT_TAB_LABEL]\n        }], _explicitContent: [{\n            type: ContentChild,\n            args: [MAT_TAB_CONTENT, { read: TemplateRef, static: true }]\n        }], _implicitContent: [{\n            type: ViewChild,\n            args: [TemplateRef, { static: true }]\n        }], ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }] }); })();\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,"],"sourceRoot":""}