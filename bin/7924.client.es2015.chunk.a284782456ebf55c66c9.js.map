{"version":3,"sources":["webpack://ressurectit.github.io/./app/services/api/source/source.service.ts","webpack://ressurectit.github.io/./app/modules/asSource/pipes/asSource/asSource.pipe.ts","webpack://ressurectit.github.io/./app/misc/rxjsOperators/handle404.ts","webpack://ressurectit.github.io/./app/modules/sourceCode/components/sourceCode/sourceCode.component.html","webpack://ressurectit.github.io/./app/modules/sourceCode/components/sourceCode/sourceCode.component.ts","webpack://ressurectit.github.io/./app/samples/grid/groupedMetadata/groupedMetadata.component.ts","webpack://ressurectit.github.io/./app/samples/grid/groupedMetadata/groupedMetadata.component.html","webpack://ressurectit.github.io/./app/samples/grid/groupedMetadata/groupedMetadataSample.component.html","webpack://ressurectit.github.io/./app/samples/grid/groupedMetadata/groupedMetadataSample.component.ts"],"names":["SourceService","getSource","_path","C","Observable","AsSourcePipe","constructor","_sourceSvc","transform","path","type","source","this","pipe","catchError","error","status","of","throwError","toPromise","SourceCodeComponent","showSources","GroupedMetadataComponent","GroupedMetadataSampleComponent","_dataSvc","gridOptions","plugins","contentRenderer","options","headerRenderer","dataLoader","dataCallback","_getData","bind","paging","itemsPerPageValues","initialItemsPerPage","page","itemsPerPage","ordering","reqOrdering","direction","orderByDirection","sort","orderBy","result","getData","size","data","content","totalCount","totalElements","D"],"mappings":"qrBASaA,EAAa,cAAS,KASxBC,UAAwBC,GAE3B,OAAO,O,qEAXFF,KAAa,GAAbA,I,uBAAAA,EAAa,QAAbA,EAAa,gBAFD,SAWrB,IAHC,IAAAG,MACA,OAAS,YACT,QAAI,W,EACa,E,GAAA,QAAK,Q,yGAAwBC,EAAA,I,8BATtCJ,EAAa,IADzB,OAAQ,wFACIA,G,2DCGN,MAAMK,EAGTC,YAAoBC,GAAA,KAAAA,aAWPC,UAAUC,EAAWC,EAAe,c,qCAE7C,IAAIC,QAAeC,KAAKL,WAAWN,UAAUQ,GACxCI,MCrBDF,GAEGA,EAAOE,MAAK,EAAAC,EAAA,IAAWC,GAEP,KAAhBA,EAAMC,QAEE,EAAAC,MAAG,OAGP,EAAAC,EAAA,GAAWH,QDajBI,YAEL,MAAgB,UAAGT,MACzBC,UAAU,aAAeF,a,iUArBdJ,GAAY,Y,mCAAZA,EAAY,W,qLEZzB,gBACI,QACJ,Q,KAFwC,0BCcjC,MAAMe,EARb,cAeW,KAAAC,aAAuB,G,iCAPrBD,I,kBAAAA,EAAmB,+C,MAAA,0K,ODdhC,qBAIA,cAAgF,+DAC5E,iBACJ,Q,MANM,0BAIe,wC,+MCOL,CAAC,MAAkB,qB,8NCA5B,MAAME,G,iCAAAA,I,kBAAAA,EAAwB,gPCXrC,aAAI,+BAAqB,OAEzB,sBACI,wBACI,oBACI,gB,mCACJ,OAEA,oBACI,gB,qCACJ,OAEA,qBACI,iB,qCACJ,OACJ,OACJ,OAEA,oC,MAbiB,mHAIA,8HAIA,6F,iZCRD,iBAAuB,OAAgB,Q,yBAAhB,mCCWhC,MAAMC,EAUTjB,YAAoBkB,GAAA,KAAAA,WAEhBZ,KAAKa,YACL,CACIC,QACA,CACIC,gBACA,CACIC,QACA,CACIF,QACA,CACIG,eACA,CACInB,KAAM,QAKtBoB,WACA,CACIF,QACA,CAEIG,aAAcnB,KAAKoB,SAASC,KAAKrB,QAGzCsB,OACA,CACIN,QACA,CAEIO,mBAAoB,CAAC,EAAG,GAAI,IAE5BC,oBAAqB,MAe3BJ,SAASK,EAAcC,EAAsBC,G,qCAEvD,IAAIC,EAAyB,KAE1BD,IAECC,EACA,CACIC,UAAWF,EAASG,iBACpBC,KAAMJ,EAASK,UAIvB,IAAIC,QAAejC,KAAKY,SACnBsB,QAAQ,CACGT,KAAMA,EACNU,KAAMT,GAEVE,GACPrB,YAEL,MAAO,CACH6B,KAAMH,EAAOI,QACbC,WAAYL,EAAOM,gB,iUAlFlB5B,GAA8B,W,kBAA9BA,EAA8B,sDAH5B,CAAC,EAAA6B,KAAY,yhBDb5B,oBACI,iCAEI,wBACI,2BAIA,+BACA,+BACJ,OAGA,wBACI,+BACJ,OAGA,wBACI,+BACA,gCACJ,OAGA,gCACA,iCACA,iCACA,iCACA,iCACJ,OACJ,Q,MA9BS,iCAa6B,gC","file":"7924.client.es2015.chunk.a284782456ebf55c66c9.js","sourcesContent":["import {Injectable} from \"@angular/core\";\r\nimport {BaseUrl, Produces, ResponseType, GET, Path, Cache, RESTClient} from \"@anglr/rest\";\r\nimport {Observable} from \"rxjs\";\r\n\r\n/**\r\n * Service used to obtain source files\r\n */\r\n@Injectable({providedIn: 'root'})\r\n@BaseUrl('https://raw.githubusercontent.com/ressurectit/ressurectit.github.io.src/master/app/')\r\nexport class SourceService extends RESTClient\r\n{\r\n    /**\r\n     * Gets content file from path\r\n     * @param _path Path to content file\r\n     */\r\n    @Cache()\r\n    @Produces(ResponseType.Text)\r\n    @GET('{path}')\r\n    public getSource(@Path('path') _path: string): Observable<string>\r\n    {\r\n        return null;\r\n    }\r\n}","import {Pipe, PipeTransform} from \"@angular/core\";\r\n\r\nimport {SourceService} from \"../../../../services/api/source\";\r\nimport {handle404} from \"../../../../misc/rxjsOperators\";\r\n\r\n/**\r\n * Obtains source for provided string\r\n */\r\n@Pipe(\r\n{\r\n    name: \"asSource\"\r\n})\r\nexport class AsSourcePipe implements PipeTransform\r\n{\r\n    //######################### constructor #########################\r\n    constructor(private _sourceSvc: SourceService)\r\n    {\r\n    }\r\n\r\n    //######################### public methods #########################\r\n\r\n    /**\r\n     * Returns observable for obtaining source\r\n     * @param path Value to be used as source path\r\n     * @param type Type of source\r\n     */\r\n    public async transform(path: any, type: string = 'typescript'): Promise<string>\r\n    {\r\n        let source = await this._sourceSvc.getSource(path)\r\n            .pipe(handle404())\r\n            .toPromise();\r\n\r\n        return '``` ' + `${type}\r\n${source ?? 'not found ' + path}\r\n` + '```';\r\n    }\r\n}","import {Observable, MonoTypeOperatorFunction, of, throwError} from \"rxjs\";\r\nimport {catchError} from \"rxjs/operators\";\r\n\r\n/**\r\n * Handles 404 http code as response\r\n */\r\nexport function handle404<TResponse>(): MonoTypeOperatorFunction<TResponse|null>\r\n{\r\n    return (source: Observable<TResponse|null>) =>\r\n    {\r\n        return source.pipe(catchError(error =>\r\n        {\r\n            if(error.status == 404)\r\n            {\r\n                return of(null);\r\n            }\r\n\r\n            return throwError(error);\r\n        }));\r\n    };\r\n}","<div *ngIf=\"showSources\" class=\"flex-1\" @slideInOut>\r\n    <ng-content></ng-content>\r\n</div>\r\n\r\n<a class=\"show-icon\" [class.absolute]=\"showSources\" title=\"Show / hide sources\" (click)=\"showSources = !showSources\">\r\n    <span class=\"fas fa-code\"></span>\r\n</a>","import {Component, ChangeDetectionStrategy} from \"@angular/core\";\r\nimport {slideInOutTrigger} from '@anglr/animations';\r\n\r\n/**\r\n * Component that is used for displaying source codes\r\n */\r\n@Component(\r\n{\r\n    selector: 'source-code',\r\n    templateUrl: 'sourceCode.component.html',\r\n    styleUrls: ['sourceCode.component.scss'],\r\n    animations: [slideInOutTrigger],\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class SourceCodeComponent\r\n{\r\n    //######################### public properties - template bindings #########################\r\n\r\n    /**\r\n     * Indication whether show/hide sources\r\n     */\r\n    public showSources: boolean = false;\r\n}","import {Component, ChangeDetectionStrategy} from \"@angular/core\";\r\n\r\n/**\r\n * Grouped metadata sample for grid component\r\n */\r\n@Component(\r\n{\r\n    selector: 'grouped-metadata-view',\r\n    templateUrl: 'groupedMetadata.component.html',\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class GroupedMetadataComponent\r\n{\r\n}","<h3>Grouped Metadata Grid</h3>\r\n\r\n<source-code>\r\n    <mat-tab-group>\r\n        <mat-tab label=\"groupedMetadataSample.component.ts\">\r\n            <div [renderMarkdown]=\"'samples/grid/groupedMetadata/groupedMetadataSample.component.ts' | asSource | async\"></div>\r\n        </mat-tab>\r\n\r\n        <mat-tab label=\"groupedMetadataSample.component.html\">\r\n            <div [renderMarkdown]=\"'samples/grid/groupedMetadata/groupedMetadataSample.component.html' | asSource: 'html' | async\"></div>\r\n        </mat-tab>\r\n\r\n        <mat-tab label=\"data.interface.ts\">\r\n            <div [renderMarkdown]=\"'services/api/data/data.interface.ts' | asSource | async\"></div>\r\n        </mat-tab>\r\n    </mat-tab-group>\r\n</source-code>\r\n\r\n<grouped-metadata-sample></grouped-metadata-sample>","<ng-grid [gridOptions]=\"gridOptions\">\r\n    <grouped-table-metadata>\r\n        <!-- group with custom template and 2 columns in it-->\r\n        <table-group title=\"Country and city\">\r\n            <ng-template let-group>\r\n                <div class=\"text-left\">{{group?.title}}</div>\r\n            </ng-template>\r\n\r\n            <table-group-column id=\"country\"></table-group-column>\r\n            <table-group-column id=\"city\"></table-group-column>\r\n        </table-group>\r\n\r\n        <!-- group with only one column and with title that is not visible -->\r\n        <table-group title=\"Zip code\" [titleVisible]=\"false\">\r\n            <table-group-column id=\"zip\"></table-group-column>\r\n        </table-group>\r\n\r\n        <!-- group with custom css class applied to group and 2 columns in it -->\r\n        <table-group title=\"Address street:\" cssClass=\"text-right\">\r\n            <table-group-column id=\"street\"></table-group-column>\r\n            <table-group-column id=\"houseNumber\"></table-group-column>\r\n        </table-group>\r\n\r\n        <!-- columns metadata definition as standard -->\r\n        <basic-table-column id=\"country\" name=\"country\" title=\"Country\"></basic-table-column>\r\n        <basic-table-column id=\"city\" name=\"city\" title=\"City\"></basic-table-column>\r\n        <basic-table-column id=\"zip\" name=\"zip\" title=\"ZIP\"></basic-table-column>\r\n        <basic-table-column id=\"street\" name=\"street\" title=\"Street\"></basic-table-column>\r\n        <basic-table-column id=\"houseNumber\" name=\"houseNumber\" title=\"House number\"></basic-table-column>\r\n    </grouped-table-metadata>\r\n</ng-grid>","import {Component, ChangeDetectionStrategy} from \"@angular/core\";\r\nimport {GridOptions, SimpleOrdering, BasicPagingOptions, AsyncDataLoaderOptions, DataResponse, TableContentRendererOptions, GroupedTableHeaderContentRendererComponent} from \"@anglr/grid\";\r\n\r\nimport {Address, DataService} from \"../../../services/api/data\";\r\nimport {Orderable} from \"../../../misc/types\";\r\n\r\n/**\r\n * Grouped metadata sample for grid component\r\n */\r\n@Component(\r\n{\r\n    selector: 'grouped-metadata-sample',\r\n    templateUrl: 'groupedMetadataSample.component.html',\r\n    providers: [DataService],\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class GroupedMetadataSampleComponent\r\n{\r\n    //######################### public properties - template bindings #########################\r\n\r\n    /**\r\n     * Grid options that are used for grid initialization\r\n     */\r\n    public gridOptions: GridOptions;\r\n\r\n    //######################### constructor #########################\r\n    constructor(private _dataSvc: DataService)\r\n    {\r\n        this.gridOptions =\r\n        {\r\n            plugins:\r\n            {\r\n                contentRenderer:\r\n                {\r\n                    options: <TableContentRendererOptions>\r\n                    {\r\n                        plugins:\r\n                        {\r\n                            headerRenderer:\r\n                            {\r\n                                type: GroupedTableHeaderContentRendererComponent\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                dataLoader:\r\n                {\r\n                    options: <AsyncDataLoaderOptions<Address, SimpleOrdering>>\r\n                    {\r\n                        //data callback used for getting data asynchronously\r\n                        dataCallback: this._getData.bind(this)\r\n                    }\r\n                },\r\n                paging:\r\n                {\r\n                    options: <BasicPagingOptions>\r\n                    {\r\n                        //available values for items per page buttons\r\n                        itemsPerPageValues: [5, 10, 20],\r\n                        //initial value of items per page, should be one of above\r\n                        initialItemsPerPage: 5\r\n                    }\r\n                }\r\n            }\r\n        };\r\n    }\r\n\r\n    //######################### private methods #########################\r\n\r\n    /**\r\n     * Callback used for obtaining data\r\n     * @param page Index of requested page\r\n     * @param itemsPerPage Number of items per page\r\n     * @param ordering Order by column name\r\n     */\r\n    private async _getData(page: number, itemsPerPage: number, ordering: SimpleOrdering): Promise<DataResponse<Address>>\r\n    {\r\n        let reqOrdering: Orderable = null;\r\n\r\n        if(ordering)\r\n        {\r\n            reqOrdering = \r\n            {\r\n                direction: ordering.orderByDirection,\r\n                sort: ordering.orderBy\r\n            };\r\n        }\r\n\r\n        let result = await this._dataSvc\r\n            .getData({\r\n                        page: page,\r\n                        size: itemsPerPage\r\n                    },\r\n                    reqOrdering)\r\n            .toPromise();\r\n\r\n        return {\r\n            data: result.content,\r\n            totalCount: result.totalElements\r\n        };\r\n    }\r\n}"],"sourceRoot":""}