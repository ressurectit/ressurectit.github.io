{"version":3,"sources":["webpack://ressurectit.github.io/./app/services/api/gallery/gallery.service.ts","webpack://ressurectit.github.io/./app/samples/grid/customRenderer/customRendererSample.component.ts","webpack://ressurectit.github.io/./app/samples/grid/customRenderer/customRendererSample.component.html","webpack://ressurectit.github.io/./app/samples/grid/customRenderer/galleryRenderer/galleryContentRenderer.component.html","webpack://ressurectit.github.io/./app/samples/grid/customRenderer/galleryRenderer/galleryContentRenderer.component.ts","webpack://ressurectit.github.io/./app/samples/grid/customRenderer/gallery/galleryItem.component.ts","webpack://ressurectit.github.io/./app/samples/grid/customRenderer/gallery/galleryMetadataGatherer.component.ts"],"names":["GalleryService","getGallery","paging","this","getAllGallery","pipe","map","data","paginator","setPage","page","setItemsPerPage","size","setItemCount","length","content","slice","getOffset","totalElements","Observable","CustomRendererSampleComponent","constructor","_dataSvc","gridOptions","plugins","dataLoader","options","dataCallback","_getData","bind","contentRenderer","type","GalleryContentRendererComponent","itemsPerPage","_ordering","result","toPromise","totalCount","defaultOptions","cssClasses","pluginElement","_changeDetector","gridPlugins","orderingChange","_options","extend","_dataLoader","ngOnDestroy","_dataChangedSubscription","unsubscribe","_metadataChangedSubscription","initialize","metadataSelector","_metadataSelector","metadataChange","subscribe","invalidateVisuals","resultChange","initOptions","detectChanges","opacity","transform","GalleryItemComponent","GalleryMetadataGathererComponent","getMetadata","item","items","first","ngAfterContentInit","changes","emit","provide","useExisting"],"mappings":"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","file":"799.client.es2015.chunk.577c1dda2dce5ebd2f13.js","sourcesContent":["import {Injectable} from '@angular/core';\nimport {BaseUrl, GET, RESTClient} from '@anglr/rest';\nimport {Paginator} from '@jscrpt/common';\nimport {Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\nimport {PagedData, Pageable} from '../../../misc/types';\nimport {GalleryItem} from './gallery.interface';\n\n/**\n * Service used to obtain gallery data for grid\n */\n@Injectable()\n@BaseUrl('content/')\nexport class GalleryService extends RESTClient\n{\n    /**\n     * Gets gallery data \n     * @param paging Paging for obtaining specific page\n     */\n    public getGallery(paging?: Pageable): Observable<PagedData<GalleryItem>>\n    {\n        return this.getAllGallery()\n            .pipe(map(data =>\n            {\n                const paginator = new Paginator();\n\n                paginator.setPage(paging.page)\n                    .setItemsPerPage(paging.size)\n                    .setItemCount(data.length);\n\n                return <PagedData<GalleryItem>>\n                {\n                    content: data.slice(paginator.getOffset(), paginator.getOffset() + paging.size),\n                    totalElements: data.length\n                };\n            }));\n    }\n\n    /**\n     * Gets enum data\n     */\n    @GET('gallery.json')\n    public getAllGallery(): Observable<GalleryItem[]>\n    {\n        return null;\n    }\n}","import {Component, ChangeDetectionStrategy} from \"@angular/core\";\r\nimport {GridOptions, SimpleOrdering, DataResponse, AsyncDataLoaderOptions} from \"@anglr/grid\";\r\n\r\nimport {GalleryContentRendererComponent} from \"./galleryRenderer/galleryContentRenderer.component\";\r\nimport {GalleryService, GalleryItem} from \"../../../services/api/gallery\";\r\n\r\n/**\r\n * Custom renderer sample for grid component\r\n */\r\n@Component(\r\n{\r\n    selector: 'custom-renderer-sample',\r\n    templateUrl: 'customRendererSample.component.html',\r\n    providers: [GalleryService],\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class CustomRendererSampleComponent\r\n{\r\n    //######################### public properties - template bindings #########################\r\n\r\n    /**\r\n     * Grid options that are used for grid initialization\r\n     */\r\n    public gridOptions: GridOptions;\r\n\r\n    //######################### constructor #########################\r\n    constructor(private _dataSvc: GalleryService)\r\n    {\r\n        this.gridOptions =\r\n        {\r\n            plugins:\r\n            {\r\n                dataLoader:\r\n                {\r\n                    options: <AsyncDataLoaderOptions<GalleryItem, SimpleOrdering>>\r\n                    {\r\n                        //data callback used for getting data asynchronously\r\n                        dataCallback: this._getData.bind(this)\r\n                    }\r\n                },\r\n                contentRenderer:\r\n                {\r\n                    type: GalleryContentRendererComponent\r\n                }\r\n            }\r\n        };\r\n    }\r\n\r\n    \r\n    //######################### private methods #########################\r\n\r\n    /**\r\n     * Callback used for obtaining data\r\n     * @param page Index of requested page\r\n     * @param itemsPerPage Number of items per page\r\n     */\r\n    private async _getData(page: number, itemsPerPage: number, _ordering: SimpleOrdering): Promise<DataResponse<GalleryItem>>\r\n    {\r\n        let result = await this._dataSvc\r\n            .getGallery({\r\n                            page: page,\r\n                            size: itemsPerPage\r\n                        })\r\n            .toPromise();\r\n\r\n        return {\r\n            data: result.content,\r\n            totalCount: result.totalElements\r\n        };\r\n    }\r\n}","<ng-grid [gridOptions]=\"gridOptions\">\r\n    <gallery-metadata>\r\n        <gallery-item source=\"test\"></gallery-item>\r\n    </gallery-metadata>\r\n</ng-grid>","<div class=\"gallery-content\">\r\n    <div *ngFor=\"let item of data\" class=\"gallery-item\">\r\n        <img [src]=\"item?.source\">\r\n    </div>\r\n</div>","import {Component, ElementRef, Inject, Optional, EventEmitter, ChangeDetectionStrategy, ChangeDetectorRef, OnDestroy} from \"@angular/core\";\r\nimport {trigger, transition, query, style, stagger, animate} from \"@angular/animations\";\r\nimport {GridPluginGeneric, GRID_PLUGIN_INSTANCES, GridPluginInstances, CONTENT_RENDERER_OPTIONS, MetadataSelector, DataLoader, DataResponse, METADATA_SELECTOR, DATA_LOADER} from \"@anglr/grid\";\r\nimport {extend} from \"@jscrpt/common\";\r\nimport {Subscription} from \"rxjs\";\r\n\r\nimport {GalleryContentRenderer, GalleryContentRendererOptions, CssClassesGalleryContentRenderer} from \"./galleryContentRenderer.interface\";\r\nimport {GalleryItem as GalleryItemData} from \"../../../../services/api/gallery\";\r\nimport {GalleryMetadata, GalleryItem} from \"../gallery/gallery.interface\";\r\n\r\n/**\r\n * Default options for 'GalleryContentRendererComponent'\r\n * @internal\r\n */\r\nconst defaultOptions: GalleryContentRendererOptions<CssClassesGalleryContentRenderer> =\r\n{\r\n    cssClasses:\r\n    {\r\n    }\r\n};\r\n\r\n/**\r\n * Component used for rendering gallery content renderer\r\n */\r\n@Component(\r\n{\r\n    selector: 'div.gallery-renderer',\r\n    templateUrl: 'galleryContentRenderer.component.html',\r\n    styleUrls: ['galleryContentRenderer.component.scss'],\r\n    animations:\r\n    [\r\n        trigger('showGallery',\r\n        [\r\n            transition(\":enter\",\r\n            [\r\n                query('.gallery-item',\r\n                [\r\n                    style({opacity: 0, transform: 'translateY(-100px)'}),\r\n                    stagger(-30, \r\n                    [\r\n                        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)', style({ opacity: 1, transform: 'none' }))\r\n                    ])\r\n                ])\r\n            ])\r\n        ])\r\n    ],\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class GalleryContentRendererComponent<TOrdering, TOptions extends GalleryContentRendererOptions<CssClassesGalleryContentRenderer>> implements GalleryContentRenderer<TOrdering>, GridPluginGeneric<TOptions>, OnDestroy\r\n{\r\n    //######################### protected fields #########################\r\n\r\n    /**\r\n     * Options for content renderer\r\n     */\r\n    protected _options: TOptions;\r\n\r\n    /**\r\n     * Metadata selector currently used\r\n     */\r\n    protected _metadataSelector: MetadataSelector<GalleryMetadata<GalleryItem>>;\r\n\r\n    /**\r\n     * Data loader currently used\r\n     */\r\n    protected _dataLoader: DataLoader<DataResponse<GalleryItemData>>;\r\n\r\n    /**\r\n     * Subscription listening for metadata changes\r\n     */\r\n    protected _metadataChangedSubscription: Subscription;\r\n\r\n    /**\r\n     * Subscription listening for data changes\r\n     */\r\n    protected _dataChangedSubscription: Subscription;\r\n\r\n    //######################### public properties - implementation of GalleryContentRenderer #########################\r\n\r\n    /**\r\n     * Options for content renderer\r\n     */\r\n    public get options(): TOptions\r\n    {\r\n        return this._options;\r\n    }\r\n    public set options(options: TOptions)\r\n    {\r\n        this._options = extend(true, this._options, options) as TOptions;\r\n    }\r\n\r\n    /**\r\n     * Information about current ordering state\r\n     */\r\n    public ordering: TOrdering;\r\n\r\n    /**\r\n     * Indication that ordering has changed\r\n     */\r\n    public orderingChange: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n    //######################### public properties #########################\r\n\r\n    /**\r\n     * Gets data that are present for displaying\r\n     */\r\n    public get data(): GalleryItemData[]\r\n    {\r\n        return this._dataLoader?.result?.data;\r\n    }\r\n\r\n    //######################### constructor #########################\r\n    constructor(public pluginElement: ElementRef,\r\n                protected _changeDetector: ChangeDetectorRef,\r\n                @Inject(GRID_PLUGIN_INSTANCES) @Optional() public gridPlugins: GridPluginInstances,\r\n                @Inject(CONTENT_RENDERER_OPTIONS) @Optional() options?: GalleryContentRendererOptions<CssClassesGalleryContentRenderer>)\r\n    {\r\n        this._options = extend(true, {}, defaultOptions, options);\r\n    }\r\n\r\n    //######################### public methods - implementation of OnDestroy #########################\r\n    \r\n    /**\r\n     * Called when component is destroyed\r\n     */\r\n    public ngOnDestroy()\r\n    {\r\n        this._dataChangedSubscription?.unsubscribe();\r\n        this._dataChangedSubscription = null;\r\n        \r\n        this._metadataChangedSubscription?.unsubscribe();\r\n        this._metadataChangedSubscription = null;\r\n    }\r\n\r\n    //######################### public methods - implementation of GalleryContentRenderer #########################\r\n    \r\n    /**\r\n     * Initialize plugin, to be ready to use, initialize communication with other plugins\r\n     */\r\n    public initialize()\r\n    {\r\n        let metadataSelector: MetadataSelector<GalleryMetadata<GalleryItem>> = this.gridPlugins[METADATA_SELECTOR] as MetadataSelector<GalleryMetadata<GalleryItem>>;\r\n\r\n        if(this._metadataSelector && this._metadataSelector != metadataSelector)\r\n        {\r\n            this._metadataChangedSubscription.unsubscribe();\r\n            this._metadataChangedSubscription = null;\r\n            this._metadataSelector = null;\r\n        }\r\n\r\n        if(!this._metadataSelector)\r\n        {\r\n            this._metadataSelector = metadataSelector;\r\n\r\n            this._metadataChangedSubscription = this._metadataSelector.metadataChange.subscribe(() => this.invalidateVisuals());\r\n        }\r\n\r\n        let dataLoader: DataLoader<DataResponse<GalleryItemData>> = this.gridPlugins[DATA_LOADER] as DataLoader<DataResponse<GalleryItemData>>;\r\n\r\n        if(this._dataLoader && this._dataLoader != dataLoader)\r\n        {\r\n            this._dataChangedSubscription.unsubscribe();\r\n            this._dataChangedSubscription = null;\r\n            this._dataLoader = null;\r\n        }\r\n\r\n        if(!this._dataLoader)\r\n        {\r\n            this._dataLoader = dataLoader;\r\n\r\n            this._dataChangedSubscription = this._dataLoader.resultChange.subscribe(() => this.invalidateVisuals());\r\n        }\r\n\r\n        this.invalidateVisuals();\r\n    }\r\n    \r\n    /**\r\n     * Initialize plugin options, all operations required to be done with plugin options are handled here\r\n     */\r\n    public initOptions()\r\n    {\r\n    }\r\n    \r\n    /**\r\n     * Explicitly runs invalidation of content (change detection)\r\n     */\r\n    public invalidateVisuals(): void\r\n    {\r\n        this._changeDetector.detectChanges();\r\n    }\r\n}","import {Component, ChangeDetectionStrategy, Input} from \"@angular/core\";\r\n\r\nimport {GalleryItem} from \"./gallery.interface\";\r\n\r\n/**\r\n * Component for gathering information about gallery item\r\n */\r\n@Component(\r\n{\r\n    selector: 'gallery-item',\r\n    template: '',\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class GalleryItemComponent implements GalleryItem\r\n{\r\n    //######################### public properties #########################\r\n\r\n    /**\r\n     * Source of gallery item\r\n     */\r\n    @Input()\r\n    source: string;\r\n}","import {ExistingProvider, Component, ChangeDetectionStrategy, EventEmitter, forwardRef, ContentChildren, QueryList, AfterContentInit} from \"@angular/core\";\r\nimport {METADATA_GATHERER, MetadataGatherer} from \"@anglr/grid\";\r\n\r\nimport {GalleryMetadata, GalleryItem} from \"./gallery.interface\";\r\nimport {GalleryItemComponent} from \"./galleryItem.component\";\r\n\r\n/**\r\n * Component that is used for gathering metadata for gallery\r\n *\r\n * This is metadata gatherer which works with `GalleryItemComponent`\r\n */\r\n@Component(\r\n{\r\n    selector: 'gallery-metadata',\r\n    template: '',\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    providers:\r\n    [\r\n        <ExistingProvider>\r\n        {\r\n            provide: METADATA_GATHERER,\r\n            useExisting: forwardRef(() => GalleryMetadataGathererComponent)\r\n        }\r\n    ]\r\n})\r\nexport class GalleryMetadataGathererComponent<TGalleryItem extends GalleryItem> implements AfterContentInit, MetadataGatherer<GalleryMetadata<TGalleryItem>>\r\n{\r\n    //######################### public properties - implementation of MetadataGatherer<BasicTableColumn[]> #########################\r\n\r\n    /**\r\n     * Information that metadata for grid has changed\r\n     */\r\n    public metadataChange: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n    //######################### public properties - children #########################\r\n\r\n    /**\r\n     * Gets gallery item defined in template\r\n     * @internal\r\n     */\r\n    @ContentChildren(GalleryItemComponent)\r\n    public items: QueryList<TGalleryItem>;\r\n\r\n    //######################### public methods - implementation of MetadataGatherer<BasicTableColumn[]> #########################\r\n\r\n    /**\r\n     * Gets current metadata for grid\r\n     */\r\n    public getMetadata(): GalleryMetadata<TGalleryItem>\r\n    {\r\n        return {\r\n            item: this.items?.first\r\n        };\r\n    }\r\n\r\n    //######################### public methods - implementation of AfterContentInit #########################\r\n\r\n    /**\r\n     * Called when content was initialized\r\n     */\r\n    public ngAfterContentInit()\r\n    {\r\n        this.items.changes.subscribe(() =>\r\n        {\r\n            this.metadataChange.emit();\r\n        });\r\n    }\r\n}"],"sourceRoot":""}