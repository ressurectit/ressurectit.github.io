{"version":3,"sources":["webpack://ressurectit.github.io/./node_modules/@anglr/datetime/dist/es2015/src/selector/components/simpleInputDateTime/simpleInputDateTime.component.js"],"names":["_c0","SimpleInputDateTimeSelectorComponent","constructor","_dateApi","_valueProvider","_changeDetector","this","_valueChange","_touched","_pickerRequest","_format","_dateApiValue","_isValid","_minValue","_maxValue","disabled","value","getValue","currentValue","asObservable","input","nativeElement","setMinValue","setMaxValue","setValue","from","isValid","_show","_clearValue","setDisabled","invalidateVisuals","detectChanges","handleFocus","next","now","_minMaxConstraintTest","handleBlur","handleInput","handleClick","handleKeyboard","event","_a","key","preventDefault","stopPropagation","_withMinMaxConstraint","subtractDays","addDays","subtractWeeks","addWeeks","ctrlKey","isBefore","isAfter","code","updateOriginal","resetOriginal","_b","format","t","type","selectors","viewQuery","rf","ctx","_t","inputElement","first","decls","vars","consts","template","$event","placeholder","styles","changeDetection","ctorParameters","undefined","decorators","args","D","propDecorators","static"],"mappings":"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","file":"7618.client.es2015.chunk.5bb668cab4b80ed92f8e.js","sourcesContent":["/**\r\n * @fileoverview added by tsickle\r\n * Generated from: src/selector/components/simpleInputDateTime/simpleInputDateTime.component.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nimport { Component, ChangeDetectionStrategy, Inject, ChangeDetectorRef, ElementRef, ViewChild } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { DATE_API } from '../../../misc/tokens';\r\nimport { DateValueProvider } from '../../../services/dateValueProvider.service';\r\n/**\r\n * Component used as datetime selector with simple input\r\n * @template TDate\r\n */\r\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '../../../services/dateValueProvider.service';\n\nconst _c0 = [\"input\"];\nexport class SimpleInputDateTimeSelectorComponent {\r\n    //######################### constructor #########################\r\n    /**\r\n     * @param {?} _dateApi\r\n     * @param {?} _valueProvider\r\n     * @param {?} _changeDetector\r\n     */\r\n    constructor(_dateApi, _valueProvider, _changeDetector) {\r\n        this._dateApi = _dateApi;\r\n        this._valueProvider = _valueProvider;\r\n        this._changeDetector = _changeDetector;\r\n        //######################### protected fields #########################\r\n        /**\r\n         * Occurs when value changes\r\n         */\r\n        this._valueChange = new Subject();\r\n        /**\r\n         * Occurs when selector is touched by user\r\n         */\r\n        this._touched = new Subject();\r\n        /**\r\n         * Occurs when selector requires picker to be displayed or hidden\r\n         */\r\n        this._pickerRequest = new Subject();\r\n        /**\r\n         * Currently used format for displaying data\r\n         */\r\n        this._format = '';\r\n        /**\r\n         * Current value representation as date api wrapper\r\n         */\r\n        this._dateApiValue = null;\r\n        /**\r\n         * Indication whether is current value valid value\r\n         */\r\n        this._isValid = true;\r\n        /**\r\n         * Minimal possible value that can be picked\r\n         */\r\n        this._minValue = null;\r\n        /**\r\n         * Maximal possible value that can be picked\r\n         */\r\n        this._maxValue = null;\r\n        //######################### public properties - template bindings #########################\r\n        /**\r\n         * Indication whether is input disabled\r\n         * \\@internal\r\n         */\r\n        this.disabled = false;\r\n    }\r\n    //######################### public properties - implementation of DateTimeSelector #########################\r\n    /**\r\n     * Gets or sets currently used format for displaying data\r\n     * @return {?}\r\n     */\r\n    get format() {\r\n        return this._format;\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set format(value) {\r\n        this._format = value;\r\n    }\r\n    /**\r\n     * Gets current value of datetime\r\n     * @return {?}\r\n     */\r\n    get value() {\r\n        if (!this._dateApiValue || !this._isValid) {\r\n            return null;\r\n        }\r\n        return this._valueProvider.getValue(this._dateApiValue.value, this._format);\r\n    }\r\n    /**\r\n     * Gets formatted value\r\n     * @return {?}\r\n     */\r\n    get formattedValue() {\r\n        if (!this._isValid) {\r\n            return null;\r\n        }\r\n        return this.currentValue;\r\n    }\r\n    /**\r\n     * Gets indication whether is current value valid\r\n     * @return {?}\r\n     */\r\n    get valid() {\r\n        return this._isValid;\r\n    }\r\n    /**\r\n     * Occurs when value changes\r\n     * @return {?}\r\n     */\r\n    get valueChange() {\r\n        return this._valueChange.asObservable();\r\n    }\r\n    /**\r\n     * Occurs when selector is touched by user\r\n     * @return {?}\r\n     */\r\n    get touched() {\r\n        return this._touched.asObservable();\r\n    }\r\n    /**\r\n     * Occurs when selector requires picker to be displayed\r\n     * @return {?}\r\n     */\r\n    get pickerRequest() {\r\n        return this._pickerRequest.asObservable();\r\n    }\r\n    //######################### protected properties #########################\r\n    /**\r\n     * Gets or sets string representation current of value\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    get currentValue() {\r\n        return this.input.value || null;\r\n    }\r\n    /**\r\n     * @protected\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set currentValue(value) {\r\n        if (this.input) {\r\n            this.input.value = value !== null && value !== void 0 ? value : '';\r\n        }\r\n    }\r\n    /**\r\n     * Gets input element used for handling date time value\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    get input() {\r\n        return (/** @type {?} */ (this.inputElement)).nativeElement;\r\n    }\r\n    //######################### public methods - implementation of DateTimeSelector #########################\r\n    /**\r\n     * Sets minimal possible value for picker, that can be picked\r\n     * @param {?} value - Minimal possible value that can be picked\r\n     * @return {?}\r\n     */\r\n    setMinValue(value) {\r\n        this._minValue = value;\r\n    }\r\n    /**\r\n     * Sets maximal possible value for picker, that can be picked\r\n     * @param {?} value - Maximal possible value that can be picked\r\n     * @return {?}\r\n     */\r\n    setMaxValue(value) {\r\n        this._maxValue = value;\r\n    }\r\n    /**\r\n     * Sets value of datetime selector\r\n     * @param {?} value - Value to be set to this selector\r\n     * @return {?}\r\n     */\r\n    setValue(value) {\r\n        if (value === null || value === void 0 ? void 0 : value.from) {\r\n            this._dateApiValue = this._dateApi.getValue(value === null || value === void 0 ? void 0 : value.from, this._format);\r\n            this._isValid = this._dateApiValue.isValid();\r\n            this._show();\r\n        }\r\n        else {\r\n            this._clearValue();\r\n        }\r\n    }\r\n    /**\r\n     * Sets as 'control' disabled\r\n     * @param {?=} disabled - Indication whether sets value as disabled, if omitted it is same as disabled set to true\r\n     * @return {?}\r\n     */\r\n    setDisabled(disabled = true) {\r\n        this.disabled = disabled;\r\n    }\r\n    /**\r\n     * Explicitly runs invalidation of content (change detection)\r\n     * @return {?}\r\n     */\r\n    invalidateVisuals() {\r\n        this._changeDetector.detectChanges();\r\n    }\r\n    //######################### public methods - template bindings #########################\r\n    /**\r\n     * Handles gaining of focus\r\n     * \\@internal\r\n     * @return {?}\r\n     */\r\n    handleFocus() {\r\n        this._pickerRequest.next(true);\r\n        //no value\r\n        if (!this._dateApiValue) {\r\n            this._dateApiValue = this._dateApi.now();\r\n            this._isValid = this._dateApiValue.isValid();\r\n            if (this._minMaxConstraintTest()) {\r\n                this._clearValue();\r\n            }\r\n            else {\r\n                this._valueChange.next();\r\n            }\r\n        }\r\n        if (!this._isValid) {\r\n            return;\r\n        }\r\n        this._show();\r\n    }\r\n    /**\r\n     * Handles blur on input\r\n     * \\@internal\r\n     * @return {?}\r\n     */\r\n    handleBlur() {\r\n        this._pickerRequest.next(false);\r\n    }\r\n    /**\r\n     * Handles user input\r\n     * \\@internal\r\n     * @return {?}\r\n     */\r\n    handleInput() {\r\n        //empty value\r\n        if (!this.currentValue) {\r\n            this._clearValue();\r\n            this._valueChange.next();\r\n            return;\r\n        }\r\n        this._dateApiValue = this._dateApi.getValue(this.currentValue, this._format);\r\n        this._isValid = this._dateApiValue.isValid();\r\n        this._valueChange.next();\r\n    }\r\n    /**\r\n     * Handles click event inside of input\r\n     * \\@internal\r\n     * @return {?}\r\n     */\r\n    handleClick() {\r\n        this._pickerRequest.next(true);\r\n    }\r\n    /**\r\n     * Handles keyboard events\r\n     * \\@internal\r\n     * @param {?} event - Keyboard event that occured\r\n     * @return {?}\r\n     */\r\n    handleKeyboard(event) {\r\n        var _a;\r\n        if (!((_a = this._dateApiValue) === null || _a === void 0 ? void 0 : _a.isValid())) {\r\n            return;\r\n        }\r\n        switch (event.key) {\r\n            case 'ArrowRight':\r\n            case 'ArrowLeft':\r\n                {\r\n                    event.preventDefault();\r\n                    event.stopPropagation();\r\n                    this._withMinMaxConstraint((/**\r\n                     * @return {?}\r\n                     */\r\n                    () => event.key == 'ArrowLeft' ? (/** @type {?} */ (this._dateApiValue)).subtractDays(1) : (/** @type {?} */ (this._dateApiValue)).addDays(1)));\r\n                    this._show();\r\n                    break;\r\n                }\r\n            case 'ArrowUp':\r\n            case 'ArrowDown':\r\n                {\r\n                    event.preventDefault();\r\n                    event.stopPropagation();\r\n                    this._withMinMaxConstraint((/**\r\n                     * @return {?}\r\n                     */\r\n                    () => event.key == 'ArrowUp' ? (/** @type {?} */ (this._dateApiValue)).subtractWeeks(1) : (/** @type {?} */ (this._dateApiValue)).addWeeks(1)));\r\n                    this._show();\r\n                    break;\r\n                }\r\n            case 'Escape':\r\n                {\r\n                    this._pickerRequest.next(false);\r\n                    break;\r\n                }\r\n            case ' ':\r\n                {\r\n                    if (event.ctrlKey) {\r\n                        this._pickerRequest.next(true);\r\n                    }\r\n                    break;\r\n                }\r\n        }\r\n    }\r\n    //######################### protected methods #########################\r\n    /**\r\n     * Clears current value\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    _clearValue() {\r\n        this._dateApiValue = null;\r\n        this._isValid = true;\r\n        this.currentValue = null;\r\n    }\r\n    /**\r\n     * Tests whether are min or max constraint broken, returns true if constraint is broken\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    _minMaxConstraintTest() {\r\n        return (!!this._minValue && (/** @type {?} */ (this._dateApiValue)).isBefore(this._minValue)) ||\r\n            (!!this._maxValue && (/** @type {?} */ (this._dateApiValue)).isAfter(this._maxValue));\r\n    }\r\n    /**\r\n     * Runs code with check whether min max constrains was broken\r\n     * @protected\r\n     * @param {?} code - Code that should be executed which can change current value\r\n     * @return {?}\r\n     */\r\n    _withMinMaxConstraint(code) {\r\n        var _a;\r\n        (/** @type {?} */ (this._dateApiValue)).updateOriginal();\r\n        code();\r\n        //min value constraint failure\r\n        if (this._minMaxConstraintTest()) {\r\n            (_a = this._dateApiValue) === null || _a === void 0 ? void 0 : _a.resetOriginal();\r\n            return;\r\n        }\r\n        this._valueChange.next();\r\n    }\r\n    /**\r\n     * Shows current value in input\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    _show() {\r\n        var _a, _b;\r\n        if (this._isValid) {\r\n            this.currentValue = (_b = (_a = this._dateApiValue) === null || _a === void 0 ? void 0 : _a.format(this._format)) !== null && _b !== void 0 ? _b : null;\r\n        }\r\n    }\r\n}\nSimpleInputDateTimeSelectorComponent.ɵfac = function SimpleInputDateTimeSelectorComponent_Factory(t) { return new (t || SimpleInputDateTimeSelectorComponent)(ɵngcc0.ɵɵdirectiveInject(DATE_API), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DateValueProvider), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };\nSimpleInputDateTimeSelectorComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: SimpleInputDateTimeSelectorComponent, selectors: [[\"simple-input-date-time-selector\"]], viewQuery: function SimpleInputDateTimeSelectorComponent_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 7);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.inputElement = _t.first);\n    } }, decls: 2, vars: 2, consts: [[\"type\", \"text\", 3, \"disabled\", \"placeholder\", \"focus\", \"blur\", \"input\", \"click\", \"keydown\"], [\"input\", \"\"]], template: function SimpleInputDateTimeSelectorComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"input\", 0, 1);\n        ɵngcc0.ɵɵlistener(\"focus\", function SimpleInputDateTimeSelectorComponent_Template_input_focus_0_listener() { return ctx.handleFocus(); })(\"blur\", function SimpleInputDateTimeSelectorComponent_Template_input_blur_0_listener() { return ctx.handleBlur(); })(\"input\", function SimpleInputDateTimeSelectorComponent_Template_input_input_0_listener() { return ctx.handleInput(); })(\"click\", function SimpleInputDateTimeSelectorComponent_Template_input_click_0_listener() { return ctx.handleClick(); })(\"keydown\", function SimpleInputDateTimeSelectorComponent_Template_input_keydown_0_listener($event) { return ctx.handleKeyboard($event); });\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"disabled\", ctx.disabled)(\"placeholder\", ctx.placeholder);\n    } }, styles: [\"[_nghost-%COMP%]\\r\\n{\\r\\n    display: block;\\r\\n}\\r\\n\\r\\ninput[_ngcontent-%COMP%]\\r\\n{\\r\\n    width: 100%;\\r\\n}\"], changeDetection: 0 });\r\n/** @nocollapse */\r\nSimpleInputDateTimeSelectorComponent.ctorParameters = () => [\r\n    { type: undefined, decorators: [{ type: Inject, args: [DATE_API,] }] },\r\n    { type: DateValueProvider },\r\n    { type: ChangeDetectorRef }\r\n];\r\nSimpleInputDateTimeSelectorComponent.propDecorators = {\r\n    inputElement: [{ type: ViewChild, args: ['input', { static: true },] }]\r\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SimpleInputDateTimeSelectorComponent, [{\n        type: Component,\n        args: [{\n                selector: 'simple-input-date-time-selector',\n                template: \"<input type=\\\"text\\\"\\r\\n       #input\\r\\n       (focus)=\\\"handleFocus()\\\"\\r\\n       (blur)=\\\"handleBlur()\\\"\\r\\n       (input)=\\\"handleInput()\\\"\\r\\n       (click)=\\\"handleClick()\\\"\\r\\n       (keydown)=\\\"handleKeyboard($any($event))\\\"\\r\\n       [disabled]=\\\"disabled\\\"\\r\\n       [placeholder]=\\\"placeholder\\\">\",\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\":host\\r\\n{\\r\\n    display: block;\\r\\n}\\r\\n\\r\\ninput\\r\\n{\\r\\n    width: 100%;\\r\\n}\"]\n            }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DATE_API]\n            }] }, { type: ɵngcc1.DateValueProvider }, { type: ɵngcc0.ChangeDetectorRef }]; }, { inputElement: [{\n            type: ViewChild,\n            args: ['input', { static: true }]\n        }] }); })();\r\nif (false) {\r\n    /**\r\n     * Occurs when value changes\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    SimpleInputDateTimeSelectorComponent.prototype._valueChange;\r\n    /**\r\n     * Occurs when selector is touched by user\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    SimpleInputDateTimeSelectorComponent.prototype._touched;\r\n    /**\r\n     * Occurs when selector requires picker to be displayed or hidden\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    SimpleInputDateTimeSelectorComponent.prototype._pickerRequest;\r\n    /**\r\n     * Currently used format for displaying data\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    SimpleInputDateTimeSelectorComponent.prototype._format;\r\n    /**\r\n     * Current value representation as date api wrapper\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    SimpleInputDateTimeSelectorComponent.prototype._dateApiValue;\r\n    /**\r\n     * Indication whether is current value valid value\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    SimpleInputDateTimeSelectorComponent.prototype._isValid;\r\n    /**\r\n     * Minimal possible value that can be picked\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    SimpleInputDateTimeSelectorComponent.prototype._minValue;\r\n    /**\r\n     * Maximal possible value that can be picked\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    SimpleInputDateTimeSelectorComponent.prototype._maxValue;\r\n    /**\r\n     * Gets or sets placeholder that is displayed when there is no value selected\r\n     * @type {?}\r\n     */\r\n    SimpleInputDateTimeSelectorComponent.prototype.placeholder;\r\n    /**\r\n     * Indication whether is input disabled\r\n     * \\@internal\r\n     * @type {?}\r\n     */\r\n    SimpleInputDateTimeSelectorComponent.prototype.disabled;\r\n    /**\r\n     * Instance of html input element\r\n     * \\@internal\r\n     * @type {?}\r\n     */\r\n    SimpleInputDateTimeSelectorComponent.prototype.inputElement;\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    SimpleInputDateTimeSelectorComponent.prototype._dateApi;\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    SimpleInputDateTimeSelectorComponent.prototype._valueProvider;\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    SimpleInputDateTimeSelectorComponent.prototype._changeDetector;\r\n}\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,"],"sourceRoot":""}