{"version":3,"sources":["webpack://ressurectit.github.io/./app/services/api/source/source.service.ts","webpack://ressurectit.github.io/./app/modules/asSource/pipes/asSource/asSource.pipe.ts","webpack://ressurectit.github.io/./app/misc/rxjsOperators/handle404.ts","webpack://ressurectit.github.io/./app/modules/sourceCode/components/sourceCode/sourceCode.component.html","webpack://ressurectit.github.io/./app/modules/sourceCode/components/sourceCode/sourceCode.component.ts","webpack://ressurectit.github.io/./app/samples/grid/customRenderer/customRenderer.component.ts","webpack://ressurectit.github.io/./app/samples/grid/customRenderer/customRenderer.component.html","webpack://ressurectit.github.io/./app/services/api/gallery/gallery.service.ts","webpack://ressurectit.github.io/./app/samples/grid/customRenderer/customRendererSample.component.ts","webpack://ressurectit.github.io/./app/samples/grid/customRenderer/customRendererSample.component.html","webpack://ressurectit.github.io/./app/samples/grid/customRenderer/galleryRenderer/galleryContentRenderer.component.html","webpack://ressurectit.github.io/./app/samples/grid/customRenderer/galleryRenderer/galleryContentRenderer.component.ts","webpack://ressurectit.github.io/./app/samples/grid/customRenderer/gallery/galleryItem.component.ts","webpack://ressurectit.github.io/./app/samples/grid/customRenderer/gallery/galleryMetadataGatherer.component.ts"],"names":["SourceService","getSource","_path","C","Observable","AsSourcePipe","constructor","_sourceSvc","transform","path","type","source","this","pipe","catchError","error","status","of","throwError","toPromise","SourceCodeComponent","showSources","CustomRendererComponent","GalleryService","getGallery","paging","getAllGallery","map","data","paginator","setPage","page","setItemsPerPage","size","setItemCount","length","content","slice","getOffset","totalElements","CustomRendererSampleComponent","_dataSvc","gridOptions","plugins","dataLoader","options","dataCallback","_getData","bind","contentRenderer","GalleryContentRendererComponent","itemsPerPage","_ordering","result","totalCount","defaultOptions","cssClasses","pluginElement","_changeDetector","gridPlugins","orderingChange","_options","extend","_dataLoader","ngOnDestroy","_dataChangedSubscription","unsubscribe","_metadataChangedSubscription","initialize","metadataSelector","_metadataSelector","metadataChange","subscribe","invalidateVisuals","resultChange","initOptions","detectChanges","opacity","GalleryItemComponent","GalleryMetadataGathererComponent","getMetadata","item","items","first","ngAfterContentInit","changes","emit","provide","useExisting"],"mappings":"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","file":"9623.client.es2015.chunk.f6023965a3f41470cb3e.js","sourcesContent":["import {Injectable} from \"@angular/core\";\r\nimport {BaseUrl, Produces, ResponseType, GET, Path, Cache, RESTClient} from \"@anglr/rest\";\r\nimport {Observable} from \"rxjs\";\r\n\r\n/**\r\n * Service used to obtain source files\r\n */\r\n@Injectable({providedIn: 'root'})\r\n@BaseUrl('https://raw.githubusercontent.com/ressurectit/ressurectit.github.io.src/master/app/')\r\nexport class SourceService extends RESTClient\r\n{\r\n    /**\r\n     * Gets content file from path\r\n     * @param _path Path to content file\r\n     */\r\n    @Cache()\r\n    @Produces(ResponseType.Text)\r\n    @GET('{path}')\r\n    public getSource(@Path('path') _path: string): Observable<string>\r\n    {\r\n        return null;\r\n    }\r\n}","import {Pipe, PipeTransform} from \"@angular/core\";\r\n\r\nimport {SourceService} from \"../../../../services/api/source\";\r\nimport {handle404} from \"../../../../misc/rxjsOperators\";\r\n\r\n/**\r\n * Obtains source for provided string\r\n */\r\n@Pipe(\r\n{\r\n    name: \"asSource\"\r\n})\r\nexport class AsSourcePipe implements PipeTransform\r\n{\r\n    //######################### constructor #########################\r\n    constructor(private _sourceSvc: SourceService)\r\n    {\r\n    }\r\n\r\n    //######################### public methods #########################\r\n\r\n    /**\r\n     * Returns observable for obtaining source\r\n     * @param path Value to be used as source path\r\n     * @param type Type of source\r\n     */\r\n    public async transform(path: any, type: string = 'typescript'): Promise<string>\r\n    {\r\n        let source = await this._sourceSvc.getSource(path)\r\n            .pipe(handle404())\r\n            .toPromise();\r\n\r\n        return '``` ' + `${type}\r\n${source ?? 'not found ' + path}\r\n` + '```';\r\n    }\r\n}","import {Observable, MonoTypeOperatorFunction, of, throwError} from \"rxjs\";\r\nimport {catchError} from \"rxjs/operators\";\r\n\r\n/**\r\n * Handles 404 http code as response\r\n */\r\nexport function handle404<TResponse>(): MonoTypeOperatorFunction<TResponse|null>\r\n{\r\n    return (source: Observable<TResponse|null>) =>\r\n    {\r\n        return source.pipe(catchError(error =>\r\n        {\r\n            if(error.status == 404)\r\n            {\r\n                return of(null);\r\n            }\r\n\r\n            return throwError(error);\r\n        }));\r\n    };\r\n}","<div *ngIf=\"showSources\" class=\"flex-1\" @slideInOut>\r\n    <ng-content></ng-content>\r\n</div>\r\n\r\n<a class=\"show-icon\" [class.absolute]=\"showSources\" title=\"Show / hide sources\" (click)=\"showSources = !showSources\">\r\n    <span class=\"fas fa-code\"></span>\r\n</a>","import {Component, ChangeDetectionStrategy} from \"@angular/core\";\r\nimport {slideInOutTrigger} from '@anglr/animations';\r\n\r\n/**\r\n * Component that is used for displaying source codes\r\n */\r\n@Component(\r\n{\r\n    selector: 'source-code',\r\n    templateUrl: 'sourceCode.component.html',\r\n    styleUrls: ['sourceCode.component.scss'],\r\n    animations: [slideInOutTrigger],\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class SourceCodeComponent\r\n{\r\n    //######################### public properties - template bindings #########################\r\n\r\n    /**\r\n     * Indication whether show/hide sources\r\n     */\r\n    public showSources: boolean = false;\r\n}","import {Component, ChangeDetectionStrategy} from \"@angular/core\";\r\n\r\n/**\r\n * Custom renderer sample for grid component\r\n */\r\n@Component(\r\n{\r\n    selector: 'custom-renderer-view',\r\n    templateUrl: 'customRenderer.component.html',\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class CustomRendererComponent\r\n{\r\n}","<h3>Custom Renderer Grid</h3>\r\n\r\n<source-code>\r\n    <mat-tab-group>\r\n        <mat-tab label=\"customRendererSample.component.ts\">\r\n            <div [renderMarkdown]=\"'samples/grid/customRenderer/customRendererSample.component.ts' | asSource | async\"></div>\r\n        </mat-tab>\r\n\r\n        <mat-tab label=\"customRendererSample.component.html\">\r\n            <div [renderMarkdown]=\"'samples/grid/customRenderer/customRendererSample.component.html' | asSource: 'html' | async\"></div>\r\n        </mat-tab>\r\n\r\n        <mat-tab label=\"gallery.interface.ts\">\r\n            <div [renderMarkdown]=\"'samples/grid/customRenderer/gallery/gallery.interface.ts' | asSource | async\"></div>\r\n        </mat-tab>\r\n\r\n        <mat-tab label=\"galleryItem.component.ts\">\r\n            <div [renderMarkdown]=\"'samples/grid/customRenderer/gallery/galleryItem.component.ts' | asSource | async\"></div>\r\n        </mat-tab>\r\n\r\n        <mat-tab label=\"galleryItem.context.ts\">\r\n            <div [renderMarkdown]=\"'samples/grid/customRenderer/gallery/galleryItem.context.ts' | asSource | async\"></div>\r\n        </mat-tab>\r\n\r\n        <mat-tab label=\"galleryMetadataGatherer.component.ts\">\r\n            <div [renderMarkdown]=\"'samples/grid/customRenderer/gallery/galleryMetadataGatherer.component.ts' | asSource | async\"></div>\r\n        </mat-tab>\r\n\r\n        <mat-tab label=\"galleryContentRenderer.component.ts\">\r\n            <div [renderMarkdown]=\"'samples/grid/customRenderer/galleryRenderer/galleryContentRenderer.component.ts' | asSource | async\"></div>\r\n        </mat-tab>\r\n        \r\n        <mat-tab label=\"galleryContentRenderer.component.html\">\r\n            <div [renderMarkdown]=\"'samples/grid/customRenderer/galleryRenderer/galleryContentRenderer.component.html' | asSource: 'html' | async\"></div>\r\n        </mat-tab>\r\n\r\n        <mat-tab label=\"galleryContentRenderer.component.scss\">\r\n            <div [renderMarkdown]=\"'samples/grid/customRenderer/galleryRenderer/galleryContentRenderer.component.scss' | asSource: 'scss' | async\"></div>\r\n        </mat-tab>\r\n\r\n        <mat-tab label=\"galleryContentRenderer.interface.ts\">\r\n            <div [renderMarkdown]=\"'samples/grid/customRenderer/galleryRenderer/galleryContentRenderer.interface.ts' | asSource | async\"></div>\r\n        </mat-tab>\r\n    </mat-tab-group>\r\n</source-code>\r\n\r\n<custom-renderer-sample></custom-renderer-sample>","import {Injectable} from '@angular/core';\nimport {BaseUrl, GET, RESTClient} from '@anglr/rest';\nimport {Paginator} from '@jscrpt/common';\nimport {Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\nimport {PagedData, Pageable} from '../../../misc/types';\nimport {GalleryItem} from './gallery.interface';\n\n/**\n * Service used to obtain gallery data for grid\n */\n@Injectable()\n@BaseUrl('content/')\nexport class GalleryService extends RESTClient\n{\n    /**\n     * Gets gallery data \n     * @param paging Paging for obtaining specific page\n     */\n    public getGallery(paging?: Pageable): Observable<PagedData<GalleryItem>>\n    {\n        return this.getAllGallery()\n            .pipe(map(data =>\n            {\n                const paginator = new Paginator();\n\n                paginator.setPage(paging.page)\n                    .setItemsPerPage(paging.size)\n                    .setItemCount(data.length);\n\n                return <PagedData<GalleryItem>>\n                {\n                    content: data.slice(paginator.getOffset(), paginator.getOffset() + paging.size),\n                    totalElements: data.length\n                };\n            }));\n    }\n\n    /**\n     * Gets enum data\n     */\n    @GET('gallery.json')\n    public getAllGallery(): Observable<GalleryItem[]>\n    {\n        return null;\n    }\n}","import {Component, ChangeDetectionStrategy} from \"@angular/core\";\r\nimport {GridOptions, SimpleOrdering, DataResponse, AsyncDataLoaderOptions} from \"@anglr/grid\";\r\n\r\nimport {GalleryContentRendererComponent} from \"./galleryRenderer/galleryContentRenderer.component\";\r\nimport {GalleryService, GalleryItem} from \"../../../services/api/gallery\";\r\n\r\n/**\r\n * Custom renderer sample for grid component\r\n */\r\n@Component(\r\n{\r\n    selector: 'custom-renderer-sample',\r\n    templateUrl: 'customRendererSample.component.html',\r\n    providers: [GalleryService],\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class CustomRendererSampleComponent\r\n{\r\n    //######################### public properties - template bindings #########################\r\n\r\n    /**\r\n     * Grid options that are used for grid initialization\r\n     */\r\n    public gridOptions: GridOptions;\r\n\r\n    //######################### constructor #########################\r\n    constructor(private _dataSvc: GalleryService)\r\n    {\r\n        this.gridOptions =\r\n        {\r\n            plugins:\r\n            {\r\n                dataLoader:\r\n                {\r\n                    options: <AsyncDataLoaderOptions<GalleryItem, SimpleOrdering>>\r\n                    {\r\n                        //data callback used for getting data asynchronously\r\n                        dataCallback: this._getData.bind(this)\r\n                    }\r\n                },\r\n                contentRenderer:\r\n                {\r\n                    type: GalleryContentRendererComponent\r\n                }\r\n            }\r\n        };\r\n    }\r\n\r\n    \r\n    //######################### private methods #########################\r\n\r\n    /**\r\n     * Callback used for obtaining data\r\n     * @param page Index of requested page\r\n     * @param itemsPerPage Number of items per page\r\n     */\r\n    private async _getData(page: number, itemsPerPage: number, _ordering: SimpleOrdering): Promise<DataResponse<GalleryItem>>\r\n    {\r\n        let result = await this._dataSvc\r\n            .getGallery({\r\n                            page: page,\r\n                            size: itemsPerPage\r\n                        })\r\n            .toPromise();\r\n\r\n        return {\r\n            data: result.content,\r\n            totalCount: result.totalElements\r\n        };\r\n    }\r\n}","<ng-grid [gridOptions]=\"gridOptions\">\r\n    <gallery-metadata>\r\n        <gallery-item source=\"test\"></gallery-item>\r\n    </gallery-metadata>\r\n</ng-grid>","<div class=\"gallery-content\">\r\n    <div *ngFor=\"let item of data\" class=\"gallery-item\">\r\n        <img [src]=\"item?.source\">\r\n    </div>\r\n</div>","import {Component, ElementRef, Inject, Optional, EventEmitter, ChangeDetectionStrategy, ChangeDetectorRef, OnDestroy} from \"@angular/core\";\r\nimport {trigger, transition, query, style, stagger, animate} from \"@angular/animations\";\r\nimport {GridPluginGeneric, GRID_PLUGIN_INSTANCES, GridPluginInstances, CONTENT_RENDERER_OPTIONS, MetadataSelector, DataLoader, DataResponse, METADATA_SELECTOR, DATA_LOADER} from \"@anglr/grid\";\r\nimport {extend} from \"@jscrpt/common\";\r\nimport {Subscription} from \"rxjs\";\r\n\r\nimport {GalleryContentRenderer, GalleryContentRendererOptions, CssClassesGalleryContentRenderer} from \"./galleryContentRenderer.interface\";\r\nimport {GalleryItem as GalleryItemData} from \"../../../../services/api/gallery\";\r\nimport {GalleryMetadata, GalleryItem} from \"../gallery/gallery.interface\";\r\n\r\n/**\r\n * Default options for 'GalleryContentRendererComponent'\r\n * @internal\r\n */\r\nconst defaultOptions: GalleryContentRendererOptions<CssClassesGalleryContentRenderer> =\r\n{\r\n    cssClasses:\r\n    {\r\n    }\r\n};\r\n\r\n/**\r\n * Component used for rendering gallery content renderer\r\n */\r\n@Component(\r\n{\r\n    selector: 'div.gallery-renderer',\r\n    templateUrl: 'galleryContentRenderer.component.html',\r\n    styleUrls: ['galleryContentRenderer.component.scss'],\r\n    animations:\r\n    [\r\n        trigger('showGallery',\r\n        [\r\n            transition(\":enter\",\r\n            [\r\n                query('.gallery-item',\r\n                [\r\n                    style({opacity: 0, transform: 'translateY(-100px)'}),\r\n                    stagger(-30, \r\n                    [\r\n                        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)', style({ opacity: 1, transform: 'none' }))\r\n                    ])\r\n                ])\r\n            ])\r\n        ])\r\n    ],\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class GalleryContentRendererComponent<TOrdering, TOptions extends GalleryContentRendererOptions<CssClassesGalleryContentRenderer>> implements GalleryContentRenderer<TOrdering>, GridPluginGeneric<TOptions>, OnDestroy\r\n{\r\n    //######################### protected fields #########################\r\n\r\n    /**\r\n     * Options for content renderer\r\n     */\r\n    protected _options: TOptions;\r\n\r\n    /**\r\n     * Metadata selector currently used\r\n     */\r\n    protected _metadataSelector: MetadataSelector<GalleryMetadata<GalleryItem>>;\r\n\r\n    /**\r\n     * Data loader currently used\r\n     */\r\n    protected _dataLoader: DataLoader<DataResponse<GalleryItemData>>;\r\n\r\n    /**\r\n     * Subscription listening for metadata changes\r\n     */\r\n    protected _metadataChangedSubscription: Subscription;\r\n\r\n    /**\r\n     * Subscription listening for data changes\r\n     */\r\n    protected _dataChangedSubscription: Subscription;\r\n\r\n    //######################### public properties - implementation of GalleryContentRenderer #########################\r\n\r\n    /**\r\n     * Options for content renderer\r\n     */\r\n    public get options(): TOptions\r\n    {\r\n        return this._options;\r\n    }\r\n    public set options(options: TOptions)\r\n    {\r\n        this._options = extend(true, this._options, options) as TOptions;\r\n    }\r\n\r\n    /**\r\n     * Information about current ordering state\r\n     */\r\n    public ordering: TOrdering;\r\n\r\n    /**\r\n     * Indication that ordering has changed\r\n     */\r\n    public orderingChange: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n    //######################### public properties #########################\r\n\r\n    /**\r\n     * Gets data that are present for displaying\r\n     */\r\n    public get data(): GalleryItemData[]\r\n    {\r\n        return this._dataLoader?.result?.data;\r\n    }\r\n\r\n    //######################### constructor #########################\r\n    constructor(public pluginElement: ElementRef,\r\n                protected _changeDetector: ChangeDetectorRef,\r\n                @Inject(GRID_PLUGIN_INSTANCES) @Optional() public gridPlugins: GridPluginInstances,\r\n                @Inject(CONTENT_RENDERER_OPTIONS) @Optional() options?: GalleryContentRendererOptions<CssClassesGalleryContentRenderer>)\r\n    {\r\n        this._options = extend(true, {}, defaultOptions, options);\r\n    }\r\n\r\n    //######################### public methods - implementation of OnDestroy #########################\r\n    \r\n    /**\r\n     * Called when component is destroyed\r\n     */\r\n    public ngOnDestroy()\r\n    {\r\n        this._dataChangedSubscription?.unsubscribe();\r\n        this._dataChangedSubscription = null;\r\n        \r\n        this._metadataChangedSubscription?.unsubscribe();\r\n        this._metadataChangedSubscription = null;\r\n    }\r\n\r\n    //######################### public methods - implementation of GalleryContentRenderer #########################\r\n    \r\n    /**\r\n     * Initialize plugin, to be ready to use, initialize communication with other plugins\r\n     */\r\n    public initialize()\r\n    {\r\n        let metadataSelector: MetadataSelector<GalleryMetadata<GalleryItem>> = this.gridPlugins[METADATA_SELECTOR] as MetadataSelector<GalleryMetadata<GalleryItem>>;\r\n\r\n        if(this._metadataSelector && this._metadataSelector != metadataSelector)\r\n        {\r\n            this._metadataChangedSubscription.unsubscribe();\r\n            this._metadataChangedSubscription = null;\r\n            this._metadataSelector = null;\r\n        }\r\n\r\n        if(!this._metadataSelector)\r\n        {\r\n            this._metadataSelector = metadataSelector;\r\n\r\n            this._metadataChangedSubscription = this._metadataSelector.metadataChange.subscribe(() => this.invalidateVisuals());\r\n        }\r\n\r\n        let dataLoader: DataLoader<DataResponse<GalleryItemData>> = this.gridPlugins[DATA_LOADER] as DataLoader<DataResponse<GalleryItemData>>;\r\n\r\n        if(this._dataLoader && this._dataLoader != dataLoader)\r\n        {\r\n            this._dataChangedSubscription.unsubscribe();\r\n            this._dataChangedSubscription = null;\r\n            this._dataLoader = null;\r\n        }\r\n\r\n        if(!this._dataLoader)\r\n        {\r\n            this._dataLoader = dataLoader;\r\n\r\n            this._dataChangedSubscription = this._dataLoader.resultChange.subscribe(() => this.invalidateVisuals());\r\n        }\r\n\r\n        this.invalidateVisuals();\r\n    }\r\n    \r\n    /**\r\n     * Initialize plugin options, all operations required to be done with plugin options are handled here\r\n     */\r\n    public initOptions()\r\n    {\r\n    }\r\n    \r\n    /**\r\n     * Explicitly runs invalidation of content (change detection)\r\n     */\r\n    public invalidateVisuals(): void\r\n    {\r\n        this._changeDetector.detectChanges();\r\n    }\r\n}","import {Component, ChangeDetectionStrategy, Input} from \"@angular/core\";\r\n\r\nimport {GalleryItem} from \"./gallery.interface\";\r\n\r\n/**\r\n * Component for gathering information about gallery item\r\n */\r\n@Component(\r\n{\r\n    selector: 'gallery-item',\r\n    template: '',\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class GalleryItemComponent implements GalleryItem\r\n{\r\n    //######################### public properties #########################\r\n\r\n    /**\r\n     * Source of gallery item\r\n     */\r\n    @Input()\r\n    source: string;\r\n}","import {ExistingProvider, Component, ChangeDetectionStrategy, EventEmitter, forwardRef, ContentChildren, QueryList, AfterContentInit} from \"@angular/core\";\r\nimport {METADATA_GATHERER, MetadataGatherer} from \"@anglr/grid\";\r\n\r\nimport {GalleryMetadata, GalleryItem} from \"./gallery.interface\";\r\nimport {GalleryItemComponent} from \"./galleryItem.component\";\r\n\r\n/**\r\n * Component that is used for gathering metadata for gallery\r\n *\r\n * This is metadata gatherer which works with `GalleryItemComponent`\r\n */\r\n@Component(\r\n{\r\n    selector: 'gallery-metadata',\r\n    template: '',\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    providers:\r\n    [\r\n        <ExistingProvider>\r\n        {\r\n            provide: METADATA_GATHERER,\r\n            useExisting: forwardRef(() => GalleryMetadataGathererComponent)\r\n        }\r\n    ]\r\n})\r\nexport class GalleryMetadataGathererComponent<TGalleryItem extends GalleryItem> implements AfterContentInit, MetadataGatherer<GalleryMetadata<TGalleryItem>>\r\n{\r\n    //######################### public properties - implementation of MetadataGatherer<BasicTableColumn[]> #########################\r\n\r\n    /**\r\n     * Information that metadata for grid has changed\r\n     */\r\n    public metadataChange: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n    //######################### public properties - children #########################\r\n\r\n    /**\r\n     * Gets gallery item defined in template\r\n     * @internal\r\n     */\r\n    @ContentChildren(GalleryItemComponent)\r\n    public items: QueryList<TGalleryItem>;\r\n\r\n    //######################### public methods - implementation of MetadataGatherer<BasicTableColumn[]> #########################\r\n\r\n    /**\r\n     * Gets current metadata for grid\r\n     */\r\n    public getMetadata(): GalleryMetadata<TGalleryItem>\r\n    {\r\n        return {\r\n            item: this.items?.first\r\n        };\r\n    }\r\n\r\n    //######################### public methods - implementation of AfterContentInit #########################\r\n\r\n    /**\r\n     * Called when content was initialized\r\n     */\r\n    public ngAfterContentInit()\r\n    {\r\n        this.items.changes.subscribe(() =>\r\n        {\r\n            this.metadataChange.emit();\r\n        });\r\n    }\r\n}"],"sourceRoot":""}