{"version":3,"sources":["webpack://telecovid/./content/l10n|lazy|/^/.*/.json$/|groupOptions: {}|namespace object","webpack://telecovid/./app/hacks.ts","webpack://telecovid/./app/boot/app.component.animations.ts","webpack://telecovid/./app/services/api/configRelease/configRelease.service.ts","webpack://telecovid/./app/modules/electron/directives/ifElectron/ifElectron.directive.ts","webpack://telecovid/./app/modules/menu/components/mainMenu/mainMenu.animations.ts","webpack://telecovid/./app/modules/menu/directives/submenuPopup/submenuPopup.directive.ts","webpack://telecovid/./app/modules/menu/components/mainMenu/mainMenu.component.html","webpack://telecovid/./app/modules/menu/components/mainMenu/mainMenu.component.ts","webpack://telecovid/./app/boot/app.component.html","webpack://telecovid/./app/boot/app.component.ts","webpack://telecovid/./app/pages/accessDenied/accessDenied.component.ts","webpack://telecovid/./app/pages/accessDenied/accessDenied.component.html","webpack://telecovid/./app/pages/notFound/notFound.component.ts","webpack://telecovid/./app/pages/notFound/notFound.component.html","webpack://telecovid/./app/boot/app.component.routes.ts","webpack://telecovid/./app/services/api/account/account.service.ts","webpack://telecovid/./app/services/globalization/globalization.service.ts","webpack://telecovid/./app/services/api/restLogger/restLogger.service.ts","webpack://telecovid/./app/services/api/ping/ping.service.ts","webpack://telecovid/./app/services/session/session.service.ts","webpack://telecovid/./app/services/session/session.interceptor.ts","webpack://telecovid/./app/boot/app.config.ts","webpack://telecovid/./app/services/webpackTranslateLoader/webpackTranslateLoader.service.ts","webpack://telecovid/./app/main.browser.bootstrap.ts","webpack://telecovid/./app/boot/app.module.ts","webpack://telecovid/./app/boot/browser-app.module.ts","webpack://telecovid/./app/misc/constants.ts","webpack://telecovid/./app/misc/tokens.ts","webpack://telecovid/./app/modules/displayingFeature.module.ts","webpack://telecovid/./app/modules/electron/misc/tokens.ts","webpack://telecovid/./app/modules/formsFeature.module.ts","webpack://telecovid/./app/modules/debuggingFeature.module.ts","webpack://telecovid/./app/modules/gridFeature.module.ts","webpack://telecovid/./app/modules/electron/modules/electron.module.ts","webpack://telecovid/./app/modules/responsiveUtils/modules/threeLinesIcon.module.ts","webpack://telecovid/./app/modules/responsiveUtils/modules/mediaQueries.module.ts","webpack://telecovid/./app/modules/responsiveUtils/modules/formValuePreview.module.ts","webpack://telecovid/./app/modules/menu/modules/menu.module.ts","webpack://telecovid/./app/modules/titleBar/modules/titleBar.module.ts","webpack://telecovid/./app/modules/sessionModals/modules/sessionModals.module.ts","webpack://telecovid/./app/modules/collapsible/modules/collapsible.module.ts","webpack://telecovid/./app/modules/vahaTag/modules/vahaTag.module.ts","webpack://telecovid/./app/modules/vyberStlpcovBtn/modules/vyberStlpcovBtn.module.ts","webpack://telecovid/./app/modules/animatedIcons/modules/animatedIcons.module.ts","webpack://telecovid/./app/modules/inactivityDialog/components/inactivityDialog/inactivityDialog.component.ts","webpack://telecovid/./app/modules/inactivityDialog/components/inactivityDialog/inactivityDialog.component.html","webpack://telecovid/./app/modules/inactivityDialog/modules/inactivityDialog.module.ts","webpack://telecovid/./app/modules/gridExtensions/modules/responsiveContentRenderer.module.ts","webpack://telecovid/./app/modules/gridExtensions/services/columnContextGetter/basicColumnContextGetter.service.ts","webpack://telecovid/./app/modules/gridExtensions/pipes/dropEmptyItems.pipe.ts","webpack://telecovid/./app/modules/gridExtensions/tokens.ts","webpack://telecovid/./app/modules/gridExtensions/pipes/getColumnContext.pipe.ts","webpack://telecovid/./app/modules/gridExtensions/plugins/contentRenderer/responsiveCssDivs/body/responsiveCssDivsBodyContentRenderer.component.html","webpack://telecovid/./app/modules/gridExtensions/plugins/contentRenderer/responsiveCssDivs/body/responsiveCssDivsBodyContentRenderer.component.ts","webpack://telecovid/./app/modules/gridExtensions/plugins/contentRenderer/responsiveCssDivs/header/responsiveCssDivsHeaderContentRenderer.component.html","webpack://telecovid/./app/modules/gridExtensions/plugins/contentRenderer/responsiveCssDivs/header/responsiveCssDivsHeaderContentRenderer.component.ts","webpack://telecovid/./app/modules/gridExtensions/pipes/gridTemplateColumns.pipe.ts","webpack://telecovid/./app/modules/gridExtensions/plugins/contentRenderer/responsiveCssDivs/responsiveCssDivsContentRenderer.component.ts","webpack://telecovid/./app/modules/gridExtensions/plugins/contentRenderer/responsiveCssDivs/responsiveCssDivsContentRenderer.component.html","webpack://telecovid/./app/modules/responsiveUtils/components/threeLinesIcon/threeLinesIcon.component.ts","webpack://telecovid/./app/modules/responsiveUtils/components/threeLinesIcon/threeLinesIcon.component.html","webpack://telecovid/./app/modules/responsiveUtils/directives/maxWidthQuery/maxWidthQuery.directive.ts","webpack://telecovid/./app/modules/selectExtensions/modules/selectEnumExtensions.module.ts","webpack://telecovid/./app/modules/sessionModals/components/startSession/startSession.component.ts","webpack://telecovid/./app/modules/sessionModals/components/startSession/startSession.component.html","webpack://telecovid/./app/modules/sessionModals/components/endSession/endSession.component.ts","webpack://telecovid/./app/modules/sessionModals/components/endSession/endSession.component.html","webpack://telecovid/./app/modules/titleBar/components/titleBar/titleBar.component.ts","webpack://telecovid/./app/modules/titleBar/components/titleBar/titleBar.component.html","webpack://telecovid/./app/modules/userSettings/modules/userSettings.module.ts","webpack://telecovid/./app/modules/userSettings/components/userSettings/userSettings.component.ts","webpack://telecovid/./app/modules/userSettings/components/userSettings/userSettings.component.html","webpack://telecovid/./app/services/settings/settings.service.ts","webpack://telecovid/./app/services/settings/localSettingsStorage.ts"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","t","keys","Object","module","exports","global","HTMLDocument","Konami","isBlank","log","observableSubscribe","Observable","next","error","complete","isFunction","err","config","console","call","this","routeAnimationTrigger","optional","position","perspective","top","left","width","height","transform","opacity","loaderTrigger","ConfigReleaseService","IfElectronDirective","_template","_isElectron","_viewContainer","additionalCondition","view","createEmbeddedView","insert","changes","nameof","clear","menuSlideAnimation","color","SubmenuPopupDirective","_element","_breakPointObserver","_clickOutsideSubscriptions","Subscription","_popupVisible","element","nativeElement","_divPopup","querySelector","_spanIcon","clickOutsideElements","toArray","forEach","itm","clickOutsideElement","add","clickOutsideConditionChange","subscribe","isMatched","_togglePopupVisibility","remove","_popperInstance","destroy","unsubscribe","event","preventDefault","stopPropagation","classList","toggle","append","placement","MainMenuComponent","_authSvc","_router","_dialog","_changeDetector","_initSubscriptions","loggedUser","menuVisible","menuAnimation","buildLoggedUser","identity","firstName","surname","userIdentity","authenticationChanged","isAuthenticated","toggleVisibility","detectChanges","toggleAnimation","setTimeout","logout","navigate","open","title","maxHeight","openSettings","AppComponent","translateSvc","_appHotkeys","_configSvc","settings","logger","document","consoleVisible","authenticated","routeComponentState","guiVersion","serverVersion","serverName","initialized","verbose","body","theme","_theme","_settingsChangeSubscription","settingsChange","use","language","_settingsDebuggingChangeSubscription","settingsDebuggingChange","_toggleConsoleHotkey","setDefaultLang","getUserIdentity","_authChangedSubscription","settingsDebugging","consoleEnabled","srvCfg","get","toPromise","release","name","_routerOutletActivatedSubscription","routerOutlet","activateEvents","activatedRouteData","activatedRoute","component","oldHelpHotkey","hotkeys","AccessDeniedComponent","statusCodeService","setStatusCode","path","NotFoundComponent","components","routesOptions","rootModule","rootModuleConfig","enableTracing","preloadingStrategy","staticRoutesBefore","redirectTo","pathMatch","loadChildren","DefaultModule","SamplesModule","MeraniaModule","PacientiModule","LekariModule","ZariadeniaModule","PomocModule","AccountService","http","injector","_keycloakSvc","_storage","baseUrl","middlewaresOrder","methodMiddlewares","super","E","clearToken","window","location","href","catch","isElectron","observer","isLoggedIn","profile","loadUserProfile","privileges","getUserRoles","concat","userName","username","lastName","permissions","login","GlobalizationService","empty","RestLoggerService","_logs","PingService","SessionService","_pingSvc","intervalId","sessionExpirationDate","finalCountdownId","setInterval","isBefore","Date","subSeconds","clearInterval","setFinalCountdown","minutes","Math","floor","BEFORE_SESSION_END","timeSpan","num","result","data","afterClosed","ping","updateSessionTimeout","setInactivityInterval","pingIntervalInSec","now","maxInactiveIntervalInSec","addSeconds","startPinging","timeout","SessionInterceptor","_sessionService","_inactivityRequestExceptions","request","handle","pipe","tap","type","isInRequestExceptions","url","catchError","status","throwError","some","exception","test","SESSION_INTERCEPTOR","provide","useClass","multi","providers","useFactory","useValue","errors","validationErrors","message","push","Array","isArray","defaultMessage","authService","keycloak","storage","sessionService","startSessionTimeout","redirectUri","RegExp","token","init","realm","clientId","initOptions","onLoad","checkLoginIframe","enableBearerInterceptor","loadUserProfileAtStartUp","getToken","set","alert","deps","texts","loading","noData","notLoaded","P","itemsPerPageValues","initialItemsPerPage","showButtonVisible","cssClasses","containerDiv","thDefault","headerCellDiv","nothingSelected","settingsSvc","settingsLogging","consoleLogLevel","debugDataEnabled","setEnabled","debugData","locale","sk","mock","WebpackTranslateLoaderService","lang","default","platform","AppModule","appId","loader","BrowserAppModule","start","rendererLogger","bootstrapModule","moduleRef","isStable","clearAndDeactivate","cheatSheetCloseEsc","APP_TRANSFER_ID","NOTHING_SELECTED","AUTH_TOKEN","WEB_APP_READY","SHOW_NOTIFICATION","SET_GENERAL_SETTINGS","SET_DEBUGGING_SETTINGS","SET_LOGGING_SETTINGS","GET_GENERAL_SETTINGS","GET_DEBUGGING_SETTINGS","GET_LOGGING_SETTINGS","NOTIFICATION_TITLE","RESPONSIVE_WIDTH","RESPONSIVE_WIDTH_MEDIA","ANIMATE_TO_VISIBLE","ANIMATE_TO_HIDDEN","NG_APP_STABLE","TITLE_BAR","SETTINGS_STORAGE","FILE_LOGGER","DisplayingFeatureModule","IS_ELECTRON","FormsFeatureModule","DebuggingFeatureModule","GridFeatureModule","ElectronModule","ThreeLinesIconModule","MediaQueriesModule","FormValuePreviewModule","MenuModule","TitleBarModule","SessionModalsModule","CollapsibleModule","VahaTagModule","VyberStlpcovBtnModule","AnimatedIconsModule","InactivityDialogComponent","dialog","InactivityDialogModule","ResponsiveContentRendererModule","BasicColumnContextGetterService","_grid","_injector","datum","meta","index","startingIndex","DropEmptyItemsPipe","value","filter","COLUMN_CONTEXT_GETTER","providedIn","factory","GetColumnContextPipe","_columnContextGetter","getColumnContext","defaultOptions","bodyDiv","rowDiv","responsiveRowDiv","responsiveRowTitleColumn","cellDiv","ResponsiveCssDivsBodyContentRendererComponent","pluginElement","changeDetector","gridPlugins","options","responsiveView","_options","extend","_responsiveSubscription","observe","matches","headerDiv","headerCellOrderableDiv","spanContent","spanOrdering","spanOrderingDirection","none","asc","desc","ResponsiveCssDivsHeaderContentRendererComponent","GridTemplateColumnsPipe","columns","responsiveStyleValue","length","gridTemplateColumns","column","visible","join","plugins","bodyRenderer","headerRenderer","ResponsiveCssDivsContentRendererComponent","_breakpointObserver","_metadataSelector","metadata","ngOnDestroy","_invalidateVisuals","setHeaderRendererComponent","setBodyRendererComponent","ThreeLinesIconComponent","_maxWidthQuery","visibleChange","hidden","_queryChangeSubscription","queryMatch","emit","markForCheck","warn","MaxWidthQueryDirective","_value","isNumber","state","SelectEnumExtensionsModule","StartSessionComponent","EndSessionComponent","TitleBarComponent","titleBarSvc","_maximizeChangeSubscription","maximizedChange","UserSettingsModule","UserSettingsSections","UserSettingsComponent","formBuilder","consoleConfig","themes","languages","logLevels","activeSection","General","debuggingSettings","loggingSettings","_getLogLevels","generalSettingsForm","group","debuggingSettingsForm","loggingSettingsForm","fileLogLevel","valueChanges","generalSettings","setSettings","debugSettings","setDebuggingSettings","restrictToLevel","setLoggingSettings","val","isNaN","SettingsService","keyValueDiffers","_settings","_settingsDebugging","getDebugging","_settingsLogging","getLogging","_settingsChangeSubject","Subject","_settingsDebuggingChangeSubject","_settingsValueDiff","find","create","diff","_settingsDebuggingValueDiff","asObservable","forEachChangedItem","key","setDebugging","setLogging","GENERAL_SETTINGS_STORAGE","DEBUGGING_SETTINGS_STORAGE","LOGGING_SETTINGS_STORAGE","LocalSettingsStorage"],"mappings":"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","file":"433.client.es2015.chunk.d901ab97295068b58ef4.js","sourcesContent":["var map = {\n\t\"./en.json\": [\n\t\t41626,\n\t\t626\n\t],\n\t\"./sk.json\": [\n\t\t65241,\n\t\t241\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(() => {\n\t\treturn __webpack_require__.t(id, 3);\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = 25048;\nmodule.exports = webpackAsyncContext;","import {updateHttpRequestClone} from '@anglr/common';\nimport {isFunction, isBlank, initializeJsDevMode, globalDefine} from '@jscrpt/common';\nimport {Observable} from 'rxjs';\n\nimport {config} from './config';\n\ninitializeJsDevMode();\nupdateHttpRequestClone();\n\nglobalDefine(global =>\n{\n    if(!global.HTMLDocument)\n    {\n        global.HTMLDocument = function(){};\n    }\n\n    if(!global.Konami)\n    {\n        global.Konami = function(){};\n    }\n\n    if(isBlank(global['isElectron']))\n    {\n        global['isElectron'] = false;\n    }\n\n    if(isBlank(global['envName']))\n    {\n        global['envName'] = 'WEB';\n    }\n\n    if(isBlank(global['rendererLogger']))\n    {\n        global['rendererLogger'] = {log:() => {}};\n    }\n});\n\n//HACK - prevents application crash if no error handler provided\nconst observableSubscribe = Observable.prototype.subscribe;\n\nObservable.prototype.subscribe = <any>function(next, error, complete)\n{\n    if(isBlank(error) || !isFunction(error))\n    {\n        error = (err) => \n        {\n            if(config.configuration.debug)\n            {\n                console.log(err);\n            }\n        };\n    }\n\n    return observableSubscribe.call(this, next, error, complete);\n};","import {trigger, transition, query, animate, style, animateChild, group} from '@angular/animations';\n\n/**\n * Animations run when changing route\n */\nexport const routeAnimationTrigger = trigger('routeAnimations',\n[\n    transition('void <=> *, none <=> *',\n    [\n        query(':enter', animateChild(), {optional: true})\n    ]),\n    transition('* => login',\n    [\n        query('.main-content',\n        [\n            style(\n            {\n                position: 'relative',\n                perspective: '10000px'\n            }),\n            query(':enter, :leave',\n            [\n                style(\n                {\n                    position: 'absolute',\n                    top: 0,\n                    left: 0,\n                    width: '100%',\n                    height: '100%'\n                })\n            ]),\n            query(':enter',\n            [\n                style(\n                {\n                    transform: 'rotateY(-90deg)',\n                    opacity: 0\n                })\n            ]),\n            query(':leave', animateChild()),\n            group(\n            [\n                query(':leave',\n                [\n                    animate('350ms ease-out', style(\n                    {\n                        transform: 'rotateY(90deg)',\n                        opacity: 0\n                    }))\n                ]),\n                query(':enter',\n                [\n                    animate('350ms 350ms ease-out', style(\n                    {\n                        transform: 'rotateY(0)',\n                        opacity: 1\n                    }))\n                ])\n            ]),\n            query(':enter', animateChild())\n        ])\n    ]),\n    transition('login => *',\n    [\n        query('.main-content',\n        [\n            style(\n            {\n                position: 'relative',\n                perspective: '10000px'\n            }),\n            query(':enter, :leave',\n            [\n                style(\n                {\n                    position: 'absolute',\n                    top: 0,\n                    left: 0,\n                    width: '100%',\n                    height: '100%'\n                })\n            ]),\n            query(':enter',\n            [\n                style(\n                {\n                    transform: 'rotateY(-90deg)',\n                    opacity: 0\n                })\n            ]),\n            query(':leave', animateChild()),\n            group(\n            [\n                query(':leave',\n                [\n                    animate('350ms ease-out', style(\n                    {\n                        transform: 'rotateY(90deg)',\n                        opacity: 0\n                    }))\n                ]),\n                query(':enter',\n                [\n                    animate('350ms 350ms ease-out', style(\n                    {\n                        transform: 'rotateY(0)',\n                        opacity: 1\n                    }))\n                ])\n            ]),\n            query(':enter', animateChild())\n        ])\n    ]),\n    transition('* => *',\n    [\n        query('.main-content',\n        [\n            style({ position: 'relative' }),\n            query(':enter, :leave',\n            [\n                style(\n                {\n                    position: 'absolute',\n                    top: 0,\n                    left: 0,\n                    width: '100%',\n                    height: '100%'\n                })\n            ]),\n            query(':enter',\n            [\n                style({ opacity: 0})\n            ]),\n            query(':leave', animateChild()),\n            group(\n            [\n                query(':leave',\n                [\n                    animate('350ms ease-out', style({ opacity: 0}))\n                ]),\n                query(':enter',\n                [\n                    animate('350ms ease-out', style({ opacity: 1}))\n                ])\n            ]),\n            query(':enter', animateChild())\n        ])\n    ])\n]);\n\nexport const loaderTrigger = trigger('loaderAnimation',\n[\n    transition(':leave',\n    [\n        group(\n        [\n            query('.loading-card', \n            [\n                animate('300ms', style(\n                {\n                    transform: 'scale(4)'\n                }))\n            ]),\n            animate('200ms 100ms', style(\n            {\n                opacity: 0\n            }))\n            \n        ])\n    ])\n]);","import {Injectable} from '@angular/core';\nimport {RESTClient, GET, BaseUrl, DefaultHeaders} from '@anglr/rest';\nimport {Observable} from 'rxjs';\n\nimport {ConfigReleaseData} from './configRelease.interface';\nimport {config} from '../../../config';\n\n/**\n * Service used to access configuration of application\n */\n@Injectable()\n@BaseUrl(config.configuration.apiBaseUrl)\n@DefaultHeaders(config.configuration.defaultApiHeaders)\nexport class ConfigReleaseService extends RESTClient\n{\n    //######################### public methods #########################\n\n    /**\n     * Gets configuration of app\n     * @returns Observable\n     */\n    @GET('config/release')\n    public get(): Observable<ConfigReleaseData>\n    {\n        return null;\n    }\n}\n","import {Directive, TemplateRef, Inject, ViewContainerRef, Input, OnChanges, SimpleChanges, OnInit} from '@angular/core';\nimport {nameof, isBlank} from '@jscrpt/common';\n\nimport {IS_ELECTRON} from '../../misc';\n\n/**\n * Directive that displays element only when application is running in electron\n */\n@Directive(\n{\n    selector: '[ifElectron]'\n})\nexport class IfElectronDirective implements OnChanges, OnInit\n{\n    //######################### public properties - inputs #########################\n\n    /**\n     * Additional condition passed to directive\n     */\n    @Input('ifElectron')\n    public additionalCondition: boolean|string;\n\n    //######################### constructor #########################\n    constructor(private _template: TemplateRef<void>,\n                @Inject(IS_ELECTRON) private _isElectron: boolean,\n                private _viewContainer: ViewContainerRef)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit()\n    {\n        if(this._isElectron && isBlank(this.additionalCondition))\n        {\n            const view = this._viewContainer.createEmbeddedView(this._template);\n            this._viewContainer.insert(view);\n        }\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n    \n    /**\n     * Called when input value changes\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        if(nameof<IfElectronDirective>('additionalCondition') in changes)\n        {\n            if(this._isElectron && this.additionalCondition)\n            {\n                const view = this._viewContainer.createEmbeddedView(this._template);\n                this._viewContainer.insert(view);\n            }\n            else\n            {\n                this._viewContainer.clear();\n            }\n        }\n    }\n}","import {animate, style, transition, trigger} from '@angular/animations';\n\nimport {ANIMATE_TO_HIDDEN, ANIMATE_TO_VISIBLE} from '../../../../misc/constants';\n\nexport const menuSlideAnimation = trigger('menuSlide',\n[\n    transition(`${ANIMATE_TO_HIDDEN} => ${ANIMATE_TO_VISIBLE}`,\n    [\n        style(\n        {\n            height: 0,\n            color: 'transparent'\n        }),\n        animate('260ms ease-in', style(\n        {\n            height: '*',\n            color: '*'\n        }))\n    ]),\n    transition(`${ANIMATE_TO_VISIBLE} => ${ANIMATE_TO_HIDDEN}`,\n    [\n        animate('260ms ease-out', style(\n        {\n            height: 0,\n            color: 'transparent'\n        }))\n    ])\n]);","import {AfterContentInit, ContentChildren, Directive, ElementRef, HostListener, OnDestroy, QueryList} from '@angular/core';\nimport {BreakpointObserver} from '@angular/cdk/layout';\nimport {ClickOutsideDirective} from '@anglr/common';\nimport {createPopper, Instance} from '@popperjs/core';\nimport {Subscription} from 'rxjs';\n\nimport {RESPONSIVE_WIDTH_MEDIA} from '../../../../misc/constants';\n\n/**\n * Directive used for handling submenu popup\n */\n@Directive(\n{\n    selector: 'a[submenuPopup]'\n})\nexport class SubmenuPopupDirective implements AfterContentInit, OnDestroy\n{\n    //######################### private fields #########################\n\n    /**\n     * Subscriptions for click outside directive changes\n     */\n    private _clickOutsideSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Indication whether popup is visible\n     */\n    private _popupVisible: boolean = false;\n\n    /**\n     * Html div popup element\n     */\n    private _divPopup: HTMLDivElement;\n\n    /**\n     * Span icon element\n     */\n    private _spanIcon: HTMLSpanElement;\n\n    /**\n     * Instance of popperjs\n     */\n    private _popperInstance: Instance;\n\n    //######################### public properties - children #########################\n\n    /**\n     * Click outside directives\n     */\n    @ContentChildren(ClickOutsideDirective, {descendants: true})\n    public clickOutsideElements: QueryList<ClickOutsideDirective>;\n\n    //######################### constructor #########################\n    constructor(private _element: ElementRef<HTMLAnchorElement>,\n                private _breakPointObserver: BreakpointObserver)\n    {\n    }\n\n    //######################### public methods - implementation of AfterContentInit #########################\n\n    /**\n     * Called when content was initialized\n     */\n    public ngAfterContentInit()\n    {\n        const element = this._element.nativeElement;\n\n        this._divPopup = element.querySelector('div');\n        this._spanIcon = element.querySelector('.fas');\n\n        this.clickOutsideElements.toArray().forEach(itm => \n        {\n            itm.clickOutsideElement = this._element.nativeElement;\n\n            this._clickOutsideSubscriptions.add(itm.clickOutsideConditionChange.subscribe(() =>\n            {\n                if(this._popupVisible && !this._breakPointObserver.isMatched(RESPONSIVE_WIDTH_MEDIA))\n                {\n                    this._togglePopupVisibility();\n                }\n            }));\n        });\n\n        if(!this._divPopup || !this._spanIcon)\n        {\n            throw new Error('Missing popup div or icon span.fas!');\n        }\n\n        this._divPopup.remove();\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy()\n    {\n        this._popperInstance?.destroy();\n        this._popperInstance = null;\n        \n        this._clickOutsideSubscriptions?.unsubscribe();\n        this._clickOutsideSubscriptions = null;\n    }\n\n    //######################### public methods - hosts #########################\n\n    /**\n     * Toggles popup visibility\n     */\n    @HostListener('click', ['$event'])\n    public togglePopup(event: MouseEvent)\n    {\n        event.preventDefault();\n        event.stopPropagation();\n\n        this._togglePopupVisibility();\n    }\n\n    //######################### private methods #########################\n\n    /**\n     * Toggles visibility of popup\n     */\n    private _togglePopupVisibility()\n    {\n        this._popupVisible = !this._popupVisible;\n        this._spanIcon.classList.toggle('fa-caret-down');\n        this._spanIcon.classList.toggle('fa-caret-up');\n\n        if(this._popupVisible)\n        {\n            this._element.nativeElement.append(this._divPopup);\n\n            if(!this._breakPointObserver.isMatched(RESPONSIVE_WIDTH_MEDIA))\n            {\n                this._popperInstance?.destroy();\n    \n                this._popperInstance = createPopper(this._element.nativeElement, this._divPopup,\n                {\n                    placement: 'bottom-start'\n                });\n            }\n        }\n        else\n        {\n            this._divPopup.remove();\n        }\n    }\n}","<div class=\"main-menu\">\r\n    <div class=\"flex-row\">\r\n        <div class=\"icon-corona-svg\"></div>\r\n        <div class=\"extra-extra-large-text text-uppercase align-self-center\">telecovid</div>\r\n    </div>\r\n\r\n    <ng-template authorize=\"authenticated\">\r\n        <div class=\"main-menu-items\" *ngIf=\"menuVisible\" [@menuSlide]=\"menuAnimation\">\r\n            <a *authorize=\"'registre-menu-group'\" submenuPopup routerLinkActive=\"active\" class=\"main-item margin-right-extra-small\" >\r\n                <span>Registre</span>\r\n                <span class=\"fas fa-caret-down\"></span>\r\n\r\n                <div [clickOutside]=\"true\">\r\n                    <a *authorize=\"'pacienti-prehlad-page'\" routerLink=\"/pacienti/prehlad\" routerLinkActive=\"active\" class=\"submenu-item\">Register pacientov</a>\r\n                    <a *authorize=\"'lekari-prehlad-page'\" routerLink=\"/lekari/prehlad\" routerLinkActive=\"active\" class=\"submenu-item\">Register lekárov</a>\r\n                    <a *authorize=\"'zariadenia-prehlad-page'\" routerLink=\"/zariadenia/prehlad\" routerLinkActive=\"active\" class=\"submenu-item\">Register zariadení</a>\r\n                </div>\r\n            </a>\r\n\r\n            <a *authorize=\"'merania-prehlad-page'\" routerLink=\"/merania/prehlad\" routerLinkActive=\"active\" class=\"main-item margin-right-extra-small\">Všeobecný prehľad</a>\r\n\r\n            <a *authorize=\"'authenticated'\" submenuPopup routerLinkActive=\"active\" class=\"main-item margin-right-extra-small\">\r\n                <span>{{loggedUser}}</span>\r\n                <span class=\"fas fa-caret-down\"></span>\r\n\r\n                <div [clickOutside]=\"true\">\r\n                    <a (click)=\"logout()\" class=\"submenu-item\">Logout</a>\r\n                </div>\r\n            </a>\r\n\r\n            <a *authorize=\"'help-page'\" routerLink=\"/pomoc/index\" routerLinkActive=\"active\" class=\"main-item margin-right-extra-small\">Pomoc</a>\r\n\r\n            <a *authorize=\"'debug-info'\" submenuPopup routerLinkActive=\"active\" class=\"main-item margin-right-extra-small\">\r\n                <span>Development</span>\r\n                <span class=\"fas fa-caret-down\"></span>\r\n\r\n                <div [clickOutside]=\"true\">\r\n                    <a routerLink=\"/samples/components\" routerLinkActive=\"active\" class=\"submenu-item\">Sample components</a>\r\n                    <a routerLink=\"/samples/styles\" routerLinkActive=\"active\" class=\"submenu-item\">Sample styles</a>\r\n                </div>\r\n            </a>\r\n        </div>\r\n    </ng-template>\r\n    \r\n    <div class=\"settings\">\r\n        <a (click)=\"openSettings()\" class=\"fas fa-cog\"></a>\r\n        <div *authorize=\"'authenticated'\" class=\"three-lines\" (click)=\"updateAnimation()\" maxWidthQuery (visibleChange)=\"menuVisible = $event; animationToHidden()\"></div>\r\n    </div>\r\n</div>","import {Component, ChangeDetectionStrategy, OnInit, OnDestroy, ChangeDetectorRef} from '@angular/core';\nimport {Router} from '@angular/router';\nimport {AuthenticationService, UserIdentity} from '@anglr/authentication';\nimport {TitledDialogService} from '@anglr/common/material';\nimport {Subscription} from 'rxjs';\n\nimport {UserSettingsComponent} from '../../../userSettings';\nimport {ANIMATE_TO_HIDDEN, ANIMATE_TO_VISIBLE} from '../../../../misc/constants';\nimport {menuSlideAnimation} from './mainMenu.animations';\n\n/**\n * Component used for displaying application main menu\n */\n@Component(\n{\n    selector: 'main-menu',\n    templateUrl: 'mainMenu.component.html',\n    styleUrls: ['mainMenu.component.scss'],\n    animations: [menuSlideAnimation],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MainMenuComponent implements OnInit, OnDestroy\n{\n    //######################### private fields #########################\n\n    /**\n     * Subscription created during init\n     */\n    private _initSubscriptions: Subscription = new Subscription();\n\n    //######################### public properties - template bindings #########################\n\n    /**\n     * Name of currently logged user\n     */\n    public loggedUser: string = '';\n\n    /**\n     * Indication whether is menu visible\n     */\n    public menuVisible: boolean = true;\n\n    /**\n     * Name of animation 'state' for slide in out animation of menu\n     */\n    public menuAnimation: string = ANIMATE_TO_HIDDEN;\n\n    //######################### constructor #########################\n    constructor(private _authSvc: AuthenticationService<any>,\n                private _router: Router,\n                private _dialog: TitledDialogService,\n                private _changeDetector: ChangeDetectorRef)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n\n    /**\n     * Initialize component\n     */\n    public ngOnInit()\n    {\n        const buildLoggedUser = (identity: UserIdentity) =>\n        {\n            this.loggedUser = `${identity.firstName} ${identity.surname}`;\n        };\n\n        buildLoggedUser(this._authSvc.userIdentity);\n\n        this._initSubscriptions.add(this._authSvc.authenticationChanged.subscribe(identity =>\n        {\n            if(identity.isAuthenticated)\n            {\n                buildLoggedUser(identity);\n            }\n            else\n            {\n                this.loggedUser = '';\n            }\n        }));\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy()\n    {\n        this._initSubscriptions?.unsubscribe();\n        this._initSubscriptions = null;\n    }\n\n    //######################### public methods - template bindings #########################\n\n    /**\n     * Changes animation state to hidden\n     */\n    public animationToHidden()\n    {\n        this.menuAnimation = ANIMATE_TO_HIDDEN;\n    }\n\n    /**\n     * Updates animation\n     */\n    public updateAnimation()\n    {\n        const toggleVisibility = () =>\n        {\n            this.menuVisible = !this.menuVisible;\n\n            this._changeDetector.detectChanges();\n        };\n\n        const toggleAnimation = () =>\n        {\n            if(this.menuAnimation == ANIMATE_TO_HIDDEN)\n            {\n                this.menuAnimation = ANIMATE_TO_VISIBLE;\n            }\n            else\n            {\n                this.menuAnimation = ANIMATE_TO_HIDDEN;\n            }\n\n            this._changeDetector.detectChanges();\n        };\n\n        //show\n        if(!this.menuVisible)\n        {\n            toggleVisibility();\n            toggleAnimation();\n        }\n        //hide\n        else\n        {\n            toggleAnimation();\n\n            //TODO - solve this differently using pure animation\n            setTimeout(() =>\n            {\n                toggleVisibility();\n            }, 260);\n        }\n    }\n\n    /**\n     * Logs out user\n     */\n    public async logout()\n    {\n        this._authSvc\n            .logout()\n            .subscribe(() =>\n            {\n                this._router.navigate(['/login']);\n            });\n    }\n\n    /**\n     * Opens settings dialog\n     */\n    public openSettings()\n    {\n        this._dialog.open(UserSettingsComponent,\n        {\n            title: 'user settings',\n            maxHeight: '80vh'\n        });\n    }\n}","<div *ifElectron class=\"title-bar\"></div>\r\n\r\n<div class=\"flex-1 flex-column\">\r\n    <main-menu></main-menu>\r\n\r\n    <progress-indicator></progress-indicator>\r\n    <internal-server-error></internal-server-error>\r\n    <global-notifications></global-notifications>\r\n    <hotkeys-cheatsheet></hotkeys-cheatsheet>\r\n\r\n    <div class=\"content relative\" [@routeAnimations]=\"routeComponentState\">\r\n        <div class=\"main-content\">\r\n            <router-outlet #outlet=\"outlet\"></router-outlet>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"gui-version\">GUI version: {{guiVersion}}</div>\r\n\r\n    <console *ngIf=\"consoleVisible\" @consoleAnimation></console>\r\n</div>\r\n\r\n<div class=\"loading-indicator\" *ngIf=\"!initialized\" @loaderAnimation>\r\n    <div class=\"loading-header\">\r\n        <div class=\"loading-title\">TELECOVID</div>\r\n    </div>\r\n\r\n    <div class=\"loading-card\"></div>\r\n    <div class=\"loading-spinner\"></div>\r\n</div>","import {Component, OnDestroy, AfterViewInit, ViewChild, ChangeDetectionStrategy, ChangeDetectorRef, Inject, OnInit} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {RouterOutlet} from '@angular/router';\nimport {LOGGER, Logger} from '@anglr/common';\nimport {consoleAnimationTrigger} from '@anglr/common/structured-log';\nimport {AppHotkeysService} from '@anglr/common/hotkeys';\nimport {AuthenticationService} from '@anglr/authentication';\nimport {fadeInOutTrigger} from '@anglr/animations';\nimport {nameof} from '@jscrpt/common';\nimport {TranslateService} from '@ngx-translate/core';\nimport {Hotkey} from 'angular2-hotkeys';\nimport {Subscription} from 'rxjs';\n\nimport {loaderTrigger, routeAnimationTrigger} from './app.component.animations';\nimport {SettingsService} from '../services/settings';\nimport {ConfigReleaseService} from '../services/api/configRelease/configRelease.service';\nimport {SettingsGeneral, SettingsDebug} from '../config';\nimport version from '../../config/version.json';\n\n/**\n * Application entry component\n */\n@Component(\n{\n    selector: 'app',\n    templateUrl: 'app.component.html',\n    styleUrls: ['app.component.scss'],\n    animations: [routeAnimationTrigger, fadeInOutTrigger, consoleAnimationTrigger, loaderTrigger],\n    providers: [AppHotkeysService, ConfigReleaseService],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AppComponent implements OnInit, AfterViewInit, OnDestroy\n{\n    //######################### private fields #########################\n    \n    /**\n     * Subscription for router outlet activation changes\n     */\n    private _routerOutletActivatedSubscription: Subscription;\n\n    /**\n     * Subscription for authenticated changes\n     */\n    private _authChangedSubscription: Subscription;\n\n    /**\n     * Subscription for changes of general settings\n     */\n    private _settingsChangeSubscription: Subscription;\n\n    /**\n     * Subscription for changes of debugging settings\n     */\n    private _settingsDebuggingChangeSubscription: Subscription;\n\n    /**\n     * Currently active theme\n     */\n    private _theme: string;\n\n    //######################### public properties - template bindings #########################\n\n    /**\n     * Indication whether is console visible\n     */\n    public consoleVisible: boolean = false;\n\n    /**\n     * Indication whether is used authenticated\n     */\n    public authenticated: boolean = false;\n\n    /**\n     * Name of state for routed component animation\n     */\n    public routeComponentState: string = 'none';\n\n    /**\n     * Current version of gui\n     */\n    public guiVersion: string = version.version;\n\n    /**\n     * Version of server\n     */\n    public serverVersion: string = '';\n\n    /**\n     * Name of server\n     */\n    public serverName: string = '';\n\n    /**\n     * Indication whether is application initialized\n     */\n    public initialized: boolean = false;\n\n    //######################### public properties - children #########################\n\n    /**\n     * Router outlet that is used for loading routed components\n     */\n    @ViewChild('outlet')\n    public routerOutlet: RouterOutlet;\n\n    //######################### constructor #########################\n    constructor(_authSvc: AuthenticationService<any>,\n                translateSvc: TranslateService,\n                private _changeDetector: ChangeDetectorRef,\n                private _appHotkeys: AppHotkeysService,\n                private _configSvc: ConfigReleaseService,\n                settings: SettingsService,\n                @Inject(LOGGER) logger: Logger,\n                @Inject(DOCUMENT) document: HTMLDocument)\n    {\n        logger.verbose('Application is starting, main component constructed.');\n\n        document.body.classList.add('app-page', settings.settings.theme);\n        this._theme = settings.settings.theme;\n\n        new Konami(() =>\n        {\n            console.log('konami enabled');\n        });\n\n        this._settingsChangeSubscription = settings.settingsChange\n            .subscribe(itm => \n            {\n                if(itm == nameof<SettingsGeneral>('theme'))\n                {\n                    document.body.classList.remove(this._theme);\n                    this._theme = settings.settings.theme;\n                    document.body.classList.add(this._theme);\n                }\n\n                if(itm == nameof<SettingsGeneral>('language'))\n                {\n                    translateSvc.use(settings.settings.language);\n                    this._changeDetector.detectChanges();\n                }\n            });\n\n        this._settingsDebuggingChangeSubscription = settings.settingsDebuggingChange\n            .subscribe(itm => \n            {\n                if(itm == nameof<SettingsDebug>('consoleEnabled'))\n                {\n                    this._toggleConsoleHotkey();\n                }\n            });\n\n        translateSvc.setDefaultLang('en');\n        translateSvc.use(settings.settings.language);\n\n        _authSvc\n            .getUserIdentity()\n            .then(identity =>\n            {\n                this.authenticated = identity.isAuthenticated;\n\n                _changeDetector.detectChanges();\n            });\n\n        this._authChangedSubscription = _authSvc.authenticationChanged.subscribe(identity =>\n        {\n            this.authenticated = identity.isAuthenticated;\n\n            _changeDetector.detectChanges();\n        });\n\n        if(settings.settingsDebugging?.consoleEnabled)\n        {\n            this._toggleConsoleHotkey();\n        }\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public async ngOnInit()\n    {\n        const srvCfg = await this._configSvc.get().toPromise();\n\n        this.serverVersion = srvCfg.release;\n        this.serverName = srvCfg.name;\n        \n        this._changeDetector.detectChanges();\n    }\n\n    //######################### public methods - implementation of AfterViewInit #########################\n    \n    /**\n     * Called when view was initialized\n     */\n    public ngAfterViewInit()\n    {\n        this._routerOutletActivatedSubscription = this.routerOutlet.activateEvents.subscribe(() =>\n        {\n            this.routeComponentState = this.routerOutlet.activatedRouteData['animation'] || (<any>this.routerOutlet.activatedRoute.component).name;\n        });\n\n        this.initialized = true;\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy()\n    {\n        this._routerOutletActivatedSubscription?.unsubscribe();\n        this._routerOutletActivatedSubscription = null;\n\n        this._authChangedSubscription?.unsubscribe();\n        this._authChangedSubscription = null;\n\n        this._settingsChangeSubscription?.unsubscribe();\n        this._settingsChangeSubscription = null;\n\n        this._settingsDebuggingChangeSubscription?.unsubscribe();\n        this._settingsDebuggingChangeSubscription = null;\n\n        this._appHotkeys.destroy();\n    }\n\n    //######################### private methods #########################\n\n    /**\n     * Toggles hotkey for displaying console log\n     */\n    private _toggleConsoleHotkey()\n    {\n        const oldHelpHotkey = this._appHotkeys.hotkeys.get('~');\n\n        if(oldHelpHotkey)\n        {\n            this._appHotkeys.hotkeys.remove(oldHelpHotkey);\n        }\n        else\n        {\n            this._appHotkeys.hotkeys.add(new Hotkey('~', () =>\n            {\n                this.consoleVisible = !this.consoleVisible;\n                this._changeDetector.detectChanges();\n\n                return false;\n            }, null, 'Show console'));\n        }\n    }\n}","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {ComponentRoute} from '@anglr/common/router';\nimport {StatusCodeService} from '@anglr/common';\n\n/**\n * Component used for displaying access denied page\n */\n@Component(\n{\n    selector: 'access-denied-view',\n    templateUrl: 'accessDenied.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@ComponentRoute({path:'accessDenied'})\nexport class AccessDeniedComponent\n{\n    //######################### constructor #########################\n    constructor(statusCodeService: StatusCodeService)\n    {\n        statusCodeService.setStatusCode(403);\n    }\n}","<h3 class=\"title top-border-round margin-none\">PRÍSTUP ZAKÁZANÝ</h3>\r\n\r\n<div class=\"light-block padding-top-small bottom-border-round full-height\">\r\n    <h2>\r\n        <span class=\"fa fa-minus-circle text-danger\"></span>\r\n        <span>Prístup zakázaný!</span>\r\n        <span class=\"fa fa-minus-circle text-danger\"></span>\r\n    </h2>\r\n</div>\r\n","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {ComponentRoute} from '@anglr/common/router';\nimport {StatusCodeService} from '@anglr/common';\n\n/**\n * Page displayed when url was not found\n */\n@Component(\n{\n    selector: 'not-found-view',\n    templateUrl: 'notFound.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@ComponentRoute({path: '**'})\nexport class NotFoundComponent\n{\n    //######################### constructor #########################\n    constructor(statusCodeService: StatusCodeService)\n    {\n        statusCodeService.setStatusCode(404);\n    }\n}","<h3 class=\"title top-border-round margin-none\">STRÁNKA NENÁJDENÁ</h3>\r\n\r\n<div class=\"light-block padding-top-small bottom-border-round full-height\">\r\n    <h2>\r\n        <span class=\"fa fa-file-o text-danger\"></span>\r\n        <span>Stránka nebola nájdená!</span>\r\n        <span class=\"fa fa-file-o text-danger\"></span>\r\n    </h2>\r\n</div>","import {Type} from '@angular/core';\nimport {PreloadAllModules} from '@angular/router';\nimport {ModuleRoutesOptions} from '@anglr/common/router';\n\nimport {AccessDeniedComponent} from '../pages/accessDenied/accessDenied.component';\nimport {NotFoundComponent} from '../pages/notFound/notFound.component';\n\nexport const components: Type<any>[] =\n[\n    AccessDeniedComponent,\n    NotFoundComponent\n];\n\nexport const routesOptions: ModuleRoutesOptions =\n{\n    rootModule: true,\n    rootModuleConfig:\n    {\n        enableTracing: false,\n        preloadingStrategy: PreloadAllModules\n    },\n    staticRoutesBefore:\n    [\n        //default page redirect\n        {\n            path: '',\n            redirectTo: 'merania',\n            pathMatch: 'full'\n        },\n        {\n            path: '',\n            loadChildren: () => import('../pages/+default/default.module').then(({DefaultModule}) => DefaultModule)\n        },\n        {\n            path: 'samples',\n            loadChildren: () => import('../pages/+samples/samples.module').then(({SamplesModule}) => SamplesModule)\n        },\n        {\n            path: 'merania',\n            loadChildren: () => import('../pages/+merania/merania.module').then(({MeraniaModule}) => MeraniaModule)\n        },\n        {\n            path: 'pacienti',\n            loadChildren: () => import('../pages/+pacienti/pacienti.module').then(({PacientiModule}) => PacientiModule)\n        },\n        {\n            path: 'lekari',\n            loadChildren: () => import('../pages/+lekari/lekari.module').then(({LekariModule}) => LekariModule)\n        },\n        {\n            path: 'zariadenia',\n            loadChildren: () => import('../pages/+zariadenia/zariadenia.module').then(({ZariadeniaModule}) => ZariadeniaModule)\n        },\n        {\n            path: 'pomoc',\n            loadChildren: () => import('../pages/+pomoc/pomoc.module').then(({PomocModule}) => PomocModule)\n        }\n    ]\n};","import {Injectable, Optional, Inject, Injector, Type} from '@angular/core';\nimport {Router} from '@angular/router';\nimport {HttpClient} from '@angular/common/http';\nimport {HTTP_REQUEST_BASE_URL, PermanentStorage, PERMANENT_STORAGE} from '@anglr/common';\nimport {RESTClient, BaseUrl, DefaultHeaders, REST_MIDDLEWARES_ORDER, REST_METHOD_MIDDLEWARES, RestMiddleware} from '@anglr/rest';\nimport {AuthenticationServiceOptions, UserIdentity} from '@anglr/authentication';\nimport {KeycloakService} from 'keycloak-angular';\nimport {EMPTY, NEVER, Observable, Observer} from 'rxjs';\n\nimport {config} from '../../../config';\nimport {IS_ELECTRON} from '../../../modules';\nimport {AUTH_TOKEN} from '../../../misc/constants';\n\n/**\n * Service used to access user account information\n */\n@Injectable()\n@BaseUrl(config.configuration.apiBaseUrl)\n@DefaultHeaders(config.configuration.defaultApiHeaders)\nexport class AccountService extends RESTClient implements AuthenticationServiceOptions<any>\n{\n    //######################### constructor #########################\n    constructor(http: HttpClient,\n                injector: Injector,\n                private _keycloakSvc: KeycloakService,\n                @Inject(PERMANENT_STORAGE) private _storage: PermanentStorage,\n                @Optional() @Inject(HTTP_REQUEST_BASE_URL) baseUrl?: string,\n                @Inject(REST_MIDDLEWARES_ORDER) middlewaresOrder?: Type<RestMiddleware>[],\n                @Inject(REST_METHOD_MIDDLEWARES) methodMiddlewares?: Type<RestMiddleware>[])\n    {\n        super(http, baseUrl, injector, middlewaresOrder, methodMiddlewares);\n    }\n\n    //######################### public methods - implementation of AuthenticationServiceOptions #########################\n\n    /**\n     * Method logs user into system\n     * @returns Observable\n     */\n    public login(): Observable<any>\n    {\n        return EMPTY;\n    }\n\n    /**\n     * Gets indication whether current state of app is displaying login page\n     * @returns boolean\n     */\n    public isAuthPage(): boolean\n    {\n        return false;\n    }\n\n    /**\n     * Methods logs out user out of system\n     * @returns Observable\n     */\n    public logout(): Observable<any>\n    {\n        this._keycloakSvc.clearToken();\n\n        this._keycloakSvc\n            .logout(config.configuration.keycloak.redirectUri)\n            .then(() => \n            {\n                this._storage.remove(AUTH_TOKEN);\n                window.location.href = '/';\n            })\n            .catch(() => \n            {\n                this._storage.remove(AUTH_TOKEN);\n                // window.location.reload();\n                window.location.href = '/';\n            });\n\n        return NEVER;\n    }\n\n    /**\n     * Gets information about user\n     * @returns Observable\n     */\n    public getUserIdentity(): Observable<UserIdentity<any>>\n    {\n        const isElectron = this.injector.get(IS_ELECTRON);\n\n        return Observable.create(async (observer: Observer<any>) =>\n        {\n            //authenticated\n            if(await this._keycloakSvc.isLoggedIn())\n            {\n                const profile = await this._keycloakSvc.loadUserProfile();\n                let privileges = this._keycloakSvc.getUserRoles();\n                // const token: string = await this._keycloakSvc.getToken();\n                // const tokenPayload = this._getTokenPayload(token);\n\n                privileges = privileges.concat(isElectron ? ['authorized-electron'] : ['authorized-browser']);\n\n                observer.next(\n                {\n                    isAuthenticated: true,\n                    userName: profile.username,\n                    firstName: profile.firstName,\n                    surname: profile.lastName,\n                    permissions: privileges.concat(['authenticated']),\n                    //additionalInfo: { omType: tokenPayload.omType },\n                });\n\n                observer.complete();\n            }\n            else\n            {\n                observer.next(\n                {\n                    isAuthenticated: false,\n                    userName: '',\n                    permissions: [].concat(isElectron ? ['authorized-electron'] : ['authorized-browser']),\n                    firstName: '',\n                    surname: ''\n                });\n                \n                observer.complete();\n            }\n        });\n    }\n\n    /**\n     * Redirects current page to authentication page\n     */\n    public showAuthPage(): Promise<boolean>\n    {\n        return this._keycloakSvc.login() as any;\n    }\n\n    /**\n     * Redirects current page to access denied page\n     */\n    public showAccessDenied(): Promise<boolean>\n    {\n        return this.injector.get(Router).navigate(['/accessDenied']);\n    }\n}","import {Injectable} from '@angular/core';\nimport {GlobalizationService as GlobalizationServiceInterface} from '@anglr/common';\n\nimport {Observable, empty} from 'rxjs';\n\n/**\n * Globalization service that is used for obtaining globalization language\n */\n@Injectable()\nexport class GlobalizationService extends GlobalizationServiceInterface\n{\n    /**\n     * Gets current name of locale, that is used within picker\n     */\n    public get locale(): string\n    {\n        return 'sk';\n    }\n    \n    /**\n     * Gets observable that emits data when locale changes and change should be applied to picker\n     */\n    public get localeChange(): Observable<void>\n    {\n        return empty();\n    }\n}","import {Injectable} from '@angular/core';\nimport {RESTClient, BaseUrl, DefaultHeaders, POST, JsonContentType, Body, DisableInterceptor} from '@anglr/rest';\nimport {LoggerRestClient, RestLog} from '@anglr/common/structured-log';\nimport {HttpErrorInterceptor} from '@anglr/error-handling';\nimport {AuthInterceptor, SuppressAuthInterceptor} from '@anglr/authentication';\nimport {Observable} from 'rxjs';\n\nimport {config} from '../../../config';\n\n/**\n * Service used for logging logs on server\n */\n@Injectable()\n@BaseUrl(config.configuration.apiBaseUrl)\n@DefaultHeaders(config.configuration.defaultApiHeaders)\nexport class RestLoggerService extends RESTClient implements LoggerRestClient\n{\n    //######################### public methods - implementation of LoggerRestClient #########################\n\n    /**\n     * Logs message on server using REST\n     * @param logs - Array of logs to be logged\n     */\n    @JsonContentType()\n    @DisableInterceptor(HttpErrorInterceptor)\n    @DisableInterceptor(AuthInterceptor)\n    @DisableInterceptor(SuppressAuthInterceptor)\n    @POST('logger')\n    public log(@Body _logs: RestLog[]): Observable<void>\n    {\n        return null;\n    }\n}","import {Injectable} from '@angular/core';\nimport {RESTClient, BaseUrl, DefaultHeaders} from '@anglr/rest';\nimport {EMPTY, Observable} from 'rxjs';\n\nimport {config} from '../../../config';\n\n/**\n * Service used for calling ping\n */\n@Injectable({providedIn: 'root'})\n@BaseUrl(config.configuration.apiBaseUrl)\n@DefaultHeaders(config.configuration.defaultApiHeaders)\nexport class PingService extends RESTClient\n{\n    //######################### public methods #########################\n\n    /**\n     * Tests whether remote server is accessible\n     * @returns Observable\n     */\n    // @DisableInterceptor(ProgressInterceptor)\n    // @GET(\"ping\")\n    public ping(): Observable<void>\n    {\n        return EMPTY;\n    }\n}","import {Injectable} from '@angular/core';\nimport {AuthenticationService} from '@anglr/authentication';\nimport {TitledDialogService} from '@anglr/common/material';\nimport {isBlank} from '@jscrpt/common';\nimport {isBefore, subSeconds, addSeconds} from 'date-fns';\n\nimport {PingService} from '../api/ping';\nimport {InactivityDialogComponent} from '../../modules';\n\nfunction plural(num: number): boolean\n{\n    return num > 1 && num < 5 && ~~(num / 10) !== 1;\n}\n\n// in seconds\nconst BEFORE_SESSION_END = 60;\n\n/**\n * Service that is used for managing auth session\n */\n@Injectable({providedIn: 'root'})\nexport class SessionService\n{\n    intervalId: number = null;\n    maxInactiveIntervalInSec: number;\n    sessionExpirationDate: Date = null;\n\n    // it's the\n    finalCountdownId: number = null;\n\n    constructor(private _authSvc: AuthenticationService<any>,\n                private _pingSvc: PingService,\n                private _dialog: TitledDialogService)\n    {\n    }\n\n    private setInactivityInterval()\n    {\n        this.intervalId = window.setInterval(async () =>\n        {\n            if (!isBefore(new Date(), subSeconds(this.sessionExpirationDate, BEFORE_SESSION_END)))\n            {\n                window.clearInterval(this.intervalId);\n                this.setFinalCountdown();\n\n                const minutes = Math.floor(BEFORE_SESSION_END / 60);\n                const timeSpan = minutes > 1 ? minutes + ' ' + (plural(minutes) ? 'minúty' : 'minút') : 'minútu';\n\n                const result = await this._dialog.open<InactivityDialogComponent, string, boolean>(InactivityDialogComponent,\n                {\n                    title: 'Upozornenie na inaktivitu',\n                    width: '40wv',\n                    data: timeSpan\n                }).afterClosed().toPromise();\n\n                if(isBlank(result))\n                {\n                    return;\n                }\n\n                if (result)\n                {\n                    this._pingSvc.ping().subscribe(() =>\n                    {\n                        window.clearInterval(this.finalCountdownId);\n                        this.updateSessionTimeout();\n                        this.setInactivityInterval();\n                    });\n                }\n                else\n                {\n                    window.clearInterval(this.finalCountdownId);\n                    this.logout();\n                }\n            }\n        }, 1000);\n    }\n\n    private startPinging(pingIntervalInSec)\n    {\n        window.setInterval(() =>\n        {\n            this._pingSvc.ping().subscribe(() => console.log('PING sent', Date.now()));\n        }, pingIntervalInSec * 1000);\n    }\n\n    private setFinalCountdown()\n    {\n        this.finalCountdownId = window.setInterval(() =>\n        {\n            if (!isBefore(new Date(), this.sessionExpirationDate))\n            {\n                this.logout();\n            }\n        }, 1000);\n    }\n\n    startSessionTimeout(maxInactiveIntervalInSec: number, pingIntervalInSec: number)\n    {\n        this.maxInactiveIntervalInSec = maxInactiveIntervalInSec;\n        this.sessionExpirationDate = addSeconds(new Date(), this.maxInactiveIntervalInSec);\n\n        if (!this.intervalId)\n        {\n            this.setInactivityInterval();\n            this.startPinging(pingIntervalInSec);\n        }\n        else\n        {\n            console.error('Error: session timeout already started');\n        }\n    }\n\n    updateSessionTimeout(timeout?: number)\n    {\n        this.maxInactiveIntervalInSec = timeout || this.maxInactiveIntervalInSec;\n        this.sessionExpirationDate = addSeconds(new Date(), this.maxInactiveIntervalInSec);\n    }\n\n    logout()\n    {\n        this._authSvc.logout().subscribe(() => {});\n    }\n}\n","import {ClassProvider, Injectable} from '@angular/core';\nimport {HttpEvent, HttpHandler, HttpInterceptor, HttpRequest, HTTP_INTERCEPTORS} from '@angular/common/http';\nimport {Observable, throwError} from 'rxjs';\nimport {catchError, tap} from 'rxjs/operators';\n\nimport {SessionService} from './session.service';\n\n/**\n * Interceptor used for refreshing session\n */\n@Injectable()\nexport class SessionInterceptor implements HttpInterceptor\n{\n    //######################### private fields #########################\n    \n    /**\n     * Url that is exception for refreshing session\n     */\n    private _inactivityRequestExceptions = [/\\/ping$/];\n\n    //######################### constructor #########################\n    constructor(private _sessionService: SessionService)\n    {\n    }\n\n    //######################### public methods #########################\n    \n    /**\n     * Intercepts http request and refresh session of required\n     */\n    public intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>>\n    {\n        return next.handle(request).pipe(\n            tap(data =>\n            {\n                if(data.type === 4)\n                {\n                    if (!this.isInRequestExceptions(request.url))\n                    {\n                        this._sessionService.updateSessionTimeout();\n                    }\n                    else\n                    {\n                        console.log(`Request URL (${request.url}) is on inactivity exception list, session timeout not changed`);\n                    }\n                }\n            }),\n            catchError(error =>\n            {\n                if (error.status === 401)\n                {\n                    this._sessionService.logout();\n                }\n\n                return throwError(error);\n            }));\n    }\n\n    //######################### private methods #########################\n\n    /**\n     * Tests whether is url contain in array of exceptions\n     */\n    private isInRequestExceptions(url: string)\n    {\n        return this._inactivityRequestExceptions.some(exception => exception.test(url));\n    }\n}\n\n/**\n * Session interceptor provider\n */\nexport const SESSION_INTERCEPTOR: ClassProvider =\n{\n    provide: HTTP_INTERCEPTORS,\n    useClass: SessionInterceptor,\n    multi: true\n};","import {FactoryProvider, APP_INITIALIZER, ClassProvider, ValueProvider} from '@angular/core';\nimport {AuthenticationService, AUTH_INTERCEPTOR_PROVIDER, AUTHENTICATION_SERVICE_OPTIONS, SUPPRESS_AUTH_INTERCEPTOR_PROVIDER} from '@anglr/authentication';\nimport {LocalPermanentStorageService} from '@anglr/common/store';\nimport {PROGRESS_INTERCEPTOR_PROVIDER, GlobalizationService, STRING_LOCALIZATION, PERMANENT_STORAGE, DebugDataEnabledService, PermanentStorage} from '@anglr/common';\nimport {ConsoleSinkConfigService, LOGGER_REST_CLIENT, REST_SINK} from '@anglr/common/structured-log';\nimport {NgxTranslateStringLocalizationService} from '@anglr/translate-extensions';\nimport {ERROR_RESPONSE_MAP_PROVIDER, HttpErrorInterceptorOptions, HTTP_ERROR_INTERCEPTOR_PROVIDER, BadRequestDetail, HttpGatewayTimeoutInterceptorOptions, NoConnectionInterceptorOptions, HTTP_GATEWAY_TIMEOUT_INTERCEPTOR_PROVIDER, NO_CONNECTION_INTERCEPTOR_PROVIDER, SERVICE_UNAVAILABLE_INTERCEPTOR_PROVIDER, ANGLR_EXCEPTION_HANDLER_PROVIDER, ERROR_WITH_URL_EXTENDER} from '@anglr/error-handling';\nimport {DIALOG_INTERNAL_SERVER_ERROR_RENDERER_PROVIDER} from '@anglr/error-handling/material';\nimport {NO_DATA_RENDERER_OPTIONS, NoDataRendererOptions, PAGING_OPTIONS, BasicPagingOptions, METADATA_SELECTOR_TYPE, METADATA_SELECTOR_OPTIONS, CONTENT_RENDERER_OPTIONS, TableContentRendererOptions, HEADER_CONTENT_RENDERER_OPTIONS, TableHeaderContentRendererOptions, CONTENT_RENDERER_TYPE} from '@anglr/grid';\nimport {DialogMetadataSelectorComponent, DialogMetadataSelectorOptions} from '@anglr/grid/material';\nimport {NORMAL_STATE_OPTIONS, NormalStateOptions} from '@anglr/select';\nimport {DATE_FNS_REST_DATE_API} from '@anglr/rest/date-fns';\nimport {DATE_API} from '@anglr/datetime';\nimport {DateFnsDateApi, DateFnsLocale, DATEFNS_FORMAT_PROVIDER, DATE_FNS_LOCALE} from '@anglr/datetime/date-fns';\nimport {KeycloakService} from 'keycloak-angular';\nimport {sk} from 'date-fns/locale';\nimport {LogEventLevel} from 'structured-log';\n\nimport {config} from '../config';\nimport {AccountService} from '../services/api/account/account.service';\nimport {GlobalizationService as GlobalizationServiceImpl} from '../services/globalization/globalization.service';\nimport {AUTH_TOKEN, NOTHING_SELECTED} from '../misc/constants';\nimport {SettingsService, LocalSettingsStorage} from '../services/settings';\nimport {SETTINGS_STORAGE} from '../misc/tokens';\nimport {RestLoggerService} from '../services/api/restLogger';\nimport {SessionService, SESSION_INTERCEPTOR} from '../services/session';\nimport {CssClassesResponsiveCssDivsHeaderContentRenderer, ResponsiveCssDivsContentRendererComponent} from '../modules';\n\n/**\n * Creates APP initialization factory, that first try to authorize user before doing anything else\n * @param authService Authentication service used for authentication of user\n */\nexport function appInitializerFactory(authService: AuthenticationService<any>,\n                                      keycloak: KeycloakService,\n                                      storage: PermanentStorage,\n                                      sessionService: SessionService): () => Promise<void>\n{\n    return async () =>\n    {\n        sessionService.startSessionTimeout(config.configuration.keycloak.maxInactiveIntervalInSec || 1800,\n                                           config.configuration.keycloak.pingIntervalInSec || 45);\n\n        const redirectUri = new RegExp('^' + config.configuration.keycloak.redirectUri).test(window.location.href) ? window.location.href : config.configuration.keycloak.redirectUri;\n\n        let token = storage.get<string>(AUTH_TOKEN);\n\n        await keycloak.init(\n        {\n            config:\n            {\n                url: config.configuration.keycloak.oauthServerUrl,\n                realm: config.configuration.keycloak.keycloakRealm,\n                clientId: config.configuration.keycloak.keycloakClient\n            },\n            initOptions:\n            {\n                redirectUri: redirectUri,\n                onLoad: 'login-required',\n                // enableLogging: true,\n                checkLoginIframe: false,\n                token: token\n            },\n            enableBearerInterceptor: true,\n            loadUserProfileAtStartUp: true\n        });\n\n        token = await keycloak.getToken();\n        storage.set(AUTH_TOKEN, token);\n\n        try\n        {\n            await authService\n                .getUserIdentity();\n        }\n        catch(e)\n        {\n            alert(`Authentication failed: ${e}`);\n\n            throw e;\n        }\n    };\n}\n\n/**\n * Factory for HttpErrorInterceptorOptions\n */\nexport function httpErrorInterceptorOptionsFactory()\n{\n    return new HttpErrorInterceptorOptions(config.configuration.debug);\n}\n\n/**\n * Response mapping function\n */\nexport function httpErrorInterceptorMappingFunction(err: any) : BadRequestDetail\n{\n    const result =\n    {\n        errors: [],\n        validationErrors: {}\n    };\n\n    if(err && err.message)\n    {\n        result.errors.push(err.message);\n    }\n\n    if(err && err.errors && Array.isArray(err.errors))\n    {\n        (<Array<any>>err.errors).forEach(itm =>\n        {\n            let message = '';\n\n            if(itm.defaultMessage)\n            {\n                message += itm.defaultMessage;\n            }\n\n            if(itm.code)\n            {\n                message = `${itm.code}: ${message}`;\n            }\n\n            if(message)\n            {\n                result.errors.push(message);\n            }\n        });\n    }\n\n    return result;\n}\n\n/**\n * Factory method for creating HttpGatewayTimeoutInterceptorOptions\n */\nexport function httpGatewayTimeoutInterceptorOptionsFactory()\n{\n    return new HttpGatewayTimeoutInterceptorOptions('Server neodpovedal v stanovenom čase.');\n}\n\n/**\n * Factory method for creating NoConnectionInterceptorOptions\n */\nexport function noConnectionInterceptorOptionsFactory()\n{\n    return new NoConnectionInterceptorOptions('Server je mimo prevádzky.');\n}\n\n/**\n * Array of providers that are used in app module\n */\nexport const providers =\n[\n    //######################### HTTP INTERCEPTORS #########################\n    HTTP_GATEWAY_TIMEOUT_INTERCEPTOR_PROVIDER,\n    SERVICE_UNAVAILABLE_INTERCEPTOR_PROVIDER,\n    HTTP_ERROR_INTERCEPTOR_PROVIDER,\n    SESSION_INTERCEPTOR,\n    NO_CONNECTION_INTERCEPTOR_PROVIDER,\n    SUPPRESS_AUTH_INTERCEPTOR_PROVIDER,\n    AUTH_INTERCEPTOR_PROVIDER,\n    PROGRESS_INTERCEPTOR_PROVIDER,\n\n    //######################### NO CONNECTION INTERCEPTOR OPTIONS #########################\n    <FactoryProvider>\n    {\n        useFactory: noConnectionInterceptorOptionsFactory,\n        provide: NoConnectionInterceptorOptions\n    },\n\n    //######################### HTTP GATEWAY TIMEOUT INTERCEPTOR OPTIONS #########################\n    <FactoryProvider>\n    {\n        useFactory: httpGatewayTimeoutInterceptorOptionsFactory,\n        provide: HttpGatewayTimeoutInterceptorOptions\n    },\n\n    //######################### GLOBALIZATION SERVICE #########################\n    <ClassProvider>\n    {\n        provide: GlobalizationService,\n        useClass: GlobalizationServiceImpl\n    },\n\n    //######################### AUTHENTICATION & AUTHORIZATION #########################\n    <ClassProvider>\n    {\n        provide: AUTHENTICATION_SERVICE_OPTIONS,\n        useClass: AccountService\n    },\n\n    //######################### ERROR HANDLING #########################\n    <FactoryProvider>\n    {\n        provide: HttpErrorInterceptorOptions,\n        useFactory: httpErrorInterceptorOptionsFactory\n    },\n    ERROR_WITH_URL_EXTENDER,\n    ANGLR_EXCEPTION_HANDLER_PROVIDER,\n    DIALOG_INTERNAL_SERVER_ERROR_RENDERER_PROVIDER,\n\n    <ValueProvider>\n    {\n        provide: ERROR_RESPONSE_MAP_PROVIDER,\n        useValue: httpErrorInterceptorMappingFunction\n    },\n\n    //######################### APP INITIALIZER #########################\n    <FactoryProvider>\n    {\n        useFactory: appInitializerFactory,\n        provide: APP_INITIALIZER,\n        deps: [AuthenticationService, KeycloakService, PERMANENT_STORAGE, SessionService],\n        multi: true\n    },\n\n    //######################### GRID GLOBAL OPTIONS #########################\n    <ValueProvider>\n    {\n        provide: NO_DATA_RENDERER_OPTIONS,\n        useValue: <NoDataRendererOptions<any>>\n        {\n            texts:\n            {\n                loading: 'Nahrávam dáta ...',\n                noData: 'Neboli nájdené dáta odpovedajúce zadaným parametrom',\n                notLoaded: 'Neboli načítané žiadne dáta zatiaľ'\n            }\n        }\n    },\n    <ValueProvider>\n    {\n        provide: PAGING_OPTIONS,\n        useValue: <BasicPagingOptions>\n        {\n            itemsPerPageValues: [15, 30, 60],\n            initialItemsPerPage: 15\n        }\n    },\n    <ValueProvider>\n    {\n        provide: METADATA_SELECTOR_TYPE,\n        useValue: DialogMetadataSelectorComponent\n    },\n    <ValueProvider>\n    {\n        provide: METADATA_SELECTOR_OPTIONS,\n        useValue: <DialogMetadataSelectorOptions>\n        {\n            showButtonVisible: false\n        }\n    },\n    <ValueProvider>\n    {\n        provide: CONTENT_RENDERER_OPTIONS,\n        useValue: <TableContentRendererOptions>\n        {\n            cssClasses:\n            {\n                containerDiv: 'table-container thin-scrollbar'\n            }\n        }\n    },\n    <ValueProvider>\n    {\n        provide: HEADER_CONTENT_RENDERER_OPTIONS,\n        useValue: <TableHeaderContentRendererOptions&CssClassesResponsiveCssDivsHeaderContentRenderer>\n        {\n            cssClasses:\n            {\n                thDefault: 'header-default fixed-header',\n                headerCellDiv: 'header-cell fixed-header'\n            }\n        }\n    },\n    <ValueProvider>\n    {\n        provide: CONTENT_RENDERER_TYPE,\n        useValue: ResponsiveCssDivsContentRendererComponent\n    },\n    \n    //############################ SELECT GLOBAL OPTIONS ############################\n    <ValueProvider>\n    {\n        provide: NORMAL_STATE_OPTIONS,\n        useValue: <NormalStateOptions<any>>\n        {\n            texts:\n            {\n                nothingSelected: NOTHING_SELECTED\n            }\n        }\n    },\n\n    //######################### STRING LOCALIZATION #########################\n    <ClassProvider>\n    {\n        provide: STRING_LOCALIZATION,\n        useClass: NgxTranslateStringLocalizationService\n    },\n\n    //######################### PERMANENT STORAGE #########################\n    <ClassProvider>\n    {\n        provide: PERMANENT_STORAGE,\n        useClass: LocalPermanentStorageService\n    },\n\n    //######################### LOGGER #########################\n    REST_SINK,\n    <FactoryProvider>\n    {\n        provide: ConsoleSinkConfigService,\n        useFactory: (settingsSvc: SettingsService) =>\n        {\n            return new ConsoleSinkConfigService(null, LogEventLevel[settingsSvc?.settingsLogging?.consoleLogLevel]);\n        },\n        deps: [SettingsService]\n    },\n    <ClassProvider>\n    {\n        provide: LOGGER_REST_CLIENT,\n        useClass: RestLoggerService\n    },\n    <ClassProvider>\n    {\n        provide: SETTINGS_STORAGE,\n        useClass: LocalSettingsStorage\n    },\n\n    //######################### REST #########################\n    DATE_FNS_REST_DATE_API,\n\n    //######################### DEBUG DATA #########################\n    <FactoryProvider>\n    {\n        provide: DebugDataEnabledService,\n        useFactory: (settingsSvc: SettingsService) =>\n        {\n            const debugDataEnabled = new DebugDataEnabledService();\n\n            debugDataEnabled.setEnabled(settingsSvc.settingsDebugging?.debugData);\n\n            return debugDataEnabled;\n        },\n        deps: [SettingsService]\n    },\n\n    //######################### DATE API #########################\n    <ClassProvider>\n    {\n        provide: DATE_API,\n        useClass: DateFnsDateApi\n    },\n    DATEFNS_FORMAT_PROVIDER,\n    <ValueProvider>\n    {\n        provide: DATE_FNS_LOCALE,\n        useValue: <DateFnsLocale>\n        {\n            locale: sk\n        }\n    },\n    \n    //######################### DATE API #########################\n    ...config.configuration?.keycloak?.mock ? [\n        <ValueProvider>\n        {\n            provide: KeycloakService,\n            useValue:\n            {\n                init: () => Promise.resolve(),\n                getToken: () => Promise.resolve('MOCK_TOKEN'),\n                clearToken: () => null,\n                isLoggedIn: () => Promise.resolve(true),\n                login: () => Promise.resolve(),\n                logout: () => Promise.resolve(),\n                loadUserProfile: () => Promise.resolve(\n                {\n                    username: 'MOCK',\n                    firstName: 'MOCK',\n                    lastName: 'MOCKOVANY'\n                }),\n                getUserRoles: () => \n                [\n                    'logging-settings',\n                    'debug-settings',\n                    'debug-info',\n                    'components-page',\n                    'styles-page',\n                    'merania-prehlad-page',\n                    'merania-detail-page',\n                    'registre-menu-group',\n                    'pacienti-prehlad-page',\n                    'lekari-prehlad-page',\n                    'zariadenia-prehlad-page',\n                    'help-page'\n                ]\n            }\n        },\n    ] : []\n];\n","import {Injectable} from '@angular/core';\nimport {TranslateLoader} from '@ngx-translate/core';\nimport {Observable, Observer} from 'rxjs';\n\n/**\n * Service used as webpack translate loader\n */\n@Injectable()\nexport class WebpackTranslateLoaderService implements TranslateLoader\n{\n    //######################### public methods - implementation of TranslateLoader #########################\n\n    /**\n     * Gets translations for specified language\n     * @param lang Language which translations are required\n     */\n    public getTranslation(lang: string): Observable<any> \n    {\n        return Observable.create(async (observer: Observer<any>) =>\n        {\n            const result = await import(`../../../content/l10n/${lang}.json`);\n\n            observer.next(result.default);\n            observer.complete();\n        });\n    }\n}","/* eslint-disable ressurectit/imports-order */\nimport './dependencies';\nimport './dependencies.browser';\nimport 'zone.js/dist/zone';\nimport './hacks';\nimport {platformBrowser} from '@angular/platform-browser';\nimport {NgModuleRef, enableProdMode, StaticProvider, ValueProvider, PlatformRef} from '@angular/core';\nimport {runWhenModuleStable} from '@anglr/common';\nimport {RestTransferStateService} from '@anglr/rest';\nimport {hmrAccept, hmrFinishedNotification} from '@anglr/common/hmr';\nimport {LogEventLevel} from 'structured-log';\n\nimport {config} from './config';\nimport {BrowserAppModule} from './boot/browser-app.module';\nimport {NG_APP_STABLE} from './misc/tokens';\nimport {IS_ELECTRON} from './modules';\n\nrendererLogger.log('Main browser is loading', LogEventLevel.verbose);\n\nfunction start(providers: StaticProvider[])\n{\n    rendererLogger.log('Starting bootstrapping of angular', LogEventLevel.verbose);\n\n    platform = platformBrowser(providers);\n\n    runWhenModuleStable(platform.bootstrapModule(BrowserAppModule), (moduleRef: NgModuleRef<any>) => \n    {\n        // moduleRef.injector.get(LoggerService).verbose('Angular finished bootstraping and is stable');\n        moduleRef.injector.get(NG_APP_STABLE).isStable();\n\n        moduleRef.injector.get(RestTransferStateService)?.clearAndDeactivate();\n        jsDevMode && hmrFinishedNotification();\n    }, config.configuration.debug);\n}\n\nif(isProduction)\n{\n    enableProdMode();\n}\n\nif (jsDevMode && module['hot'])\n{\n    module['hot'].accept();\n}\n\njsDevMode && hmrAccept(() => platform);\n\nlet platform: PlatformRef;\n\n//running in electron\nif(isElectron)\n{\n    import('./staticProviders.electron').then(({providers}) =>\n    {\n        start(\n        [\n            ...providers,\n            <ValueProvider>\n            {\n                provide: IS_ELECTRON,\n                useValue: true\n            }\n        ]);\n    });\n}\n//running in browser\nelse\n{\n    import('./staticProviders').then(({providers}) =>\n    {\n        const emulateElectron = jsDevMode && config.configuration.emulateElectron;\n\n        start(\n        [\n            ...providers,\n            <ValueProvider>\n            {\n                provide: IS_ELECTRON,\n                useValue: emulateElectron\n            }\n        ]);\n    });\n}\n","import {NgModule, ClassProvider} from '@angular/core';\nimport {BrowserModule} from '@angular/platform-browser';\nimport {HttpClientModule} from '@angular/common/http';\nimport {RouterModule} from '@angular/router';\nimport {ModuleRoutes} from '@anglr/common/router';\nimport {ConsoleLogModule} from '@anglr/common/structured-log';\nimport {ProgressIndicatorModule} from '@anglr/common';\nimport {InternalServerErrorModule} from '@anglr/error-handling';\nimport {NotificationsModule} from '@anglr/notifications';\nimport {TranslateModule, TranslateLoader} from '@ngx-translate/core';\nimport {HotkeyModule} from 'angular2-hotkeys';\nimport {KeycloakAngularModule} from 'keycloak-angular';\n\nimport {AppComponent} from './app.component';\nimport {components, routesOptions} from './app.component.routes';\nimport {APP_TRANSFER_ID} from '../misc/constants';\nimport {providers} from './app.config';\nimport {WebpackTranslateLoaderService} from '../services/webpackTranslateLoader';\nimport {ElectronModule, MenuModule, TitleBarModule} from '../modules';\n\n/**\n * Main module shared for both server and browser side\n */\n@NgModule(\n{\n    imports:\n    [\n        BrowserModule.withServerTransition(\n        {\n            appId: APP_TRANSFER_ID\n        }),\n        HttpClientModule,\n        KeycloakAngularModule,\n        InternalServerErrorModule,\n        ProgressIndicatorModule,\n        NotificationsModule,\n        RouterModule,\n        HotkeyModule,\n        MenuModule,\n        ElectronModule,\n        TitleBarModule,\n        ConsoleLogModule.forRoot(),\n        TranslateModule.forRoot(\n        {\n            loader: <ClassProvider>\n            {\n                provide: TranslateLoader, \n                useClass: WebpackTranslateLoaderService\n            }\n        })\n    ],\n    providers: providers,\n    declarations:\n    [\n        AppComponent,\n        ...components\n    ],\n    exports: [AppComponent]\n})\n@ModuleRoutes(components, routesOptions)\nexport class AppModule\n{\n}\n","import {NgModule, FactoryProvider} from '@angular/core';\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\nimport {BrowserTransferStateModule} from '@angular/platform-browser';\nimport {AnglrExceptionHandlerOptions} from '@anglr/error-handling';\nimport {HotkeyModule} from 'angular2-hotkeys';\n\nimport {config} from '../config';\nimport {AppComponent} from './app.component';\nimport {AppModule} from './app.module';\n\n/**\n * Factory for AnglrExceptionHandlerOptions\n */\nexport function anglrExceptionHandlerOptionsFactory()\n{\n    return new AnglrExceptionHandlerOptions(config.configuration.debug, false);\n}\n\n/**\n * Entry module for browser side\n */\n@NgModule(\n{\n    bootstrap: [AppComponent],\n    imports:\n    [\n        AppModule,\n        BrowserAnimationsModule,\n        BrowserTransferStateModule,\n        HotkeyModule.forRoot(\n        {\n            cheatSheetCloseEsc: true\n        })\n    ],\n    providers:\n    [\n        <FactoryProvider>\n        {\n            provide: AnglrExceptionHandlerOptions,\n            useFactory: anglrExceptionHandlerOptionsFactory\n        }\n    ]\n})\nexport class BrowserAppModule\n{\n}\n","export const APP_TRANSFER_ID = 'my-app-id';\nexport const NOTHING_SELECTED = 'Nothing selected';\nexport const AUTH_TOKEN = 'KEYCLOAK_AUTH_TOKEN';\nexport const DATE_FORMAT = 'YYYY-MM-DD';\nexport const NAME_DATE_FORMAT = 'DD. MMMM YYYY (dddd)';\nexport const WEB_APP_READY = 'WEB_APP_READY';\nexport const SHOW_NOTIFICATION = 'SHOW_NOTIFICATION';\nexport const SET_GENERAL_SETTINGS = 'SET_GENERAL_SETTINGS';\nexport const SET_DEBUGGING_SETTINGS = 'SET_DEBUGGING_SETTINGS';\nexport const SET_LOGGING_SETTINGS = 'SET_LOGGING_SETTINGS';\nexport const GET_GENERAL_SETTINGS = 'GET_GENERAL_SETTINGS';\nexport const GET_DEBUGGING_SETTINGS = 'GET_DEBUGGING_SETTINGS';\nexport const GET_LOGGING_SETTINGS = 'GET_LOGGING_SETTINGS';\nexport const DEBUG_INFO = 'debug-info';\nexport const NOTIFICATION_TITLE = 'TELECOVID';\nexport const RESPONSIVE_WIDTH = 800;\nexport const RESPONSIVE_WIDTH_MEDIA = `(max-width: ${RESPONSIVE_WIDTH}px)`;\nexport const ANIMATE_TO_VISIBLE = 'visible';\nexport const ANIMATE_TO_HIDDEN = 'hidden';\n","import {InjectionToken} from '@angular/core';\n\nimport {AppStable} from '../services/isStable';\nimport {TitleBar} from '../services/titleBar';\nimport {SettingsStorage} from '../services/settings';\nimport {FileSink} from '../services/logger/logger.interface';\n\n/**\n * Token used for retrieving instance of class that is used for indicating that app is stable\n */\nexport const NG_APP_STABLE: InjectionToken<AppStable> = new InjectionToken<AppStable>('NG_APP_STABLE');\n\n/**\n * Token used for handling title bar operations\n */\nexport const TITLE_BAR: InjectionToken<TitleBar> = new InjectionToken<TitleBar>('TITLE_BAR');\n\n/**\n * Token used for settings storage\n */\nexport const SETTINGS_STORAGE: InjectionToken<SettingsStorage> = new InjectionToken<SettingsStorage>('SETTINGS_STORAGE');\n\n/**\n * Token used for obtaining file logger\n */\nexport const FILE_LOGGER: InjectionToken<FileSink> = new InjectionToken<FileSink>('FILE_LOGGER');","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {RouterModule} from '@angular/router';\nimport {CommonModule as NgCommonModule} from '@anglr/common';\nimport {NumeralModule} from '@anglr/common/numeral';\nimport {TooltipModule} from '@anglr/common/positions';\nimport {AuthorizationModule} from '@anglr/authentication';\nimport {DatePipesModule} from '@anglr/datetime';\nimport {TranslateModule} from '@ngx-translate/core';\n\n/**\n * Common module for displaying readonly data helpers\n */\n@NgModule(\n{\n    exports:\n    [\n        CommonModule,\n        RouterModule,\n        NgCommonModule,\n        NumeralModule,\n        TooltipModule,\n        TranslateModule,\n        DatePipesModule,\n        AuthorizationModule\n    ]\n})\nexport class DisplayingFeatureModule\n{\n}","import {InjectionToken} from '@angular/core';\n\n/**\n * Token used for indication whether is application running under electron\n */\nexport const IS_ELECTRON: InjectionToken<boolean> = new InjectionToken<boolean>('IS_ELECTRON');","import {NgModule} from '@angular/core';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {MatSlideToggleModule} from '@angular/material/slide-toggle';\nimport {NgSelectEditModule, NgSelectModule} from '@anglr/select';\nimport {NumberInputModule} from '@anglr/common/forms';\nimport {DateTimeSelectorModule} from '@anglr/datetime';\n\nimport {SelectEnumExtensionsModule} from './selectExtensions';\n\n/**\n * Common module for enabling forms features\n */\n@NgModule(\n{\n    exports:\n    [\n        ReactiveFormsModule,\n        MatSlideToggleModule,\n        NumberInputModule,\n        NgSelectModule,\n        NgSelectEditModule,\n        SelectEnumExtensionsModule,\n        DateTimeSelectorModule\n    ]\n})\nexport class FormsFeatureModule\n{\n}","import {NgModule} from '@angular/core';\nimport {ClipboardModule} from '@angular/cdk/clipboard';\nimport {DebugDataModule} from '@anglr/common';\n\n/**\n * Common module for allowing debugging features in code\n */\n@NgModule(\n{\n    exports:\n    [\n        ClipboardModule,\n        DebugDataModule\n    ]\n})\nexport class DebuggingFeatureModule\n{\n}","import {NgModule} from '@angular/core';\nimport {GridModule} from '@anglr/grid';\n\n/**\n * Common module for enabling usage of Grid\n */\n@NgModule(\n{\n    exports:\n    [\n        GridModule\n    ]\n})\nexport class GridFeatureModule\n{\n}","import {NgModule} from '@angular/core';\n\nimport {IfElectronDirective, IfBrowserDirective} from '../directives';\n\n/**\n * Module for Electron directive\n */\n@NgModule(\n{\n    imports:\n    [\n    ],\n    declarations:\n    [\n        IfElectronDirective,\n        IfBrowserDirective\n    ],\n    exports:\n    [\n        IfElectronDirective,\n        IfBrowserDirective\n    ]\n})\nexport class ElectronModule\n{\n}\n","import {NgModule} from '@angular/core';\n\nimport {ThreeLinesIconComponent} from '../components';\n\n/**\n * Module for three lines component\n */\n@NgModule(\n{\n    imports:\n    [\n    ],\n    declarations:\n    [\n        ThreeLinesIconComponent\n    ],\n    exports:\n    [\n        ThreeLinesIconComponent\n    ]\n})\nexport class ThreeLinesIconModule\n{\n}","import {NgModule} from '@angular/core';\n\nimport {MaxWidthQueryDirective} from '../directives';\n\n/**\n * Module with media queries directives\n */\n@NgModule(\n{\n    declarations:\n    [\n        MaxWidthQueryDirective\n    ],\n    exports:\n    [\n        MaxWidthQueryDirective\n    ]\n})\nexport class MediaQueriesModule\n{\n}","import {NgModule} from '@angular/core';\n\nimport {FormValuePreviewPipe} from '../pipes';\n\n/**\n * Module for form value preview pipe\n */\n@NgModule(\n{\n    declarations:\n    [\n        FormValuePreviewPipe\n    ],\n    exports:\n    [\n        FormValuePreviewPipe\n    ]\n})\nexport class FormValuePreviewModule\n{\n}","import {NgModule} from '@angular/core';\nimport {LayoutModule} from '@angular/cdk/layout';\nimport {TitledDialogModule} from '@anglr/common/material';\nimport {ClickOutsideModule} from '@anglr/common';\n\nimport {DisplayingFeatureModule} from '../../displayingFeature.module';\nimport {UserSettingsModule} from '../../userSettings';\nimport {MediaQueriesModule, ThreeLinesIconModule} from '../../responsiveUtils';\nimport {MainMenuComponent} from '../components';\nimport {SubmenuPopupDirective} from '../directives';\n\n/**\n * Module for menu components\n */\n@NgModule(\n{\n    imports:\n    [\n        DisplayingFeatureModule,\n        UserSettingsModule,\n        TitledDialogModule,\n        ClickOutsideModule,\n        ThreeLinesIconModule,\n        LayoutModule,\n        MediaQueriesModule,\n    ],\n    declarations:\n    [\n        MainMenuComponent,\n        SubmenuPopupDirective\n    ],\n    exports:\n    [\n        MainMenuComponent\n    ]\n})\nexport class MenuModule\n{\n}","import {NgModule} from '@angular/core';\n\nimport {TitleBarComponent} from '../components';\n\n/**\n * Module for TitleBar component\n */\n@NgModule(\n{\n    imports:\n    [\n    ],\n    declarations:\n    [\n        TitleBarComponent\n    ],\n    exports:\n    [\n        TitleBarComponent\n    ]\n})\nexport class TitleBarModule\n{\n}\n","import {NgModule} from '@angular/core';\nimport {DateTimeSelectorModule} from '@anglr/datetime';\n\nimport {EndSessionComponent, StartSessionComponent} from '../components';\nimport {EndSessionDirective, StartSessionDirective} from '../directives';\n\n/**\n * Module for SessionModals component\n */\n@NgModule(\n{\n    imports:\n    [\n        DateTimeSelectorModule\n    ],\n    declarations:\n    [\n        StartSessionComponent,\n        EndSessionComponent,\n        StartSessionDirective,\n        EndSessionDirective\n    ],\n    exports:\n    [\n        StartSessionComponent,\n        EndSessionComponent,\n        StartSessionDirective,\n        EndSessionDirective\n    ]\n})\nexport class SessionModalsModule\n{\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {TooltipModule} from '@anglr/common/positions';\n\nimport {CollapsibleIconComponent, CollapsibleTitleComponent} from '../components';\n/**\n * Module containing collapsible components\n */\n@NgModule(\n{\n    imports:\n    [\n        CommonModule,\n        TooltipModule\n    ],\n    declarations:\n    [\n        CollapsibleIconComponent,\n        CollapsibleTitleComponent\n    ],\n    exports:\n    [\n        CollapsibleIconComponent,\n        CollapsibleTitleComponent\n    ]\n})\nexport class CollapsibleModule\n{\n}","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\n\nimport {VahaTagComponent} from '../components';\nimport {WeightClassPipe} from '../pipes';\n\n/**\n * Module for VahaTag component\n */\n@NgModule(\n{\n    imports:\n    [\n        CommonModule\n    ],\n    declarations:\n    [\n        VahaTagComponent,\n        WeightClassPipe\n    ],\n    exports:\n    [\n        VahaTagComponent\n    ]\n})\nexport class VahaTagModule\n{\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\n\nimport {VyberStlpcovBtnComponent} from '../components';\n\n/**\n * Module that contains button that allows opening selection of columns for grid\n */\n@NgModule(\n{\n    imports:\n    [\n        CommonModule\n    ],\n    declarations:\n    [\n        VyberStlpcovBtnComponent\n    ],\n    exports:\n    [\n        VyberStlpcovBtnComponent        \n    ]\n})\nexport class VyberStlpcovBtnModule\n{\n}","import {NgModule} from '@angular/core';\n\nimport {DoubleRightIconComponent} from '../components';\n\n/**\n * Module for AnimatedIcons component\n */\n@NgModule(\n{\n    imports:\n    [\n    ],\n    declarations:\n    [\n        DoubleRightIconComponent\n    ],\n    exports:\n    [\n        DoubleRightIconComponent\n    ]\n})\nexport class AnimatedIconsModule\n{\n}\n","import {Component, ChangeDetectionStrategy, Inject} from '@angular/core';\nimport {MatDialogRef} from '@angular/material/dialog';\nimport {TITLED_DIALOG_DATA} from '@anglr/common/material';\n\n/**\n * Component displayed as dialog due to long user inactivity\n */\n@Component(\n{\n    selector: 'inactivity-dialog',\n    templateUrl: 'inactivityDialog.component.html',\n    // styleUrls: ['inactivityDialog.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class InactivityDialogComponent\n{\n    //######################### constructor #########################\n    constructor(@Inject(TITLED_DIALOG_DATA) public data: string,\n                public dialog: MatDialogRef<InactivityDialogComponent, boolean>)\n    {\n    }\n}","<div>Budete automatický odhlásený o {{data}} alebo kliknite na pokračovať.</div>\r\n\r\n<div class=\"flex-row flex-row-end\">\r\n    <button class=\"btn btn-danger margin-right-small\" (click)=\"dialog.close(false)\">\r\n        <span>Odhlásiť</span>\r\n    </button>\r\n\r\n    <button class=\"btn btn-success\" (click)=\"dialog.close(true)\">\r\n        <span>Pokračovať</span>\r\n    </button>\r\n</div>","import {NgModule} from '@angular/core';\nimport {MatDialogModule} from '@angular/material/dialog';\n\nimport {InactivityDialogComponent} from '../components';\n\n/**\n * Module for inactivity dialog component\n */\n@NgModule(\n{\n    imports:\n    [\n        MatDialogModule\n    ],\n    declarations:\n    [\n        InactivityDialogComponent\n    ]\n})\nexport class InactivityDialogModule\n{\n}","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {CommonModule as NgCommonModule} from '@anglr/common';\n\nimport {ResponsiveCssDivsBodyContentRendererComponent, ResponsiveCssDivsContentRendererComponent, ResponsiveCssDivsHeaderContentRendererComponent} from '../plugins/contentRenderer';\nimport {DropEmptyItemsPipe, GridTemplateColumnsPipe, GetColumnContextPipe} from '../pipes';\n\n/**\n * Module for Responsive content renderer plugins\n */\n@NgModule(\n{\n    imports:\n    [\n        CommonModule,\n        NgCommonModule\n    ],\n    declarations:\n    [\n        ResponsiveCssDivsBodyContentRendererComponent,\n        ResponsiveCssDivsHeaderContentRendererComponent,\n        ResponsiveCssDivsContentRendererComponent,\n        GridTemplateColumnsPipe,\n        DropEmptyItemsPipe,\n        GetColumnContextPipe\n    ]\n})\nexport class ResponsiveContentRendererModule\n{\n}\n","import {Injectable, Injector} from '@angular/core';\nimport {BasicTableColumn, BasicTableColumnContext, Grid} from '@anglr/grid';\n\nimport {ColumnContextGetter} from './columnContextGetter.interface';\n\n/**\n * Service used for getting BasicTableColumnContext\n */\n@Injectable()\nexport class BasicColumnContextGetterService<TData = any> implements ColumnContextGetter<TData, BasicTableColumn<TData>, BasicTableColumnContext<TData>>\n{\n    //######################### public methods - implementation of ColumnContextGetter #########################\n\n    /**\n     * Gets column context\n     * @param grid - Instance of grid itself\n     * @param injector - Injector available in grid\n     * @param datum - Instance of row data\n     * @param meta - Instance of column metadata\n     * @param index - Index of rendered row in current page\n     * @param startingIndex - Starting index of currently displayed items\n     */\n    public getColumnContext(_grid: Grid, _injector: Injector, datum: TData, meta: BasicTableColumn<TData>, index: number, startingIndex: number): BasicTableColumnContext<TData>\n    {\n        return new BasicTableColumnContext(datum, meta, index, startingIndex);\n    }\n}","import {Pipe, PipeTransform} from '@angular/core';\n\n/**\n * Drops empty items from array\n */\n@Pipe({name: 'dropEmptyItems'})\nexport class DropEmptyItemsPipe<TItem> implements PipeTransform\n{\n    /**\n     * Drops empty items from array\n     * @param value Array to be checked\n     */\n    public transform(value: Array<TItem>): Array<TItem>\n    {\n        return value.filter(itm => !!itm);\n    }\n}","import {InjectionToken} from '@angular/core';\n\nimport {ColumnContextGetter, BasicColumnContextGetterService} from './services';\n\n/**\n * Injection token used for getting column context getter\n */\nexport const COLUMN_CONTEXT_GETTER: InjectionToken<ColumnContextGetter> = new InjectionToken<ColumnContextGetter>('COLUMN_CONTEXT_GETTER', {providedIn: 'root', factory: () => new BasicColumnContextGetterService});","import {Inject, Injector, Pipe, PipeTransform} from '@angular/core';\nimport {GridColumn, GridComponent} from '@anglr/grid';\n\nimport {ColumnContext, ColumnContextGetter} from '../services';\nimport {COLUMN_CONTEXT_GETTER} from '../tokens';\n\n/**\n * Gets column context for dynamic template\n */\n@Pipe({name: 'getColumnContext'})\nexport class GetColumnContextPipe<TData = any, TColumn extends GridColumn = any, TContext extends ColumnContext = any> implements PipeTransform\n{\n    //######################### constructor #########################\\\\\n    constructor(@Inject(COLUMN_CONTEXT_GETTER) private _columnContextGetter: ColumnContextGetter<TData, TColumn, TContext>,\n                private _grid: GridComponent,\n                private _injector: Injector)\n    {\n    }\n\n    //######################### public methods - implementation of PipeTransform #########################\n\n    /**\n     * Gets column context\n     * @param datum transformValueComment\n     */\n    public transform(datum: TData, meta: TColumn, index: number, startingIndex: number): TContext\n    {\n        return this._columnContextGetter.getColumnContext(this._grid, this._injector, datum, meta, index, startingIndex);\n    }\n}","<ng-template [ngIf]=\"!responsiveView\" [ngIfElse]=\"columnData\">\r\n    <div *ngFor=\"let datum of data; let index=index\" [ngClass]=\"options?.cssClasses?.rowDiv\">\r\n        <ng-template ngFor [ngForOf]=\"metadata?.columns\" let-meta>\r\n            <div [ngClass]=\"[options?.cssClasses?.cellDiv, meta?.cellClass] | dropEmptyItems\"\r\n                 [attr.data-header-title]=\"meta?.title\"\r\n                 [style.width]=\"meta?.width\">\r\n                <ng-template [ngIf]=\"!meta?.bodyTemplate\" [ngIfElse]=\"bodyTemplate\">\r\n                    {{datum[meta?.name]}}\r\n                </ng-template>\r\n\r\n                <ng-template #bodyTemplate [ngTemplateOutlet]=\"meta?.bodyTemplate\" [ngTemplateOutletContext]=\"datum | getColumnContext: meta: index: startingIndex\">\r\n                </ng-template>\r\n            </div>\r\n        </ng-template>\r\n    </div>\r\n</ng-template>\r\n\r\n<ng-template #columnData>\r\n    <div *ngFor=\"let datum of data; let index=index\" [ngClass]=\"options?.cssClasses?.responsiveRowDiv\">\r\n        <ng-template ngFor [ngForOf]=\"metadata?.columns\" let-meta>\r\n            <div [ngClass]=\"options?.cssClasses?.responsiveRowTitleColumn\">{{meta?.title}}</div>\r\n\r\n            <div [ngClass]=\"[options?.cssClasses?.cellDiv, meta?.cellClass] | dropEmptyItems\">\r\n                <ng-template [ngIf]=\"!meta?.bodyTemplate\" [ngIfElse]=\"bodyTemplate\">\r\n                    {{datum[meta?.name]}}\r\n                </ng-template>\r\n\r\n                <ng-template #bodyTemplate [ngTemplateOutlet]=\"meta?.bodyTemplate\" [ngTemplateOutletContext]=\"datum | getColumnContext: meta: index: startingIndex\">\r\n                </ng-template>\r\n            </div>\r\n        </ng-template>\r\n    </div>\r\n</ng-template>\r\n","import {Component, ChangeDetectionStrategy, ChangeDetectorRef, Optional, Inject, HostBinding, ElementRef, OnInit, OnDestroy} from '@angular/core';\nimport {BreakpointObserver} from '@angular/cdk/layout';\nimport {BasicTableColumn, BasicTableMetadata, BodyContentRendererAbstractComponent, BODY_CONTENT_RENDERER_OPTIONS, GridPluginInstances, GRID_PLUGIN_INSTANCES} from '@anglr/grid';\nimport {extend} from '@jscrpt/common';\nimport {Subscription} from 'rxjs';\n\nimport {CssClassesResponsiveCssDivsBodyContentRenderer, ResponsiveCssDivsBodyContentRendererOptions} from '../responsiveCssDivsContentRenderer.interface';\nimport {RESPONSIVE_WIDTH_MEDIA} from '../../../../../../misc/constants';\n\n/**\n * Default options for 'ResponsiveCssDivsBodyContentRendererComponent'\n * @internal\n */\nconst defaultOptions: ResponsiveCssDivsBodyContentRendererOptions =\n{\n    cssClasses:\n    {\n        bodyDiv: 'body-div-contents',\n        rowDiv: 'body-row-contents',\n        responsiveRowDiv: 'body-responsive-row-contents',\n        responsiveRowTitleColumn: 'body-responsive-row-title',\n        cellDiv: 'body-cell'\n    }\n};\n\n/**\n * Component used for rendering body for 'ResponsiveCssDivsContentRenderer'\n */\n@Component(\n{\n    selector: 'div.content-renderer-body',\n    templateUrl: 'responsiveCssDivsBodyContentRenderer.component.html',\n    styleUrls: ['responsiveCssDivsBodyContentRenderer.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ResponsiveCssDivsBodyContentRendererComponent<TData = any> extends BodyContentRendererAbstractComponent<TData, ResponsiveCssDivsBodyContentRendererOptions, BasicTableMetadata<BasicTableColumn<TData>>, CssClassesResponsiveCssDivsBodyContentRenderer> implements OnInit, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Subscription for responsive changes\n     */\n    protected _responsiveSubscription: Subscription;\n\n    //######################### public properties - host bindings #########################\n\n    /**\n     * Css class applied to grid itself\n     */\n    @HostBinding('class')\n    public get cssClass(): string\n    {\n        return this._options.cssClasses.bodyDiv;\n    }\n\n    //######################### public properties - template binding #########################\n\n    /**\n     * Indication whether is responsive view enabled\n     */\n    public responsiveView: boolean = false;\n\n    //######################### constructor #########################\n    constructor(protected _breakPointObserver: BreakpointObserver,\n                pluginElement: ElementRef,\n                changeDetector: ChangeDetectorRef,\n                @Inject(GRID_PLUGIN_INSTANCES) @Optional() gridPlugins: GridPluginInstances,\n                @Inject(BODY_CONTENT_RENDERER_OPTIONS) @Optional() options: ResponsiveCssDivsBodyContentRendererOptions)\n    {\n        super(pluginElement, changeDetector, gridPlugins);\n\n        this._options = extend(true, {}, defaultOptions, options);\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit()\n    {\n        this._responsiveSubscription = this._breakPointObserver.observe(RESPONSIVE_WIDTH_MEDIA)\n            .subscribe(({matches}) =>\n            {\n                this.responsiveView = matches;\n                this._changeDetector.detectChanges();\n            });\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy()\n    {\n        this._responsiveSubscription?.unsubscribe();\n        this._responsiveSubscription = null;\n    }\n}\n","<ng-template [ngIf]=\"!responsiveView\">\r\n    <div *ngFor=\"let meta of metadata?.columns; let index=index\" \r\n         [style.width]=\"meta?.width\"\r\n         [ngClass]=\"[options?.cssClasses?.headerCellDiv, meta?.headerClass, meta?.ordering ? options?.cssClasses?.headerCellOrderableDiv : null] | dropEmptyItems\"\r\n         (click)=\"orderBy(meta)\">\r\n        <ng-template [ngIf]=\"meta?.titleVisible\">\r\n            <ng-template [ngIf]=\"!meta?.headerTemplate\" [ngIfElse]=\"headerTemplate\">\r\n                <span [ngClass]=\"options?.cssClasses?.spanContent\">{{meta?.title}}</span>\r\n            </ng-template>\r\n\r\n            <ng-template #headerTemplate [ngTemplateOutlet]=\"meta?.headerTemplate\" [ngTemplateOutletContext]=\"meta?.getColumnContext(null, meta, index, 0)\">\r\n            </ng-template>\r\n\r\n            <span *ngIf=\"meta?.ordering\" [ngClass]=\"[options?.cssClasses?.spanOrdering, meta?.orderingClass] | dropEmptyItems\"></span>\r\n        </ng-template>\r\n    </div>\r\n</ng-template>","import {Component, ChangeDetectionStrategy, ChangeDetectorRef, Inject, Optional, HostBinding, ElementRef} from '@angular/core';\nimport {BreakpointObserver} from '@angular/cdk/layout';\nimport {GridPluginInstances, GRID_PLUGIN_INSTANCES, HeaderContentRendererAbstractComponent, HEADER_CONTENT_RENDERER_OPTIONS} from '@anglr/grid';\nimport {extend} from '@jscrpt/common';\nimport {Subscription} from 'rxjs';\n\nimport {ResponsiveCssDivsHeaderContentRendererOptions} from '../responsiveCssDivsContentRenderer.interface';\nimport {RESPONSIVE_WIDTH_MEDIA} from '../../../../../../misc/constants';\n\n/**\n * Default options for 'ResponsiveCssDivsHeaderContentRendererComponent'\n * @internal\n */\nconst defaultOptions: ResponsiveCssDivsHeaderContentRendererOptions =\n{\n    cssClasses:\n    {\n        headerDiv: 'header-row-contents',\n        headerCellDiv: 'header-cell',\n        headerCellOrderableDiv: 'header-orderable',\n        spanContent: 'header-content',\n        spanOrdering: 'header-ordering',\n        spanOrderingDirection:\n        {\n            none: 'fa fa-sort',\n            asc: 'fa fa-sort-up',\n            desc: 'fa fa-sort-down'\n        }\n    }\n};\n\n/**\n * Component used for rendering css grid header in css grid content renderer\n */\n@Component(\n{\n    selector: 'div.content-renderer-header',\n    templateUrl: 'responsiveCssDivsHeaderContentRenderer.component.html',\n    styleUrls: ['responsiveCssDivsHeaderContentRenderer.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ResponsiveCssDivsHeaderContentRendererComponent<TData = any> extends HeaderContentRendererAbstractComponent<TData, ResponsiveCssDivsHeaderContentRendererOptions>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Subscription for responsive changes\n     */\n     protected _responsiveSubscription: Subscription;\n\n    //######################### public properties - hosts #########################\n\n    /**\n     * Css class applied to grid itself\n     */\n    @HostBinding('class')\n    public get cssClass(): string\n    {\n        return this._options.cssClasses.headerDiv;\n    }\n\n    //######################### public properties - template binding #########################\n\n    /**\n     * Indication whether is responsive view enabled\n     */\n     public responsiveView: boolean = false;\n\n    //######################### constructor #########################\n    constructor(protected _breakPointObserver: BreakpointObserver,\n                pluginElement: ElementRef,\n                changeDetector: ChangeDetectorRef,\n                @Inject(HEADER_CONTENT_RENDERER_OPTIONS) @Optional() options: ResponsiveCssDivsHeaderContentRendererOptions,\n                @Inject(GRID_PLUGIN_INSTANCES) @Optional() gridPlugins: GridPluginInstances)\n    {\n        super(pluginElement, gridPlugins, changeDetector);\n\n        this._options = extend(true, {}, defaultOptions, options);\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n     public ngOnInit()\n     {\n         this._responsiveSubscription = this._breakPointObserver.observe(RESPONSIVE_WIDTH_MEDIA)\n             .subscribe(({matches}) =>\n             {\n                 this.responsiveView = matches;\n                 this._changeDetector.detectChanges();\n             });\n     }\n \n     //######################### public methods - implementation of OnDestroy #########################\n     \n     /**\n      * Called when component is destroyed\n      */\n     public ngOnDestroy()\n     {\n         this._responsiveSubscription?.unsubscribe();\n         this._responsiveSubscription = null;\n     }\n}\n","import {Pipe, PipeTransform} from '@angular/core';\nimport {BasicTableColumn} from '@anglr/grid';\n\n/**\n * Pipe used for obtaining grid template columns\n */\n@Pipe({name: 'gridTemplateColumns'})\nexport class GridTemplateColumnsPipe implements PipeTransform\n{\n    //######################### public methods - implementation of PipeTransform #########################\n\n    /**\n     * Transforms array of columns to grid template columns css style\n     * @param columns Array of columns to be displayed\n     * @param responsiveView Indication whether is responsive view displayed\n     * @param responsiveStyleValue Css style value that will be used for responsive view\n     */\n    public transform(columns: BasicTableColumn[],\n                     responsiveView: boolean = false,\n                     responsiveStyleValue: string = 'auto auto'): string\n    {\n        if(responsiveView)\n        {\n            return responsiveStyleValue;\n        }\n\n        if(!columns?.length)\n        {\n            return '';\n        }\n        else\n        {\n            const gridTemplateColumns: string[] = [];\n\n            columns.forEach(column =>\n            {\n                if (column.visible)\n                {\n                    gridTemplateColumns.push(column.width || 'auto');\n                }\n            });\n\n            return gridTemplateColumns.join(' ');\n        }\n    }\n}","import {Component, ChangeDetectionStrategy, Inject, Optional, ElementRef, ChangeDetectorRef, forwardRef, HostBinding, OnDestroy, OnInit} from '@angular/core';\nimport {BreakpointObserver} from '@angular/cdk/layout';\nimport {BasicTableColumn, BasicTableMetadata, ContentRendererAbstractComponent, CONTENT_RENDERER_OPTIONS, GridPluginInstances, GRID_PLUGIN_INSTANCES, PluginDescription} from '@anglr/grid';\nimport {extend} from '@jscrpt/common';\nimport {Subscription} from 'rxjs';\n\nimport {ResponsiveCssDivsContentRendererOptions} from './responsiveCssDivsContentRenderer.interface';\nimport {ResponsiveCssDivsBodyContentRendererComponent} from './body/responsiveCssDivsBodyContentRenderer.component';\nimport {ResponsiveCssDivsHeaderContentRendererComponent} from './header/responsiveCssDivsHeaderContentRenderer.component';\nimport {RESPONSIVE_WIDTH_MEDIA} from '../../../../../misc/constants';\n\n/**\n * Default options for 'ResponsiveCssDivsContentRendererComponent'\n * @internal\n */\nconst defaultOptions: ResponsiveCssDivsContentRendererOptions =\n{\n    cssClasses:\n    {\n        containerDiv: 'css-grid-table'\n    },\n    plugins:\n    {\n        bodyRenderer: <PluginDescription<ResponsiveCssDivsBodyContentRendererComponent>>\n        {\n            type: forwardRef(() => ResponsiveCssDivsBodyContentRendererComponent)\n        },\n        headerRenderer: <PluginDescription<ResponsiveCssDivsHeaderContentRendererComponent>>\n        {\n            type: forwardRef(() => ResponsiveCssDivsHeaderContentRendererComponent)\n        }\n    }\n};\n\n/**\n * Component used for 'ResponsiveCssDivsContentRendererComponent'\n */\n@Component(\n{\n    selector: 'div.css-grid-content-renderer',\n    templateUrl: 'responsiveCssDivsContentRenderer.component.html',\n    styleUrls: ['responsiveCssDivsContentRenderer.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ResponsiveCssDivsContentRendererComponent<TOrdering = any, TData = any, TColumn extends BasicTableColumn = any, TMetadata extends BasicTableMetadata<TColumn> = any> extends ContentRendererAbstractComponent<TOrdering, TData, TMetadata, ResponsiveCssDivsContentRendererOptions> implements OnDestroy, OnInit\n{\n    //######################### protected fields #########################\n\n    /**\n     * Subscription for responsive changes\n     */\n     protected _responsiveSubscription: Subscription;\n\n    //######################### public properties - template binding #########################\n\n    /**\n     * Indication whether is responsive view enabled\n     */\n     public responsiveView: boolean = false;\n\n    /**\n     * Array of columns currently visible\n     */\n    public get columns(): BasicTableColumn[]\n    {\n        return this._metadataSelector?.metadata.columns;\n    }\n\n    //######################### public properties - host bindings #########################\n\n\n    /**\n     * Css class applied to grid itself\n     */\n    @HostBinding('class')\n    public get cssClass(): string\n    {\n        return this._options.cssClasses.containerDiv;\n    }\n\n    //######################### constructor #########################\n    constructor(protected _breakpointObserver: BreakpointObserver,\n                pluginElement: ElementRef,\n                @Inject(GRID_PLUGIN_INSTANCES) @Optional() gridPlugins: GridPluginInstances,\n                @Inject(CONTENT_RENDERER_OPTIONS) @Optional() options?: ResponsiveCssDivsContentRendererOptions,\n                protected _changeDetector?: ChangeDetectorRef)\n    {\n        super(pluginElement, gridPlugins);\n\n        this._options = extend(true, {}, defaultOptions, options);\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n\n    /**\n     * Initialize component\n     */\n    public ngOnInit()\n    {\n        this._responsiveSubscription = this._breakpointObserver.observe(RESPONSIVE_WIDTH_MEDIA)\n            .subscribe(({matches}) =>\n            {\n                this.responsiveView = matches;\n                this._changeDetector.detectChanges();\n            });\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy()\n    {\n        super.ngOnDestroy();\n\n        this._responsiveSubscription?.unsubscribe();\n        this._responsiveSubscription = null;\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Invalidates visuals, redraw template\n     */\n    protected _invalidateVisuals()\n    {\n        super._invalidateVisuals();\n\n        this._changeDetector.detectChanges();\n    }\n}\n","<div [style.grid-template-columns]=\"columns | gridTemplateColumns: responsiveView\">\r\n    <ng-template [ngComponentOutletEx]=\"options?.plugins?.headerRenderer?.type\" (ngComponentOutletExCreated)=\"setHeaderRendererComponent($event)\"></ng-template>\r\n    <ng-template [ngComponentOutletEx]=\"options?.plugins?.bodyRenderer?.type\" (ngComponentOutletExCreated)=\"setBodyRendererComponent($event)\"></ng-template>\r\n</div>","import {Component, ChangeDetectionStrategy, HostBinding, Optional, OnDestroy, EventEmitter, Output, ChangeDetectorRef} from '@angular/core';\nimport {Subscription} from 'rxjs';\n\nimport {MaxWidthQueryDirective} from '../../directives';\n\n/**\n * Component used for displaying three lines svg\n */\n@Component(\n{\n    selector: 'div.three-lines',\n    templateUrl: 'threeLinesIcon.component.html',\n    styleUrls: ['threeLinesIcon.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ThreeLinesIconComponent implements OnDestroy\n{\n    //######################### private fields #########################\n\n    /**\n     * Subscription for change of media query match\n     */\n    private _queryChangeSubscription: Subscription;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Occurs when there is change in visibility of three lines \n     */\n    @Output()\n    public visibleChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    //######################### public properties - host #########################\n\n    /**\n     * Indication whether is three lines icon hidden\n     */\n    @HostBinding('class.hidden')\n    public hidden: boolean = false;\n    \n    //######################### constructor #########################\n    constructor(changeDetector: ChangeDetectorRef,\n                @Optional() private _maxWidthQuery?: MaxWidthQueryDirective)\n    {\n        if(this._maxWidthQuery)\n        {\n            this._queryChangeSubscription = this._maxWidthQuery.queryMatch.subscribe(value =>\n            {\n                this.hidden = !value;\n                this.visibleChange.emit(!value);\n                changeDetector.markForCheck();\n            });\n        }\n        else\n        {\n            console.warn('Missing maxWidthQuery directive, automatic change of visible state will not work!');\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy()\n    {\n        this._queryChangeSubscription?.unsubscribe();\n        this._queryChangeSubscription = null;\n    }\n}","<svg height=\"24\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"24\">\r\n    <path fill-rule=\"evenodd\" d=\"M1 2.75A.75.75 0 011.75 2h12.5a.75.75 0 110 1.5H1.75A.75.75 0 011 2.75zm0 5A.75.75 0 011.75 7h12.5a.75.75 0 110 1.5H1.75A.75.75 0 011 7.75zM1.75 12a.75.75 0 100 1.5h12.5a.75.75 0 100-1.5H1.75z\"></path>\r\n</svg>","import {Directive, Input, OnDestroy, OnInit, Output, EventEmitter} from '@angular/core';\nimport {BreakpointObserver} from '@angular/cdk/layout';\nimport {isNumber} from '@jscrpt/common';\nimport {Subscription} from 'rxjs';\n\nimport {RESPONSIVE_WIDTH} from '../../../../misc/constants';\n\n/**\n * Directive used for testing and matching media query width\n */\n@Directive(\n{\n    selector: '[maxWidthQuery]'\n})\nexport class MaxWidthQueryDirective implements OnInit, OnDestroy\n{\n    //######################### private fields #########################\n    \n    /**\n     * All initialization subscriptions\n     */\n    private _initSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Gets value of current responsive treshold\n     */\n    private _value: number = RESPONSIVE_WIDTH;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Max width query value in pixels\n     */\n    @Input()\n    public get maxWidthQuery(): number|string\n    {\n        return this._value;\n    }\n    public set maxWidthQuery(value: number|string)\n    {\n        if(isNumber(value))\n        {\n            this._value = value;\n        }\n    }\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Occurs when there is change in 'match' also emitted on first initialization\n     */\n    @Output()\n    public queryMatch: EventEmitter<boolean> = new EventEmitter<boolean>();\n     \n    //######################### constructor #########################\n    constructor(private _breakPointObserver: BreakpointObserver)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit()\n    {\n        this._initSubscriptions.add(this._breakPointObserver\n                                        .observe(`(max-width: ${this._value}px)`)\n                                        .subscribe(state => this.queryMatch.emit(state.matches)));\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy()\n    {\n        this._initSubscriptions?.unsubscribe();\n        this._initSubscriptions = null;\n    }\n}","import {NgModule} from '@angular/core';\n\nimport {EnumSelectDirective} from '../directives';\n\n/**\n * Module for SelectExtensions enum directive\n */\n@NgModule(\n{\n    imports:\n    [\n    ],\n    declarations:\n    [\n        EnumSelectDirective\n    ],\n    exports:\n    [\n        EnumSelectDirective\n    ]\n})\nexport class SelectEnumExtensionsModule\n{\n}\n","import {Component, ChangeDetectionStrategy} from '@angular/core';\n\n/**\n * TODO - write comment\n */\n@Component(\n{\n    selector: 'session-modals',\n    templateUrl: 'startSession.component.html',\n    styleUrls: ['startSession.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class StartSessionComponent\n{\n}","<div class=\"margin-bottom-small\">\r\n    <div class=\"margin-bottom-small\">\r\n        <label class=\"control-label\">Pacient</label>\r\n        <input class=\"form-control\">\r\n    </div>\r\n    \r\n    <div class=\"margin-bottom-small\">\r\n        <label class=\"control-label\">Zaradenie</label>\r\n        <input class=\"form-control\">\r\n    </div>\r\n\r\n    <div class=\"margin-bottom-small\">\r\n        <label class=\"control-label\">Dátum začiatku \"SESSION\"</label>\r\n        <date-time-selector class=\"form-control\"></date-time-selector>\r\n    </div>\r\n\r\n    <div>\r\n        <label class=\"control-label\">Priradený lekár</label>\r\n        <input class=\"form-control\">\r\n    </div>\r\n</div>\r\n\r\n<hr>\r\n\r\n<div class=\"flex-row flex-end\">\r\n    <button class=\"btn btn-primary\">\r\n        <span>start session</span>\r\n    </button>\r\n</div>","import {Component, ChangeDetectionStrategy} from '@angular/core';\n\n/**\n * Component used for ending 'merania' session\n */\n@Component(\n{\n    selector: 'end-session',\n    templateUrl: 'endSession.component.html',\n    // styleUrls: ['endSession.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class EndSessionComponent\n{\n}","<div class=\"margin-bottom-big\">\r\n    <label class=\"control-label\">End session date</label>\r\n    <date-time-selector class=\"form-control\"></date-time-selector>\r\n</div>\r\n\r\n<hr>\r\n\r\n<div class=\"flex-row flex-end\">\r\n    <button class=\"btn btn-primary\">\r\n        <span class=\"fas fa-flag-checkered\"></span>\r\n        <span>end session</span>\r\n    </button>\r\n</div>","import {Component, ChangeDetectionStrategy, Inject, OnInit, OnDestroy, ChangeDetectorRef} from '@angular/core';\nimport {fadeInOutTrigger} from '@anglr/animations';\nimport {Subscription} from 'rxjs';\n\nimport {TITLE_BAR} from '../../../../misc/tokens';\nimport {TitleBar} from '../../../../services/titleBar';\n\n/**\n * Component for displaying window title bar\n */\n@Component(\n{\n    selector: 'div.title-bar',\n    templateUrl: 'titleBar.component.html',\n    styleUrls: ['titleBar.component.scss'],\n    animations: [fadeInOutTrigger],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TitleBarComponent implements OnInit, OnDestroy\n{\n    //######################### private fields #########################\n\n    /**\n     * Subscription for changes of maximize state\n     */\n    private _maximizeChangeSubscription: Subscription;\n\n    //######################### constructor #########################\n    constructor(@Inject(TITLE_BAR) public titleBarSvc: TitleBar,\n                private _changeDetector: ChangeDetectorRef)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit()\n    {\n        this._maximizeChangeSubscription = this.titleBarSvc.maximizedChange.subscribe(() => this._changeDetector.detectChanges());\n    }\n    \n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy()\n    {\n        this._maximizeChangeSubscription?.unsubscribe();\n        this._maximizeChangeSubscription = null;\n    }\n}","<div class=\"title-bar-icon\"></div>\r\n<div class=\"title-bar-title\">Telecovid</div>\r\n\r\n<div class=\"title-bar-minimize title-bar-button-base\" (click)=\"titleBarSvc.minimize()\">\r\n    <div class=\"minimize-icon icon-base\"></div>\r\n</div>\r\n\r\n<div class=\"title-bar-maximize title-bar-button-base\">\r\n    <div class=\"icon-base\" [class.restore-icon]=\"titleBarSvc.maximized\" [class.maximize-icon]=\"!titleBarSvc.maximized\" (click)=\"titleBarSvc.restoreMaximize()\"></div>\r\n</div>\r\n\r\n<div class=\"title-bar-close title-bar-button-base\" (click)=\"titleBarSvc.close()\">\r\n    <div class=\"close-icon icon-base\"></div>\r\n</div>","import {NgModule} from '@angular/core';\n\nimport {DisplayingFeatureModule} from '../../displayingFeature.module';\nimport {FormsFeatureModule} from '../../formsFeature.module';\nimport {UserSettingsComponent} from '../components';\n\n/**\n * Module used for definition of user settings component\n */\n@NgModule(\n{\n    imports:\n    [\n        DisplayingFeatureModule,\n        FormsFeatureModule\n    ],\n    declarations:\n    [\n        UserSettingsComponent\n    ],\n    exports:\n    [\n        UserSettingsComponent\n    ]\n})\nexport class UserSettingsModule\n{\n}","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {FormGroup, FormBuilder} from '@angular/forms';\nimport {DebugDataEnabledService} from '@anglr/common';\nimport {ConsoleSinkConfigService} from '@anglr/common/structured-log';\nimport {ValueNamePair} from '@jscrpt/common';\nimport {LogEventLevel} from 'structured-log';\n\nimport {config, SettingsGeneral, SettingsDebug, LanguageDef} from '../../../../config';\nimport {SettingsService} from '../../../../services/settings';\n\n/**\n * Available sections for user settings\n */\nenum UserSettingsSections\n{\n    /**\n     * General user settings\n     */\n    General,\n\n    /**\n     * Loggers settings\n     */\n    Logging,\n\n    /**\n     * Debugging settings\n     */\n    Debugging\n}\n\ninterface SettingsLoggingEnum\n{\n    /**\n     * Minimal log level for console sink\n     */\n    consoleLogLevel: LogEventLevel;\n\n    /**\n     * Minimal log level for file sink\n     */\n    fileLogLevel: LogEventLevel;\n}\n\n/**\n * User settings component\n */\n@Component(\n{\n    selector: 'user-settings',\n    templateUrl: 'userSettings.component.html',\n    styleUrls: ['userSettings.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class UserSettingsComponent\n{\n    //######################### public properties - template bindings #########################\n\n    /**\n     * Array of available themes\n     */\n    public themes: string[] = config.configuration.themes;\n\n    /**\n     * Array of language definitions\n     */\n    public languages: LanguageDef[] = config.configuration.languages;\n\n    /**\n     * Available log levels\n     */\n    public logLevels: ValueNamePair[] = [];\n\n    /**\n     * Form group for general settings\n     */\n    public generalSettingsForm: FormGroup;\n\n    /**\n     * Form group for debugging settings\n     */\n    public debuggingSettingsForm: FormGroup;\n\n    /**\n     * Form group for logging settings\n     */\n    public loggingSettingsForm: FormGroup;\n\n    /**\n     * Active section\n     */\n    public activeSection: UserSettingsSections = UserSettingsSections.General;\n\n    /**\n     * User settings section enum\n     */\n    public UserSettingsSections = UserSettingsSections;\n\n    //######################### constructors #########################\n    constructor(settingsSvc: SettingsService,\n                formBuilder: FormBuilder,\n                consoleConfig: ConsoleSinkConfigService,\n                debugDataEnabled: DebugDataEnabledService)\n    {\n        const settings = settingsSvc.settings;\n        const debuggingSettings = settingsSvc.settingsDebugging;\n        const loggingSettings = settingsSvc.settingsLogging;\n        \n        this._getLogLevels();\n\n        this.generalSettingsForm = formBuilder.group(\n        <SettingsGeneral>\n        {\n            language: settings.language,\n            theme: settings.theme\n        });\n\n        this.debuggingSettingsForm = formBuilder.group(\n        <SettingsDebug>\n        {\n            consoleEnabled: debuggingSettings.consoleEnabled,\n            debugData: debuggingSettings.debugData\n        });\n\n        this.loggingSettingsForm = formBuilder.group(\n        <SettingsLoggingEnum>\n        {\n            consoleLogLevel: LogEventLevel[loggingSettings.consoleLogLevel],\n            fileLogLevel: LogEventLevel[loggingSettings.fileLogLevel]\n        });\n\n        this.generalSettingsForm.valueChanges.subscribe((generalSettings: SettingsGeneral) =>\n        {\n            settingsSvc.setSettings(generalSettings);\n        });\n\n        this.debuggingSettingsForm.valueChanges.subscribe((debugSettings: SettingsDebug) =>\n        {\n            debugDataEnabled.setEnabled(debugSettings.debugData);\n\n            settingsSvc.setDebuggingSettings(debugSettings);\n        });\n        \n        this.loggingSettingsForm.valueChanges.subscribe((loggingSettings: SettingsLoggingEnum) =>\n        {\n            consoleConfig.restrictToLevel = +loggingSettings.consoleLogLevel;\n\n            settingsSvc.setLoggingSettings(\n            {\n                consoleLogLevel: LogEventLevel[+loggingSettings.consoleLogLevel],\n                fileLogLevel: LogEventLevel[+loggingSettings.fileLogLevel]\n            });\n        });\n    }\n\n    //######################### private methods #########################\n\n    /**\n     * Gets available log levels\n     */\n    private _getLogLevels(): void\n    {\n        Object.keys(LogEventLevel).forEach(val =>\n        {\n            if(!isNaN(+val))\n            {\n                this.logLevels.push(\n                {\n                    name: LogEventLevel[val],\n                    value: val\n                });\n            }\n        });\n    }\n}","<div class=\"flex-column settings-menu\">\r\n    <a class=\"btn-line\"\r\n       [class.active]=\"activeSection == UserSettingsSections.General\"\r\n       (click)=\"activeSection = UserSettingsSections.General\">\r\n        <span class=\"fas fa-cog\"></span>\r\n        <span>{{'general' | translate}}</span>\r\n    </a>\r\n\r\n    <a class=\"btn-line\"\r\n       [class.active]=\"activeSection == UserSettingsSections.Logging\"\r\n       (click)=\"activeSection = UserSettingsSections.Logging\"\r\n       *authorize=\"'logging-settings'\">\r\n        <span class=\"fas fa-pen\"></span>\r\n        <span>{{'logging' | translate}}</span>\r\n    </a>\r\n\r\n    <a class=\"btn-line\"\r\n       [class.active]=\"activeSection == UserSettingsSections.Debugging\"\r\n       (click)=\"activeSection = UserSettingsSections.Debugging\"\r\n       *authorize=\"'debug-settings'\">\r\n        <span class=\"fas fa-bug\"></span>\r\n        <span>{{'debug' | translate}}</span>\r\n    </a>\r\n</div>\r\n\r\n<div>\r\n    <!-- GENERAL SETTIGNS -->\r\n    <div class=\"settings-items\" [formGroup]=\"generalSettingsForm\" *ngIf=\"activeSection == UserSettingsSections.General\">\r\n        <!-- THEME -->\r\n        <div class=\"text-capitalize\">{{'theme' | translate}}</div>\r\n\r\n        <div>\r\n            <ng-select formControlName=\"theme\">\r\n                <ng-option *ngFor=\"let theme of themes\" [text]=\"theme | translate\" [value]=\"theme\"></ng-option>\r\n            </ng-select>\r\n        </div>\r\n\r\n        <!-- LANGUAGE -->\r\n        <div class=\"text-capitalize\">{{'language' | translate}}</div>\r\n\r\n        <div>\r\n            <ng-select formControlName=\"language\">\r\n                <ng-option *ngFor=\"let lang of languages\" [text]=\"lang?.name\" [value]=\"lang?.lang\"></ng-option>\r\n            </ng-select>\r\n        </div>\r\n    </div>\r\n\r\n    <!-- LOGGING SETTIGNS -->\r\n    <div class=\"settings-items\" [formGroup]=\"loggingSettingsForm\" *ngIf=\"activeSection == UserSettingsSections.Logging\">\r\n        <!-- CONSOLE LOG LEVEL -->\r\n        <div class=\"text-capitalize\">{{'console log' | translate}}</div>\r\n\r\n        <div>\r\n            <ng-select formControlName=\"consoleLogLevel\">\r\n                <ng-option *ngFor=\"let level of logLevels\" [text]=\"level?.name\" [value]=\"level?.value\"></ng-option>\r\n            </ng-select>\r\n        </div>\r\n\r\n        <!-- FILE LOG LEVEL -->\r\n        <ng-template [authorize]=\"'authorized-electron'\">\r\n            <div class=\"text-capitalize\">{{'file log' | translate}}</div>\r\n\r\n            <div>\r\n                <ng-select formControlName=\"fileLogLevel\">\r\n                    <ng-option *ngFor=\"let level of logLevels\" [text]=\"level?.name\" [value]=\"level?.value\"></ng-option>\r\n                </ng-select>\r\n            </div>\r\n        </ng-template>\r\n    </div>\r\n\r\n    <!-- DEBUGGING SETTIGNS -->\r\n    <div class=\"settings-items\" [formGroup]=\"debuggingSettingsForm\" *ngIf=\"activeSection == UserSettingsSections.Debugging\">\r\n        <!-- CONSOLE -->\r\n        <div class=\"text-capitalize\">{{'console' | translate}}</div>\r\n\r\n        <div>\r\n            <mat-slide-toggle formControlName=\"consoleEnabled\"></mat-slide-toggle>\r\n        </div>\r\n\r\n        <!-- DEBUG DATA -->\r\n        <div class=\"text-capitalize\">{{'debug data' | translate}}</div>\r\n\r\n        <div>\r\n            <mat-slide-toggle formControlName=\"debugData\"></mat-slide-toggle>\r\n        </div>\r\n    </div>\r\n</div>","import {Injectable, KeyValueDiffers, Inject, KeyValueDiffer} from '@angular/core';\nimport {extend} from '@jscrpt/common';\nimport {Subject, Observable} from 'rxjs';\n\nimport {SettingsStorage} from './settings.interface';\nimport {SETTINGS_STORAGE} from '../../misc/tokens';\nimport {SettingsGeneral, SettingsDebug, SettingsLogging} from '../../config';\n\n/**\n * Class used as settings service\n */\n@Injectable({providedIn: 'root'})\nexport class SettingsService\n{\n    //######################### private methods #########################\n\n    /**\n     * Current general settings value\n     */\n    private _settings: SettingsGeneral = this._storage.get();\n\n    /**\n     * Current debugging settings value\n     */\n    private _settingsDebugging: SettingsDebug = this._storage.getDebugging();\n\n    /**\n     * Current logging settings value\n     */\n    private _settingsLogging: SettingsLogging = this._storage.getLogging();\n\n    /**\n     * General settings value differ\n     */\n    private _settingsValueDiff: KeyValueDiffer<any, any>;\n\n    /**\n     * Debugging settings value differ\n     */\n    private _settingsDebuggingValueDiff: KeyValueDiffer<any, any>;\n\n    /**\n     * Occurs when any of general settings properties change\n     */\n    private _settingsChangeSubject: Subject<keyof SettingsGeneral> = new Subject<keyof SettingsGeneral>();\n\n    /**\n     * Occurs when any of debugging settings properties change\n     */\n    private _settingsDebuggingChangeSubject: Subject<keyof SettingsDebug> = new Subject<keyof SettingsDebug>();\n\n    //######################### public properties #########################\n\n    /**\n     * Gets general settings object value\n     */\n    public get settings(): SettingsGeneral\n    {\n        return this._settings;\n    }\n\n    /**\n     * Gets debugging settings object value\n     */\n    public get settingsDebugging(): SettingsDebug\n    {\n        return this._settingsDebugging;\n    }\n\n    /**\n     * Gets logging settings object value\n     */\n    public get settingsLogging(): SettingsLogging\n    {\n        return this._settingsLogging;\n    }\n\n    /**\n     * Occurs when any of general settings properties change\n     */\n    public get settingsChange(): Observable<keyof SettingsGeneral>\n    {\n        return this._settingsChangeSubject.asObservable();\n    }\n\n    /**\n     * Occurs when any of debugging settings properties change\n     */\n    public get settingsDebuggingChange(): Observable<keyof SettingsDebug>\n    {\n        return this._settingsDebuggingChangeSubject.asObservable();\n    }\n\n    //######################### constructor #########################\n    constructor(keyValueDiffers: KeyValueDiffers,\n                @Inject(SETTINGS_STORAGE) private _storage: SettingsStorage)\n    {\n        this._settingsValueDiff = keyValueDiffers.find(this._settings).create();\n        this._settingsValueDiff.diff(this._settings);\n\n        this._settingsDebuggingValueDiff = keyValueDiffers.find(this._settingsDebugging).create();\n        this._settingsDebuggingValueDiff.diff(this._settingsDebugging);\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Sets new general settings\n     * @param settings Instance of general settings object\n     */\n    public setSettings(settings: SettingsGeneral): void\n    {\n        this._settings = extend(true, {}, this._settings, settings);\n        this._storage.set(settings);\n\n        const diff = this._settingsValueDiff.diff(settings);\n        \n        if(diff)\n        {\n            diff.forEachChangedItem(itm =>\n            {\n                this._settingsChangeSubject.next(itm.key as any);\n            });\n        }\n    }\n\n    /**\n     * Sets new debugging settings\n     * @param settings Instance of debugging settings object\n     */\n    public setDebuggingSettings(settings: SettingsDebug): void\n    {\n        this._settingsDebugging = extend(true, {}, this._settingsDebugging, settings);\n        this._storage.setDebugging(settings);\n\n        const diff = this._settingsDebuggingValueDiff.diff(settings);\n        \n        if(diff)\n        {\n            diff.forEachChangedItem(itm =>\n            {\n                this._settingsDebuggingChangeSubject.next(itm.key as any);\n            });\n        }\n    }\n\n    /**\n     * Sets new logging settings\n     * @param settings Instance of logging settings object\n     */\n    public setLoggingSettings(settings: SettingsLogging): void\n    {\n        this._settingsLogging = extend(true, {}, this._settingsLogging, settings);\n        this._storage.setLogging(settings);\n    }\n}","import {Injectable} from '@angular/core';\nimport {extend} from '@jscrpt/common';\nimport store from 'store';\n\nimport {config, SettingsGeneral, SettingsDebug, SettingsLogging} from '../../config';\nimport {SettingsStorage} from './settings.interface';\n\nconst GENERAL_SETTINGS_STORAGE = 'general-settings';\nconst DEBUGGING_SETTINGS_STORAGE = 'debugging-settings';\nconst LOGGING_SETTINGS_STORAGE = 'logging-settings';\n\n/**\n * Settings storage using local storage\n */\n@Injectable()\nexport class LocalSettingsStorage implements SettingsStorage\n{\n    //######################### public methods - implementation of SettingsStorage #########################\n\n    /**\n     * Gets general settings object from storage\n     */\n    public get(): SettingsGeneral\n    {\n        let settings = store.get(GENERAL_SETTINGS_STORAGE);\n\n        settings = extend(true,\n                          {},\n                          <SettingsGeneral>\n                          {\n                              theme: config.general.theme,\n                              language: config.general.language\n                          },\n                          settings);\n\n        return settings;\n    }\n\n    /**\n     * Sets general settings object to storage\n     * @param config General settings object to be stored\n     */\n    public set(config: SettingsGeneral): void\n    {\n        store.set(GENERAL_SETTINGS_STORAGE, config);\n    }\n\n    /**\n     * Gets debugging settings object from storage\n     */\n    public getDebugging(): SettingsDebug\n    {\n        let settings = store.get(DEBUGGING_SETTINGS_STORAGE);\n\n        settings = extend(true,\n                          {},\n                          <SettingsDebug>\n                          {\n                              consoleEnabled: config.debug.consoleEnabled,\n                              debugData: config.debug.debugData\n                          },\n                          settings);\n\n        return settings;\n    }\n\n    /**\n     * Sets debugging settings object to storage\n     * @param config Debugging settings object to be stored\n     */\n    public setDebugging(config: SettingsDebug): void\n    {\n        store.set(DEBUGGING_SETTINGS_STORAGE, config);\n    }\n\n    /**\n     * Gets logging settings object from storage\n     */\n    public getLogging(): SettingsLogging\n    {\n        let settings = store.get(LOGGING_SETTINGS_STORAGE);\n\n        settings = extend(true,\n                          {},\n                          <SettingsLogging>\n                          {\n                              consoleLogLevel: config.logging.consoleLogLevel,\n                              fileLogLevel: config.logging.fileLogLevel\n                          },\n                          settings);\n\n        return settings;\n    }\n\n    /**\n     * Sets logging settings object to storage\n     * @param config Logging settings object to be stored\n     */\n    public setLogging(config: SettingsLogging)\n    {\n        store.set(LOGGING_SETTINGS_STORAGE, config);\n    }\n}"],"sourceRoot":""}