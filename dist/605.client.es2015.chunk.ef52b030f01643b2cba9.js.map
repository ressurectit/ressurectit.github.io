{"version":3,"sources":["webpack://telecovid/./app/services/api/gridData/gridData.service.ts","webpack://telecovid/./app/modules/selectExtensions/directives/selectDirectiveBase.ts","webpack://telecovid/./app/services/api/enum/enum.service.ts","webpack://telecovid/./app/modules/selectExtensions/directives/enum/enumName/enumName.directive.ts","webpack://telecovid/./app/pages/+samples/components/components.component.html","webpack://telecovid/./app/pages/+samples/components/components.component.ts","webpack://telecovid/./app/pages/+samples/misc/components/styleSample/styleSample.animations.ts","webpack://telecovid/./app/pages/+samples/misc/pipes/codeBlock.pipe.ts","webpack://telecovid/./app/pages/+samples/misc/components/styleSample/styleSample.component.html","webpack://telecovid/./app/pages/+samples/misc/components/styleSample/styleSample.component.ts","webpack://telecovid/./app/pages/+samples/styles/styles.component.ts","webpack://telecovid/./app/pages/+samples/styles/styles.component.html","webpack://telecovid/./app/pages/+samples/samples.routes.ts","webpack://telecovid/./app/pages/+samples/samples.module.ts","webpack://telecovid/./app/services/systemNotifications/systemNotifications.service.ts"],"names":["GridDataService","_paging","Observable","config","SelectDirectiveBase","_select","_getData","value","this","_getDataImpl","selectOptions","plugins","normalState","type","options","cancelButton","liveSearch","emptyCancel","popup","texts","noAvailableOptions","keyboardHandler","valueHandler","dynamicOptionsCallback","optionsGatherer","minLength","EnumService","_type","response","pipe","map","result","res","Object","keys","forEach","key","itm","push","kratkyPopis","popis","EnumSelectDirective","select","_dataSvc","super","_codeOptionsGatherer","valueComparer","source","target","liveSearchFilter","query","normalizer","indexOf","isString","toLowerCase","getEnum","enumName","subscribe","data","text","optionsChange","emit","availableOptionsChange","ComponentsComponent","_systemNotifications","_globalNotifications","dateTimeOptions","selectorComponent","defaultPeriod","pickerCloseOnValueSelect","gridOptions","dataLoader","dataCallback","paging","itemsPerPageValues","initialItemsPerPage","initialPage","gridInitializer","showMessage","error","info","success","warning","clearMessages","localNotifications","page","itemsPerPage","ordering","getGridData","size","toPromise","content","totalCount","totalElements","showSystemNotification","showGlobalError","showGlobalInfo","showGlobalSuccess","showGlobalWarning","clearGlobal","showLocalError","showLocalInfo","showLocalSuccess","showLocalWarning","clearLocal","BindThis","path","canActivate","descriptionBackgroundTrigger","opacity","CodeBlockPipe","code","language","replace","StyleSampleComponent","description","codeDisplayed","StylesComponent","components","SamplesModule","SystemNotifications","logger","_enabled","window","Notification","permission","warn","requestPermission","then","message","body"],"mappings":"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","file":"605.client.es2015.chunk.ef52b030f01643b2cba9.js","sourcesContent":["import {Injectable} from '@angular/core';\nimport {RESTClient, GET, ResponseType, Produces, BaseUrl, DefaultHeaders, QueryObject} from '@anglr/rest';\nimport {Observable} from 'rxjs';\n\nimport {GridItem} from './gridData.interface';\nimport {PagedData, Pageable} from '../../../misc/types';\nimport {config} from '../../../config';\n\n/**\n * Service used to access grid data\n **/\n@Injectable()\n@BaseUrl(config.configuration.apiBaseUrl)\n@DefaultHeaders(config.configuration.defaultApiHeaders)\nexport class GridDataService extends RESTClient\n{\n    //######################### public methods #########################\n    \n    /**\n     * Gets grid data\n     */\n    @Produces(ResponseType.Json)\n    @GET('grid-data')\n    public getGridData(@QueryObject _paging: Pageable): Observable<PagedData<GridItem>>\n    {\n        return null;\n    }\n}","import {Directive} from '@angular/core';\nimport {NgSelectComponent, EditNormalStateComponent, EditNormalStateOptions, EditLiveSearchComponent, EditLiveSearchOptions, EditKeyboardHandlerComponent, DynamicValueHandlerComponent, DynamicValueHandlerOptions, DynamicOptionsGatherer, GetOptionsCallback, EditPopupOptions, EditPopupComponent} from '@anglr/select';\n\nimport {KodPopisValue} from '../../../misc/types';\n\n/**\n * Base directive for edit select directives\n */\n@Directive()\nexport abstract class SelectDirectiveBase\n{\n    //######################### constructor #########################\n    constructor(protected _select: NgSelectComponent<KodPopisValue>)\n    {\n        this._select.selectOptions =\n        {\n            plugins:\n            {\n                normalState:\n                {\n                    type: EditNormalStateComponent,\n                    options: <EditNormalStateOptions>\n                    {\n                        cancelButton: true\n                    }\n                },\n                liveSearch:\n                {\n                    type: EditLiveSearchComponent,\n                    options: <EditLiveSearchOptions>\n                    {\n                        emptyCancel: true\n                    }\n                },\n                popup:\n                {\n                    type: EditPopupComponent,\n                    options: <EditPopupOptions>\n                    {\n                        texts:\n                        {\n                            noAvailableOptions: 'Žiadne položky nie sú dostupné'\n                        }\n                    }\n                },\n                keyboardHandler:\n                {\n                    type: EditKeyboardHandlerComponent\n                },\n                valueHandler:\n                {\n                    type: DynamicValueHandlerComponent,\n                    options: <DynamicValueHandlerOptions<KodPopisValue>>\n                    {\n                        dynamicOptionsCallback: this._getData\n                    }\n                }\n            },\n            optionsGatherer: new DynamicOptionsGatherer({dynamicOptionsCallback: this._getData, minLength: 0})\n        };\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Used for obtaining dynamic options\n     */\n    protected _getData: GetOptionsCallback<KodPopisValue> = (async value =>\n    {\n        return this._getDataImpl(value);\n    });\n\n    /**\n     * Used for obtaining dynamic options custom implementation\n     */\n    protected abstract _getDataImpl: GetOptionsCallback<KodPopisValue>;\n}","import {Injectable} from '@angular/core';\nimport {RESTClient, GET, BaseUrl, DefaultHeaders, Path, ResponseTransform} from '@anglr/rest';\nimport {Dictionary} from '@jscrpt/common';\nimport {Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\nimport {config} from '../../../config';\nimport {EnumData} from './enum.interface';\n\n\n/**\n * Service used for accessing enum resource\n */\n@Injectable({providedIn: 'root'})\n@BaseUrl(`${config.configuration.apiBaseUrl}enum`)\n@DefaultHeaders(config.configuration.defaultApiHeaders)\nexport class EnumService extends RESTClient\n{\n    //######################### public methods #########################\n\n    /**\n     * Gets enum data\n     * @returns Observable\n     */\n    @ResponseTransform()\n    @GET('/{type}')\n    public getEnum(@Path('type') _type: string): Observable<EnumData[]>\n    {\n        return null;\n    }\n\n    //######################### private methods #########################\n\n    /**\n     * Transform response from getEnum method\n     */\n    //@ts-ignore\n    private getEnumResponseTransform(response: Observable<Dictionary<{popis: string, kratkyPopis: string}>>): Observable<EnumData[]>\n    {\n        return response.pipe(map(result =>\n        {\n            const res: EnumData[] = [];\n\n            Object.keys(result).forEach(key =>\n            {\n                const itm = result[key];\n\n                res.push(\n                {\n                    key,\n                    kratkyPopis: itm.kratkyPopis,\n                    popis: itm.popis\n                });\n            });\n\n            return res;\n        }));\n    }\n}","import {Directive, Input, OnInit} from '@angular/core';\nimport {NgSelectComponent, GetOptionsCallback, NgSelectOption, CodeOptionsGatherer, BasicValueHandlerComponent, NormalizeFunc} from '@anglr/select';\nimport {isString, NormalizationCharMaps, normalize} from '@jscrpt/common';\n\nimport {SelectDirectiveBase} from '../../selectDirectiveBase';\nimport {KodPopisValue} from '../../../../../misc/types';\nimport {EnumData, EnumService} from '../../../../../services/api/enum';\n\n/**\n * Directive used for obtaining enum\n */\n@Directive(\n{\n    selector: 'ng-select[enumName]'\n})\nexport class EnumSelectDirective extends SelectDirectiveBase implements OnInit\n{\n    //######################### private fields #########################\n\n    /**\n     * Enum options gatherer instance\n     */\n    private _codeOptionsGatherer: CodeOptionsGatherer<EnumData> = new CodeOptionsGatherer<EnumData>();\n\n    //######################### public properties - template bindings #########################\n\n    /**\n     * Name of used enum\n     */\n    @Input()\n    public enumName: string;\n\n    //######################### constructor #########################\n    constructor(select: NgSelectComponent,\n                protected _dataSvc: EnumService)\n    {\n        super(select);\n\n        this._codeOptionsGatherer = new CodeOptionsGatherer();\n\n        select.selectOptions =\n        {\n            plugins:\n            {\n                valueHandler:\n                {\n                    type: BasicValueHandlerComponent\n                }\n            },\n            optionsGatherer: this._codeOptionsGatherer,\n            valueComparer: (source, target) => source?.key == target?.key,\n            liveSearchFilter: (query: string, normalizer: NormalizeFunc = value => value) =>\n            {\n                return itm => normalizer(itm.value.popis).indexOf(normalizer(query)) >= 0;\n            },\n            normalizer: value =>\n            {\n                if(isString(value))\n                {\n                    return normalize(value.toLowerCase(), NormalizationCharMaps.slovak);\n                }\n\n                return value;\n            },\n        };\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n\n    /**\n     * Initialize component\n     */\n    public ngOnInit()\n    {\n        this._dataSvc.getEnum(this.enumName)\n            .subscribe(data => \n            {\n                this._codeOptionsGatherer.options = data\n                    .map(itm =>\n                    {\n                        return <NgSelectOption<EnumData>>\n                        {\n                            value: itm,\n                            text: itm.popis\n                        };\n                    });\n\n                    this._codeOptionsGatherer.optionsChange.emit();\n                    this._codeOptionsGatherer.availableOptionsChange.emit();\n            });\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Used for obtaining dynamic options\n     */\n    protected _getDataImpl: GetOptionsCallback<KodPopisValue> = () => null;\n}\n","<h3 class=\"page-title top-border-round\">Ukážky komponentov</h3>\r\n\r\n<div class=\"primary-block bottom-border-round padding-horizontal-small\">\r\n    <!-- SYSTEMOVE UPOZORNENIA -->\r\n    <div class=\"highlight-block border-round\">\r\n        <div class=\"text-uppercase spread-text extra-extra-large-text bold\">systémové upozornenie</div>\r\n\r\n        <div>\r\n            <button class=\"btn btn-primary\" (click)=\"showSystemNotification()\">show system notification</button>\r\n        </div>\r\n    </div>\r\n\r\n    <!-- DATETIMEPICKER -->\r\n    <div class=\"highlight-block border-round margin-top-big\">\r\n        <div class=\"text-uppercase spread-text extra-extra-large-text bold\">výber dátumu</div>\r\n\r\n        <div class=\"flex-row\">\r\n            <div>\r\n                <div class=\"text-uppercase large-text\">základné použitie</div>\r\n\r\n                <div>\r\n                    <date-time-selector class=\"form-control\"></date-time-selector>\r\n                </div>\r\n            </div>\r\n\r\n            <div class=\"margin-left-small\">\r\n                <div class=\"text-uppercase large-text\">použitie s možnosťami</div>\r\n\r\n                <div>\r\n                    <date-time-selector class=\"form-control\" [options]=\"dateTimeOptions\"></date-time-selector>\r\n                </div>\r\n            </div>\r\n\r\n            <div class=\"margin-left-small\">\r\n                <div class=\"text-uppercase large-text\">min, max relatívne</div>\r\n\r\n                <div>\r\n                    <date-time-selector class=\"form-control\" minValue=\"2020-06-10\" maxValue=\"+1m\"></date-time-selector>\r\n                </div>\r\n            </div>\r\n\r\n            <div class=\"margin-left-small\">\r\n                <div class=\"text-uppercase large-text\">od, do rozsah</div>\r\n\r\n                <div>\r\n                    <date-time-selector class=\"form-control\" #minDate [maxValue]=\"maxDate\"></date-time-selector>\r\n                    <date-time-selector class=\"form-control\" #maxDate [minValue]=\"minDate\"></date-time-selector>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <!-- MULTI TLAČIDLO -->\r\n    <div class=\"highlight-block border-round margin-top-big\">\r\n        <div class=\"text-uppercase spread-text extra-extra-large-text\">multi tlačidlo</div>\r\n\r\n        <div class=\"inline-block\">\r\n            <multi-button class=\"btn btn-primary\">\r\n                <span class=\"fab fa-firefox-browser\"></span>\r\n                <span>test</span>\r\n\r\n                <ng-template>\r\n                    <button>\r\n                        <span class=\"fab fa-firefox\"></span>\r\n                        <span>tlačidlo</span>\r\n                    </button>\r\n                </ng-template>\r\n            </multi-button>\r\n        </div>\r\n    </div>\r\n\r\n    <!-- UPOZORNENIA -->\r\n    <div class=\"highlight-block border-round margin-top-big\">\r\n        <div class=\"text-uppercase spread-text extra-extra-large-text\">upozornenia</div>\r\n\r\n        <div>\r\n            <div class=\"text-uppercase large-text\">globálne</div>\r\n\r\n            <div>\r\n                <button class=\"margin-right-small btn btn-error\" (click)=\"showGlobalError()\">chyba</button>\r\n                <button class=\"margin-right-small btn btn-info\" (click)=\"showGlobalInfo()\">info</button>\r\n                <button class=\"margin-right-small btn btn-success\" (click)=\"showGlobalSuccess()\">úspech</button>\r\n                <button class=\"margin-right-small btn btn-warning\" (click)=\"showGlobalWarning()\">upozornenie</button>\r\n                <button class=\"margin-right-small btn btn-default\" (click)=\"clearGlobal()\">zrušiť všetky</button>\r\n            </div>\r\n\r\n            <div class=\"text-uppercase large-text\">lokálne</div>\r\n\r\n            <notifications #localNotifications withProvider></notifications>\r\n\r\n            <div>\r\n                <button class=\"margin-right-small btn btn-error\" (click)=\"showLocalError()\">chyba</button>\r\n                <button class=\"margin-right-small btn btn-info\" (click)=\"showLocalInfo()\">info</button>\r\n                <button class=\"margin-right-small btn btn-success\" (click)=\"showLocalSuccess()\">úspech</button>\r\n                <button class=\"margin-right-small btn btn-warning\" (click)=\"showLocalWarning()\">upozornenie</button>\r\n                <button class=\"margin-right-small btn btn-default\" (click)=\"clearLocal()\">zrušiť všetky</button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <!-- SELECT -->\r\n    <div class=\"highlight-block border-round margin-top-big\">\r\n        <div class=\"text-uppercase spread-text extra-extra-large-text\">select</div>\r\n\r\n        <div class=\"flex-row\">\r\n            <div>\r\n                <div class=\"text-uppercase large-text\">základné použitie</div>\r\n\r\n                <div>\r\n                    <ng-select>\r\n                        <ng-option text=\"prvá\" [value]=\"1\"></ng-option>\r\n                        <ng-option text=\"druhá\" [value]=\"2\"></ng-option>\r\n                        <ng-option text=\"tretia\" [value]=\"3\"></ng-option>\r\n                        <ng-option text=\"štvrtá\" [value]=\"4\"></ng-option>\r\n                        <ng-option text=\"piata\" [value]=\"5\"></ng-option>\r\n                    </ng-select>\r\n                </div>\r\n            </div>\r\n\r\n            <div class=\"margin-left-small\">\r\n                <div class=\"text-uppercase large-text\">editačné použitie</div>\r\n\r\n                <div>\r\n                    <ng-select editStyle>\r\n                        <ng-option text=\"prvá\" [value]=\"1\"></ng-option>\r\n                        <ng-option text=\"druhá\" [value]=\"2\"></ng-option>\r\n                        <ng-option text=\"tretia\" [value]=\"3\"></ng-option>\r\n                        <ng-option text=\"štvrtá\" [value]=\"4\"></ng-option>\r\n                        <ng-option text=\"piata\" [value]=\"5\"></ng-option>\r\n                    </ng-select>\r\n                </div>\r\n            </div>\r\n\r\n            <div class=\"margin-left-small\">\r\n                <div class=\"text-uppercase large-text\">dáta zo servera</div>\r\n\r\n                <div>\r\n                    <ng-select enumName=\"sample\"></ng-select>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n\r\n    <!-- GRID -->\r\n    <div class=\"text-uppercase spread-text extra-extra-large-text\">grid</div>\r\n\r\n    <ng-grid #gridSample [gridOptions]=\"gridOptions\">\r\n        <basic-table-metadata>\r\n            <basic-table-column id=\"id\" name=\"id\" title=\"ID\"></basic-table-column>\r\n            <basic-table-column id=\"index\" name=\"index\" title=\"Index\"></basic-table-column>\r\n            <basic-table-column id=\"isActive\" name=\"isActive\" title=\"Active\"></basic-table-column>\r\n            <basic-table-column id=\"balance\" name=\"balance\" title=\"Balance\"></basic-table-column>\r\n            <basic-table-column id=\"age\" name=\"age\" title=\"Age\"></basic-table-column>\r\n            <basic-table-column id=\"name\" name=\"name\" title=\"First name\"></basic-table-column>\r\n            <basic-table-column id=\"surname\" name=\"surname\" title=\"Surname\"></basic-table-column>\r\n            <basic-table-column id=\"email\" name=\"email\" title=\"E-Mail\"></basic-table-column>\r\n            <basic-table-column id=\"address\" name=\"address\" title=\"Address\"></basic-table-column>\r\n            <basic-table-column id=\"phone\" name=\"phone\" title=\"Phone\"></basic-table-column>\r\n        </basic-table-metadata>\r\n    </ng-grid>\r\n</div>","import {Component, ChangeDetectionStrategy, ViewChild} from '@angular/core';\nimport {ComponentRoute} from '@anglr/common/router';\nimport {AuthGuard, Authorize} from '@anglr/authentication';\nimport {GlobalNotificationsService, LocalNotificationsService} from '@anglr/notifications';\nimport {DateTimeSelectorOptions, MONTH, SimpleInputDateTimeSelectorComponent} from '@anglr/datetime';\nimport {AsyncDataLoaderOptions, BasicPagingOptions, DataResponse, GridOptions, QueryGridInitializerComponent, SimpleOrdering} from '@anglr/grid';\nimport {BindThis} from '@jscrpt/common';\n\nimport {SystemNotifications} from '../../../services/systemNotifications';\nimport {GridDataService, GridItem} from '../../../services/api/gridData';\n\n/**\n * Component containing sample components\n */\n@Component(\n{\n    selector: 'components-view',\n    templateUrl: 'components.component.html',\n    styleUrls: ['components.component.scss'],\n    providers: [GridDataService],\n    host:\n    {\n        '[class.scrollable]': 'true'\n    },\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@Authorize('components-page')\n@ComponentRoute({path: 'components', canActivate: [AuthGuard]})\nexport class ComponentsComponent\n{\n    //######################### public properties - template bindings #########################\n\n    /**\n     * Options for datetime selector\n     */\n    public dateTimeOptions: DateTimeSelectorOptions;\n\n    /**\n     * Options for grid\n     */\n    public gridOptions: GridOptions;\n\n    //######################### public properties - children #########################\n\n    /**\n     * Local notifications service instance\n     */\n    @ViewChild('localNotifications', {read: LocalNotificationsService})\n    public localNotifications: LocalNotificationsService;\n\n    //######################### constructors #########################\n    constructor(private _systemNotifications: SystemNotifications,\n                private _globalNotifications: GlobalNotificationsService,\n                private _dataSvc: GridDataService)\n    {\n        this.dateTimeOptions =\n        {\n            selectorComponent: SimpleInputDateTimeSelectorComponent,\n            defaultPeriod: MONTH,\n            pickerCloseOnValueSelect: true\n        };\n\n        this.gridOptions =\n        {\n            plugins:\n            {\n                dataLoader:\n                {\n                    options: <AsyncDataLoaderOptions<GridItem, SimpleOrdering>>\n                    {\n                        dataCallback: this._getData\n                    }\n                },\n                paging:\n                {\n                    options: <BasicPagingOptions>\n                    {\n                        itemsPerPageValues: [10, 20],\n                        initialItemsPerPage: 10,\n                        initialPage: 1\n                    }\n                },\n                gridInitializer:\n                {\n                    type: QueryGridInitializerComponent\n                }\n            }\n        };\n    }\n\n    //######################### public methods - template bindings #########################\n    \n    /**\n     * Shows system notification\n     */\n    public showSystemNotification()\n    {\n        this._systemNotifications.showMessage('Ahoj systémové upozornenie!');\n    }\n\n    public showGlobalError()\n    {\n        this._globalNotifications.error('Globálna error správa');\n    }\n\n    public showGlobalInfo()\n    {\n        this._globalNotifications.info('Globálna info správa');\n    }\n\n    public showGlobalSuccess()\n    {\n        this._globalNotifications.success('Globálna správa úspechu');\n    }\n\n    public showGlobalWarning()\n    {\n        this._globalNotifications.warning('Globálna správa upozornenia');\n    }\n\n    public clearGlobal()\n    {\n        this._globalNotifications.clearMessages();\n    }\n\n    public showLocalError()\n    {\n        this.localNotifications.error('Globálna error správa');\n    }\n\n    public showLocalInfo()\n    {\n        this.localNotifications.info('Globálna info správa');\n    }\n\n    public showLocalSuccess()\n    {\n        this.localNotifications.success('Globálna správa úspechu');\n    }\n\n    public showLocalWarning()\n    {\n        this.localNotifications.warning('Globálna správa upozornenia');\n    }\n\n    public clearLocal()\n    {\n        this.localNotifications.clearMessages();\n    }\n\n    /**\n     * Callback used for obtaining data\n     * @param page Index of requested page\n     * @param itemsPerPage Number of items per page\n     * @param ordering Order by column name\n     */\n    @BindThis\n    private async _getData(page: number, itemsPerPage: number, ordering: SimpleOrdering): Promise<DataResponse<GridItem>>\n    {\n        const result = await this._dataSvc\n            .getGridData(\n            {\n                page: (page - 1),\n                size: itemsPerPage\n            }).toPromise();\n\n        return {\n            data: result.content,\n            totalCount: result.totalElements\n        };\n    }\n}   ","import {animate, style, transition, trigger} from '@angular/animations';\n\nexport const descriptionBackgroundTrigger = trigger('descriptionBackground',\n[\n    transition(':enter',\n    [\n        style(\n        {\n            opacity: 0\n        }),\n        animate('250ms', style(\n        {\n            opacity: 1\n        }))\n    ]),\n    transition(':leave',\n    [\n        animate('250ms', style(\n        {\n            opacity: 0\n        }))\n    ])\n]);\n","import {Pipe, PipeTransform} from '@angular/core';\n\n/**\n * Pipe used for creating markdown code block\n */\n@Pipe({name: 'codeBlock'})\nexport class CodeBlockPipe implements PipeTransform\n{\n    /**\n     * Creates markdown code block from content\n     * @param code Code that will be wrapped\n     * @param language Language that will used for syntax highlighting\n     */\n    public transform(code: string, language: string = 'html') \n    {\n        if(language == 'html')\n        {\n            code = code.replace(/\\sng-tns-c\\d+-\\d+/g, '');\n        }\n\n        return '```' + language + '\\n' + code + '\\n```';\n    }\n}","<div class=\"description\">\r\n    <div class=\"description-row\"></div>\r\n    <div class=\"description-row code\" *ngIf=\"codeDisplayed\" @descriptionBackground></div>\r\n\r\n    <div class=\"description-text\">{{description}}</div>\r\n    \r\n    <a class=\"btn btn-icon description-icon\" (click)=\"codeDisplayed = !codeDisplayed\">\r\n        <span>&lt;/&gt;</span>\r\n    </a>\r\n</div>\r\n\r\n<div class=\"style-code-block\">\r\n    <div [class.hidden]=\"codeDisplayed\" class=\"sample-content\" #sampleContent>\r\n        <ng-content></ng-content>\r\n    </div>\r\n\r\n    <div *ngIf=\"codeDisplayed\" class=\"style-code\" @fadeInOut [renderMarkdown]=\"sampleContent?.innerHTML | codeBlock\"></div>\r\n</div>","import {Component, ChangeDetectionStrategy, Input} from '@angular/core';\nimport {fadeInOutTrigger} from '@anglr/animations';\n\nimport {descriptionBackgroundTrigger} from './styleSample.animations';\n\n/**\n * Component used for displaying style sample\n */\n@Component(\n{\n    selector: 'style-sample',\n    templateUrl: 'styleSample.component.html',\n    styleUrls: ['styleSample.component.scss'],\n    animations: [fadeInOutTrigger, descriptionBackgroundTrigger],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class StyleSampleComponent\n{\n    //######################### public properties - inputs #########################\n\n    /**\n     * Description of style sample\n     */\n    @Input()\n    public description: string = '';\n\n    //######################### public properties - template bindings #########################\n\n    /**\n     * Indication whether code is visible\n     */\n    public codeDisplayed: boolean = false;\n}","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {ComponentRoute} from '@anglr/common/router';\nimport {AuthGuard, Authorize} from '@anglr/authentication';\n\n/**\n * Page used for displaying styles samples\n */\n@Component(\n{\n    selector: 'styles-samples-view',\n    templateUrl: 'styles.component.html',\n    // styleUrls: ['styles.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@ComponentRoute({path: 'styles', canActivate: [AuthGuard]})\n@Authorize('styles-page')\nexport class StylesComponent\n{\n}","<h3 class=\"page-title top-border-round\">Ukážky štýlov</h3>\r\n\r\n<div class=\"primary-block bottom-border-round padding-horizontal-small\">\r\n    <style-sample description=\"Nadpis/hlavička stránky\">\r\n        <h3 class=\"page-title top-border-round\">Text nadpisu stránky</h3>\r\n    </style-sample>\r\n</div>","import {ComponentsComponent} from './components/components.component';\nimport {StylesComponent} from './styles/styles.component';\n\nexport const components =\n[\n    ComponentsComponent,\n    StylesComponent\n];","import {NgModule} from '@angular/core';\nimport {ModuleRoutes} from '@anglr/common/router';\nimport {MultiButtonModule} from '@anglr/common';\nimport {NotificationsModule} from '@anglr/notifications';\nimport {MarkdownModule} from '@anglr/md-help/web';\n\nimport {components} from './samples.routes';\nimport {DisplayingFeatureModule, FormsFeatureModule, GridFeatureModule} from '../../modules';\nimport {StyleSampleComponent} from './misc/components';\nimport {CodeBlockPipe} from './misc/pipes';\n\n/**\n * Module for samples pages\n */\n@NgModule(\n{\n    imports:\n    [\n        DisplayingFeatureModule,\n        FormsFeatureModule,\n        GridFeatureModule,\n        NotificationsModule,\n        MarkdownModule,\n        MultiButtonModule\n    ],\n    declarations:\n    [\n        ...components,\n        StyleSampleComponent,\n        CodeBlockPipe\n    ]\n})\n@ModuleRoutes(components)\nexport class SamplesModule\n{\n}","import {Inject, Injectable} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\n\nimport {NOTIFICATION_TITLE} from '../../misc/constants';\n\n/**\n * Service used for displaying system notifications\n */\n@Injectable({providedIn: 'root'})\nexport class SystemNotifications\n{\n    //######################### private fields #########################\n\n    /**\n     * Indication that notifications are enabled\n     */\n    private _enabled: boolean = false;\n\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) logger: Logger)\n    {\n        // Let's check if the browser supports notifications\n        if (!('Notification' in window)) \n        {\n            logger.warn('This browser does not support desktop notification');\n        }\n        //\n        else if (Notification.permission === 'granted')\n        {\n            this._enabled = true;\n        }\n        // Otherwise, we need to ask the user for permission\n        else if (Notification.permission !== 'denied')\n        {\n            logger.warn('User has not allowed desktop notification yet');\n\n            Notification.requestPermission().then((permission) =>\n            {\n                // If the user accepts, let's create a notification\n                if (permission === 'granted')\n                {\n                    this._enabled = true;\n                }\n            });\n        }\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Shows message as system notification\n     * @param message - Message to be displayed\n     */\n    public showMessage(message: string)\n    {\n        // Let's check whether notification permissions have already been granted\n        if (this._enabled)\n        {\n            // If it's okay let's create a notification\n            new Notification(NOTIFICATION_TITLE,\n            {\n                body: message\n            });\n        }\n    }\n}"],"sourceRoot":""}