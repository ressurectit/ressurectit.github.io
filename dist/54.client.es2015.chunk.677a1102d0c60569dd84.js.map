{"version":3,"sources":["webpack://telecovid/./app/misc/basePrehladComponent.ts","webpack://telecovid/./app/misc/decorators/transformOrdering.decorator.ts","webpack://telecovid/./app/modules/responsiveUtils/pipes/formValuePreview.pipe.ts","webpack://telecovid/./app/modules/vyberStlpcovBtn/components/vyberStlpcovBtn/vyberStlpcovBtn.component.ts","webpack://telecovid/./app/modules/vyberStlpcovBtn/components/vyberStlpcovBtn/vyberStlpcovBtn.component.html","webpack://telecovid/./app/services/api/lekari/lekari.service.ts","webpack://telecovid/./app/pages/+lekari/prehlad/prehlad.component.html","webpack://telecovid/./app/pages/+lekari/prehlad/prehlad.component.ts","webpack://telecovid/./app/pages/+lekari/lekari.routes.ts","webpack://telecovid/./app/pages/+lekari/lekari.module.ts"],"names":["BasePrehladComponent","_formBuilder","_route","_router","_changeDetector","filterCollapsed","filterDefault","this","defaultFilterValue","snapshot","paramMap","has","get","filter","group","patchValue","emitEvent","grid","execute","setPage","refreshData","navigate","relativeTo","queryParamsHandling","replaceUrl","refreshGridToDefaults","serializeToUrlQuery","value","detectChanges","page","itemsPerPage","ordering","_currentPaging","size","result","getPrehlad","_getFilterValues","toPromise","data","content","totalCount","totalElements","_target","propertyKey","descriptor","originalValue","isFunction","Error","configurable","bound","bind","funcBound","reqOrdering","direction","orderByDirection","sort","orderBy","isPresent","Object","defineProperty","writable","FormValuePreviewPipe","controlName","controls","control","push","join","VyberStlpcovBtnComponent","showSelection","LekariService","_filter","_paging","_ordering","Observable","config","LekariPrehladComponent","formBuilder","route","router","_dataSvc","changeDetector","super","gridOptions","plugins","dataLoader","options","dataCallback","_getData","firstName","lastName","healthcareProfessionalCode","contact","paging","getAllLekari","invalidateVisuals","search","path","canActivate","components","LekariModule"],"mappings":"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","file":"54.client.es2015.chunk.677a1102d0c60569dd84.js","sourcesContent":["import {OnInit, ViewChild, Directive, ChangeDetectorRef} from '@angular/core';\nimport {FormBuilder, FormGroup} from '@angular/forms';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {GridOptions, SimpleOrdering, DataResponse, GridComponent} from '@anglr/grid';\nimport {setPage, refreshData} from '@anglr/grid/extensions';\nimport {prepareForFormBuilder} from '@anglr/common/forms';\nimport {readEncodedFilterWithDates} from '@anglr/common/date-fns';\nimport {serializeToUrlQuery} from '@jscrpt/common';\nimport {Observable} from 'rxjs';\n\nimport {Orderable, Pageable, PagedData} from './types';\nimport {TransformOrdering} from './decorators';\n\n/**\n * Base class for all \"prehlad\" pages\n */\n@Directive()\nexport abstract class BasePrehladComponent<TFilter, TDataItem> implements OnInit\n{\n    //######################### protected page #########################\n\n    /**\n     * Current paging used for loading data\n     */\n    protected _currentPaging: Pageable;\n\n    //######################### public properties - template bindings #########################\n\n    /**\n     * Options for grid\n     */\n    public gridOptions: GridOptions;\n\n\n    /**\n     * Filter form group\n     */\n    public filter: FormGroup;\n\n    /**\n     * Indication whether is filter collapsed\n     */\n    public filterCollapsed: boolean = false;\n\n    //######################### protected properties #########################\n\n    /**\n     * Gets default value of filter\n     */\n    protected abstract get defaultFilterValue(): TFilter;\n\n    //######################### public properties - children #########################\n\n    /**\n     * Instance of grid component\n     */\n    @ViewChild('grid', {static: false})\n    public grid: GridComponent;\n\n    //######################### constructors #########################\n    constructor(protected _formBuilder: FormBuilder,\n                protected _route: ActivatedRoute,\n                protected _router: Router,\n                protected _changeDetector: ChangeDetectorRef)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit()\n    {\n        let filterDefault: TFilter = this.defaultFilterValue;\n\n        if(this._route.snapshot.paramMap.has('filter'))\n        {\n            filterDefault = readEncodedFilterWithDates(filterDefault, this._route.snapshot.paramMap.get('filter'));\n        }\n\n        this.filter = this._formBuilder.group(prepareForFormBuilder(this.defaultFilterValue));\n        this.filter.patchValue(filterDefault, {emitEvent: false});\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Refresh to defaults grid content\n     */\n    public refreshGridToDefaults()\n    {\n        this.grid.execute(setPage(1),\n                          refreshData(true));\n    }\n\n    /**\n     * Refresh grid data\n     */\n    public refreshGrid()\n    {\n        this.grid.execute(refreshData(true));\n    }\n\n    /**\n     * Resets filter to its default value\n     */\n    public async resetFilter()\n    {\n        this.filter.patchValue(this.defaultFilterValue);\n\n        await this._router.navigate(['.', {}],\n                                    {\n                                        relativeTo: this._route,\n                                        queryParamsHandling: 'merge',\n                                        replaceUrl: true\n                                    });\n\n        this.refreshGridToDefaults();\n    }\n\n    /**\n     * Runs search\n     */\n    public async search()\n    {\n        await this._router.navigate(['.', {filter: serializeToUrlQuery(this.filter.value)}],\n                                    {\n                                        relativeTo: this._route,\n                                        queryParamsHandling: 'merge',\n                                        replaceUrl: true\n                                    });\n\n        this.refreshGridToDefaults();\n    }\n\n    /**\n     * Explicitly runs invalidation of content (change detection)\n     */\n    public invalidateVisuals(): void\n    {\n        this._changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Callback used for obtaining data\n     * @param page Index of requested page\n     * @param itemsPerPage Number of items per page\n     * @param ordering Order by column name\n     */\n    @TransformOrdering\n    protected async _getData(page: number, itemsPerPage: number, ordering: SimpleOrdering&Orderable): Promise<DataResponse<TDataItem>>\n    {\n        this._currentPaging = \n        {\n            page: page - 1,\n            size: itemsPerPage\n        };\n\n        const result = await this.getPrehlad(this._currentPaging,\n                                             ordering,\n                                             this._getFilterValues()).toPromise();\n\n        return {\n            data: result.content,\n            totalCount: result.totalElements\n        };\n    }\n\n    /**\n     * Gets data for prehlad\n     * @param paging Information about requested paging\n     * @param ordering Information about requested ordering\n     * @param filter Information about requested filter\n     */\n    protected abstract getPrehlad(paging?: Pageable,\n                                  ordering?: Orderable,\n                                  filter?: TFilter): Observable<PagedData<TDataItem>>;\n\n    /**\n     * Gets filter value\n     */\n    protected _getFilterValues(): TFilter\n    {\n        return this.filter.value;\n    }\n}","import {SimpleOrdering} from '@anglr/grid';\nimport {isFunction, isPresent, OrderByDirection} from '@jscrpt/common';\n\nimport {Orderable} from '../types';\n\n/**\n * Transforms SimpleOrdering into Orderable for REST\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function TransformOrdering(_target: Object, propertyKey: string, descriptor: PropertyDescriptor)\n{\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    const originalValue: Function = descriptor.value ?? descriptor.get();\n\n    if(!isFunction(originalValue))\n    {\n        throw new Error(`Unable to apply @TransformOrdering decorator to '${propertyKey}', it is not a method.`);\n    }\n\n    return {\n        configurable: true,\n        get(this: any): any\n        {\n            const bound: any = originalValue.bind(this);\n\n            const func = function(page: number, itemsPerPage: number, ordering: SimpleOrdering)\n            {\n                let reqOrdering: Orderable = null;\n\n                if(ordering)\n                {\n                    reqOrdering =\n                    {\n                        direction: ordering.orderByDirection,\n                        sort: ordering.orderBy\n                    };\n                }\n\n                if(reqOrdering)\n                {\n                    if(reqOrdering.sort && isPresent(reqOrdering.direction))\n                    {\n                        reqOrdering.sort = `${reqOrdering.sort},${reqOrdering.direction == OrderByDirection.Descendant ? 'desc' : 'asc'}`;\n                    }\n                    else\n                    {\n                        delete reqOrdering.sort;\n                    }\n\n                    delete reqOrdering.direction;\n                }\n\n                return bound(page, itemsPerPage, reqOrdering);\n            };\n\n            const funcBound = func.bind(this);\n\n            Object.defineProperty(this,\n                                  propertyKey,\n                                  {\n                                      value: funcBound,\n                                      configurable: true,\n                                      writable: true\n                                  });\n\n            return funcBound;\n        }\n    };\n}","import {Pipe, PipeTransform} from '@angular/core';\nimport {FormControl, FormGroup} from '@angular/forms';\n\n/**\n * Pipe that is used to visualize form group value\n */\n@Pipe({name: 'formValuePreview'})\nexport class FormValuePreviewPipe implements PipeTransform\n{\n    /**\n     * Transforms form group value to string\n     * @param group Form group to be visualized\n     */\n    public transform(group: FormGroup): string\n    {\n        const result = [];\n        \n        for(const controlName in group.controls)\n        {\n            const control = group.get(controlName);\n\n            if(control instanceof FormControl && !!control.value)\n            {\n                result.push(`${controlName}: ${control.value}`);\n            }\n        }\n\n        return result.join(' | ');\n    }\n}","import {Component, ChangeDetectionStrategy, Input} from '@angular/core';\nimport {Grid} from '@anglr/grid';\nimport {showMetadataSelector} from '@anglr/grid/extensions';\n\n/**\n * Component used for displaying column selection\n */\n@Component(\n{\n    selector: 'btn-column-selection',\n    templateUrl: 'vyberStlpcovBtn.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class VyberStlpcovBtnComponent\n{\n    //######################### public properties - inputs #########################\n\n    /**\n     * Grid component for which is column selection displayed\n     */\n    @Input()\n    public grid: Grid;\n\n    //######################### public methods - template bindings #########################\n\n    /**\n     * Shows metadata selection for grid\n     */\n    public showSelection()\n    {\n        if(this.grid)\n        {\n            this.grid.execute(showMetadataSelector());\n        }\n    }\n}","<button class=\"btn btn-info\" type=\"button\" (click)=\"showSelection()\">\r\n    <span class=\"fa fa-list\"></span>\r\n    <span>VÝBER STĹPCOV</span>\r\n</button>","import {Injectable} from '@angular/core';\nimport {RESTClient, BaseUrl, DefaultHeaders, POST, Body, QueryObject, JsonContentType} from '@anglr/rest';\nimport {Observable} from 'rxjs';\n\nimport {Orderable, Pageable, PagedData} from '../../../misc/types';\nimport {LekarItem} from './lekari.interface';\nimport {config} from '../../../config';\n\n\n/**\n * Service used for accessing 'lekar' resources\n */\n@Injectable()\n@BaseUrl(`${config.configuration.apiBaseUrl}healthcareProffesional`)\n@DefaultHeaders(config.configuration.defaultApiHeaders)\nexport class LekariService extends RESTClient\n{\n    //######################### public methods #########################\n\n    /**\n     * Gets information about running application\n     * @returns Observable\n     */\n    @JsonContentType()\n    @POST('/getAllHealthcareProffesionals')\n    public getAllLekari(@Body _filter:any, @QueryObject _paging?: Pageable, @QueryObject _ordering?: Orderable): Observable<PagedData<LekarItem>>\n    {\n        return null;\n    }\n}","<div class=\"page-title top-border-round\">Prehľad všetkých lekárov</div>\n\n<div class=\"flex-1 flex-column\">\n    \n    <!-- LEKARI FILLTER -->\n    <div class=\"primary-block padding-horizontal-small\">\n        <form [formGroup]=\"filter\" novalidate class=\"tight\">\n\n            <div class=\"flex flex-row\">\n                <div class=\"flex-1\"><ng-template [ngIf]=\"filterCollapsed\">{{filter | formValuePreview}}</ng-template></div>\n                <div class=\"three-lines\" maxWidthQuery (click)=\"filterCollapsed = !filterCollapsed\" (visibleChange)=\"filterCollapsed = !$event; invalidateVisuals()\"></div>\n            </div>\n\n            <div class=\"filter\">\n    \n                <!-- MENO -->\n                <div class=\"form-group\">\n                    <label class=\"control-label filter-label\">Meno</label>\n    \n                    <input formControlName=\"firstName\" class=\"form-control\" placeholder=\"Meno\">\n                </div>\n    \n                <!-- PRIEZVISKO -->\n                <div class=\"form-group\">\n                <label class=\"control-label filter-label\">Priezvisko</label>\n    \n                    <input formControlName=\"lastName\" class=\"form-control\" placeholder=\"Priezvisko\">\n                </div>\n    \n                <!-- KOD LEKARA -->\n                <div class=\"form-group\">\n                    <label class=\"control-label filter-label\">Kód lekára</label>\n    \n                    <input formControlName=\"healthcareProfessionalCode\" class=\"form-control\" placeholder=\"Kód lekára\">\n                </div>\n    \n                <!-- KONTAKT LEKARA -->\n                <div class=\"form-group\">\n                    <label class=\"control-label filter-label\">Kontakt lekára</label>\n    \n                    <input formControlName=\"contact\" class=\"form-control\" placeholder=\"Kontakt lekára\">\n                </div>\n                </div>\n    \n                <div class=\"flex-row buttons\">\n                    <div class=\"flex-1\">\n                    </div>\n    \n                    <div class=\"flex-row flex-end\">\n                        <btn-column-selection [grid]=\"grid\" class=\"margin-right-small\"></btn-column-selection>\n    \n                        <button class=\"btn btn-default margin-right-small\" type=\"button\">\n                            <span class=\"fas fa-sync\"></span>\n                            <span>obnoviť</span>\n                        </button>\n    \n                        <button class=\"btn btn-primary\" type=\"submit\" (click)=\"search()\">\n                            <span class=\"fa fa-search\"></span>\n                            <span>hľadať</span>\n                        </button>\n                    </div>\n                </div>\n        </form>\n    </div>\n\n    <!-- GRID -->\n    <div class=\"flex-1 flex-column\">\n        <div class=\"padding-horizontal-small bottom-border-round primary-block flex-column padding-top-extra-small max-height-full\">\n            <ng-grid class=\"flex-1 flex-column\" #grid [gridOptions]=\"gridOptions\">\n                <basic-table-metadata>\n                    <basic-table-column id=\"firstNameColumn\" name=\"firstName\" title=\"Meno\" headerTooltip=\"Meno lekára\" [ordering]=true></basic-table-column>\n                    <basic-table-column id=\"lastNameColumn\" name=\"lastName\" title=\"Priezvisko lekára\" [ordering]=true></basic-table-column>\n                    <basic-table-column id=\"healthcareProfessionalCodeColumn\" name=\"healthcareProfessionalCode\" title=\"Kód lekára\"  [ordering]=true></basic-table-column>\n                    <basic-table-column id=\"contactColumn\" title=\"Kontakt\">\n                        <ng-template #bodyTemplate let-row>\n                            {{ row.contacts[0]?.contactValue }}\n                        </ng-template>\n                    </basic-table-column>\n                </basic-table-metadata>\n            </ng-grid>\n        </div>\n    </div>\n</div>","import {Component, ChangeDetectionStrategy, ChangeDetectorRef} from '@angular/core';\nimport {FormBuilder} from '@angular/forms';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {AuthGuard, Authorize} from '@anglr/authentication';\nimport {ComponentRedirectRoute, ComponentRoute} from '@anglr/common/router';\nimport {AsyncDataLoaderOptions, SimpleOrdering} from '@anglr/grid';\nimport {Observable} from 'rxjs';\n\nimport {BasePrehladComponent} from '../../../misc/basePrehladComponent';\nimport {LekariService, LekarItem} from '../../../services/api/lekari';\nimport {Orderable, Pageable, PagedData} from '../../../misc/types';\n\n/**\n * Page used for displaying list of 'lekar'\n */\n@Component(\n{\n    selector: 'lekari-prehlad-view',\n    templateUrl: './prehlad.component.html',\n    styleUrls: ['./prehlad.component.scss'],\n    providers: [LekariService],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@Authorize('lekari-prehlad-page')\n@ComponentRedirectRoute('', 'prehlad', true)\n@ComponentRoute({path: 'prehlad', canActivate: [AuthGuard]})                                                                                                                           \nexport class LekariPrehladComponent extends BasePrehladComponent<any, LekarItem>\n{\n\n    //######################### protected properties #########################\n\n    /**\n     * Gets default value of filter\n     */\n    protected get defaultFilterValue(): any\n    {\n        return {\n            firstName: '',\n            lastName: '',\n            healthcareProfessionalCode: '',\n            contact: ''\n        };\n    }\n\n    //######################### constructor #########################\n    constructor(formBuilder: FormBuilder,\n                route: ActivatedRoute,\n                router: Router,\n                private _dataSvc: LekariService,\n                changeDetector: ChangeDetectorRef)\n    {\n        super(formBuilder, route, router, changeDetector);\n\n        this.gridOptions =\n        {\n            plugins:\n            {\n                dataLoader:\n                {\n                    options: <AsyncDataLoaderOptions<LekarItem, SimpleOrdering>>\n                    {\n                        dataCallback: this._getData\n                    }\n                }\n            }\n        };\n    }\n\n    //######################### protected methods #########################\n    \n    /**\n     * Gets data for prehlad\n     * @param paging Information about requested paging\n     * @param ordering Information about requested ordering\n     * @param filter Information about requested filter\n     */\n    protected getPrehlad(paging?: Pageable,\n                         ordering?: Orderable,\n                         filter?: any): Observable<PagedData<LekarItem>>\n    {\n        return this._dataSvc.getAllLekari(filter, paging, ordering);\n    }\n}","//import {MeraniaDetailComponent} from './detail/detail.component';\nimport {LekariPrehladComponent} from './prehlad/prehlad.component';\n\nexport const components =\n[\n    LekariPrehladComponent\n];","import {NgModule} from '@angular/core';\nimport {ModuleRoutes} from '@anglr/common/router';\n\nimport {DisplayingFeatureModule, FormsFeatureModule, FormValuePreviewModule, GridFeatureModule, VahaTagModule, VyberStlpcovBtnModule} from '../../modules';\nimport {components} from './lekari.routes';\n\n/**\n * Module for pacienti pages\n */\n@NgModule(\n{\n    imports:\n    [\n        DisplayingFeatureModule,\n        FormsFeatureModule,\n        GridFeatureModule,\n        VahaTagModule,\n        VyberStlpcovBtnModule,\n        FormValuePreviewModule\n    ],\n    declarations:\n    [\n        ...components,\n    ]\n})\n@ModuleRoutes(components)\nexport class LekariModule\n{\n}"],"sourceRoot":""}