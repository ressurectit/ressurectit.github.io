{"version":3,"sources":["webpack://telecovid/./app/services/systemNotifications/systemNotifications.service.ts","webpack://telecovid/./app/staticProviders.electron.ts"],"names":["SystemNotifications","logger","_enabled","window","Notification","permission","this","warn","requestPermission","then","message","body","appStableFactory","isStable","electronGlobal","ipcRenderer","send","settingsStorageFactory","get","extend","theme","language","sendSync","set","settings","getDebugging","consoleEnabled","debugData","setDebugging","getLogging","consoleLogLevel","fileLogLevel","setLogging","titleBarFactory","remote","getCurrentWindow","maximizeSubject","on","titleBar","maximized","next","close","minimize","restoreMaximize","isMaximized","unmaximize","maximize","maximizedChange","asObservable","providers","provide","useFactory","deps","useValue","rendererLogger","showMessage"],"mappings":"uKASO,MAAMA,EAUT,YAA4BC,GAHpB,KAAAC,UAAoB,EAMlB,iBAAkBC,OAKa,YAA5BC,aAAaC,WAElBC,KAAKJ,UAAW,EAGiB,WAA5BE,aAAaC,aAElBJ,EAAOM,KAAK,iDAEZH,aAAaI,oBAAoBC,MAAMJ,IAGhB,YAAfA,IAEAC,KAAKJ,UAAW,OAjBxBD,EAAOM,KAAK,sDA6Bb,YAAYG,GAGXJ,KAAKJ,UAGL,IAAIE,aAAa,KACjB,CACIO,KAAMD,K,iCApDTV,GAAmB,KAUR,Q,oBAVXA,EAAmB,QAAnBA,EAAmB,gBADP,U,6MCOlB,SAASY,IAEZ,MAAO,CACHC,SAAU,KAENC,eAAeC,YAAYC,KAAK,QAQrC,SAASC,IAEZ,MAAO,CACHC,IAAK,KAAM,IAAAC,SAAO,EACA,GAEA,CACIC,MAAO,kBACPC,SAAU,sBAEdP,eAAeC,YAAYO,SAAS,OACtDC,IAAMC,GAA8BV,eAAeC,YAAYC,KAAK,KAAsBQ,GAC1FC,aAAc,KAAM,IAAAN,SAAO,EACA,GAEA,CACIO,eAAgB,yBAChBC,UAAW,qBAEfb,eAAeC,YAAYO,SAAS,OAC/DM,aAAeJ,GAA4BV,eAAeC,YAAYC,KAAK,KAAwBQ,GACnGK,WAAY,KAAM,IAAAV,SAAO,EACA,GAEA,CACIW,gBAAiB,4BACjBC,aAAc,0BAElBjB,eAAeC,YAAYO,SAAS,OAC7DU,WAAaR,GAA8BV,eAAeC,YAAYC,KAAK,KAAsBQ,IAOlG,SAASS,IAEZ,MAAM9B,EAASW,eAAeoB,OAAOC,mBAC/BC,EAAiC,IAAI,KAE3CjC,EAAOkC,GAAG,YAAY,KAElBC,EAASC,WAAY,EACrBH,EAAgBI,UAGpBrC,EAAOkC,GAAG,cAAc,KAEpBC,EAASC,WAAY,EACrBH,EAAgBI,UAGpB,MAAMF,EAEN,CACIG,MAAO,KAEHtC,EAAOsC,SAEXC,SAAU,KAENvC,EAAOuC,YAEXC,gBAAiB,KAEVxC,EAAOyC,cAENzC,EAAO0C,aAIP1C,EAAO2C,YAGfC,gBAAiBX,EAAgBY,eACjCT,UAAWpC,EAAOyC,eAGtB,OAAON,EAMJ,MAAMW,EACb,CAEI,CACIC,QAAS,KACTC,WAAYvC,EACZwC,KAAM,IAGV,CACIF,QAAS,KACTC,WAAYlB,EACZmB,KAAM,IAGV,CACIF,QAAS,KACTC,WAAYlC,EACZmC,KAAM,IAGV,CACIF,QAAS,KACTG,SAAUC,gBAGd,CACIJ,QAAS,IACTC,WAAY,KAED,CACHI,YAAc7C,IAEVI,eAAeC,YAAYC,KAAK,KAAmBN","file":"905.client.es2015.chunk.0a03818fbd5be7cd8579.js","sourcesContent":["import {Inject, Injectable} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\n\nimport {NOTIFICATION_TITLE} from '../../misc/constants';\n\n/**\n * Service used for displaying system notifications\n */\n@Injectable({providedIn: 'root'})\nexport class SystemNotifications\n{\n    //######################### private fields #########################\n\n    /**\n     * Indication that notifications are enabled\n     */\n    private _enabled: boolean = false;\n\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) logger: Logger)\n    {\n        // Let's check if the browser supports notifications\n        if (!('Notification' in window)) \n        {\n            logger.warn('This browser does not support desktop notification');\n        }\n        //\n        else if (Notification.permission === 'granted')\n        {\n            this._enabled = true;\n        }\n        // Otherwise, we need to ask the user for permission\n        else if (Notification.permission !== 'denied')\n        {\n            logger.warn('User has not allowed desktop notification yet');\n\n            Notification.requestPermission().then((permission) =>\n            {\n                // If the user accepts, let's create a notification\n                if (permission === 'granted')\n                {\n                    this._enabled = true;\n                }\n            });\n        }\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Shows message as system notification\n     * @param message - Message to be displayed\n     */\n    public showMessage(message: string)\n    {\n        // Let's check whether notification permissions have already been granted\n        if (this._enabled)\n        {\n            // If it's okay let's create a notification\n            new Notification(NOTIFICATION_TITLE,\n            {\n                body: message\n            });\n        }\n    }\n}","import {StaticProvider, FactoryProvider, ValueProvider} from '@angular/core';\nimport {extend} from '@jscrpt/common';\nimport {Subject} from 'rxjs';\n\nimport {config as defaultConfig, SettingsGeneral, SettingsDebug, SettingsLogging} from './config';\nimport {WEB_APP_READY, GET_GENERAL_SETTINGS, SET_GENERAL_SETTINGS, GET_DEBUGGING_SETTINGS, SET_DEBUGGING_SETTINGS, GET_LOGGING_SETTINGS, SET_LOGGING_SETTINGS, SHOW_NOTIFICATION} from './misc/constants';\nimport {AppStable} from './services/isStable';\nimport {NG_APP_STABLE, TITLE_BAR, SETTINGS_STORAGE, FILE_LOGGER} from './misc/tokens';\nimport {TitleBar} from './services/titleBar';\nimport {SettingsStorage} from './services/settings';\nimport {SystemNotifications} from './services/systemNotifications';\n\n/**\n * Factory method for AppStable\n */\nexport function appStableFactory(): AppStable\n{\n    return {\n        isStable: () =>\n        {\n            electronGlobal.ipcRenderer.send(WEB_APP_READY);\n        }\n    };\n}\n\n/**\n * Factory method for SettingsStorage\n */\nexport function settingsStorageFactory(): SettingsStorage\n{\n    return {\n        get: () => extend(true,\n                          {},\n                          <SettingsGeneral>\n                          {\n                              theme: defaultConfig.general.theme,\n                              language: defaultConfig.general.language\n                          },\n                          electronGlobal.ipcRenderer.sendSync(GET_GENERAL_SETTINGS)),\n        set: (settings: SettingsGeneral) => electronGlobal.ipcRenderer.send(SET_GENERAL_SETTINGS, settings),\n        getDebugging: () => extend(true,\n                                   {},\n                                   <SettingsDebug>\n                                   {\n                                       consoleEnabled: defaultConfig.debug.consoleEnabled,\n                                       debugData: defaultConfig.debug.debugData\n                                   },\n                                   electronGlobal.ipcRenderer.sendSync(GET_DEBUGGING_SETTINGS)),\n        setDebugging: (settings: SettingsDebug) => electronGlobal.ipcRenderer.send(SET_DEBUGGING_SETTINGS, settings),\n        getLogging: () => extend(true,\n                                 {},\n                                 <SettingsLogging>\n                                 {\n                                     consoleLogLevel: defaultConfig.logging.consoleLogLevel,\n                                     fileLogLevel: defaultConfig.logging.fileLogLevel\n                                 },\n                                 electronGlobal.ipcRenderer.sendSync(GET_LOGGING_SETTINGS)),\n        setLogging: (settings: SettingsLogging) => electronGlobal.ipcRenderer.send(SET_LOGGING_SETTINGS, settings)\n    };\n}\n\n/**\n * Factory method for TitleBar\n */\nexport function titleBarFactory(): TitleBar\n{\n    const window = electronGlobal.remote.getCurrentWindow();\n    const maximizeSubject: Subject<void> = new Subject<void>();\n\n    window.on('maximize', () =>\n    {\n        titleBar.maximized = true;\n        maximizeSubject.next();\n    });\n\n    window.on('unmaximize', () =>\n    {\n        titleBar.maximized = false;\n        maximizeSubject.next();\n    });\n\n    const titleBar =\n    <TitleBar>\n    {\n        close: () =>\n        {\n            window.close();\n        },\n        minimize: () =>\n        {\n            window.minimize();\n        },\n        restoreMaximize: () =>\n        {\n            if(window.isMaximized())\n            {\n                window.unmaximize();\n            }\n            else\n            {\n                window.maximize();\n            }\n        },\n        maximizedChange: maximizeSubject.asObservable(),\n        maximized: window.isMaximized()\n    };\n\n    return titleBar;\n}\n\n/**\n * Array of static providers\n */\nexport const providers: StaticProvider[] =\n[\n    <FactoryProvider>\n    {\n        provide: NG_APP_STABLE,\n        useFactory: appStableFactory,\n        deps: []\n    },\n    <FactoryProvider>\n    {\n        provide: TITLE_BAR,\n        useFactory: titleBarFactory,\n        deps: []\n    },\n    <FactoryProvider>\n    {\n        provide: SETTINGS_STORAGE,\n        useFactory: settingsStorageFactory,\n        deps: []\n    },\n    <ValueProvider>\n    {\n        provide: FILE_LOGGER,\n        useValue: rendererLogger\n    },\n    <FactoryProvider>\n    {\n        provide: SystemNotifications,\n        useFactory: () =>\n        {\n            return {\n                showMessage: (message: string) =>\n                {\n                    electronGlobal.ipcRenderer.send(SHOW_NOTIFICATION, message);\n                }\n            };\n        }\n    }\n];"],"sourceRoot":""}